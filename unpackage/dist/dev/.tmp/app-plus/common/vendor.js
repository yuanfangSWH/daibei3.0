(global["webpackJsonp"] = global["webpackJsonp"] || []).push([["common/vendor"],{

/***/ 1:
/*!***********************************************************!*\
  !*** ./node_modules/@dcloudio/uni-app-plus/dist/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.createApp = createApp;exports.createComponent = createComponent;exports.createPage = createPage;exports.default = void 0;var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");}function _iterableToArrayLimit(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i[\"return\"] != null) _i[\"return\"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError(\"Invalid attempt to spread non-iterable instance\");}function _iterableToArray(iter) {if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;}}\n\nvar _toString = Object.prototype.toString;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction isFn(fn) {\n  return typeof fn === 'function';\n}\n\nfunction isStr(str) {\n  return typeof str === 'string';\n}\n\nfunction isPlainObject(obj) {\n  return _toString.call(obj) === '[object Object]';\n}\n\nfunction hasOwn(obj, key) {\n  return hasOwnProperty.call(obj, key);\n}\n\nfunction noop() {}\n\n/**\r\n                    * Create a cached version of a pure function.\r\n                    */\nfunction cached(fn) {\n  var cache = Object.create(null);\n  return function cachedFn(str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str));\n  };\n}\n\n/**\r\n   * Camelize a hyphen-delimited string.\r\n   */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) {return c ? c.toUpperCase() : '';});\n});\n\nvar HOOKS = [\n'invoke',\n'success',\n'fail',\n'complete',\n'returnValue'];\n\n\nvar globalInterceptors = {};\nvar scopedInterceptors = {};\n\nfunction mergeHook(parentVal, childVal) {\n  var res = childVal ?\n  parentVal ?\n  parentVal.concat(childVal) :\n  Array.isArray(childVal) ?\n  childVal : [childVal] :\n  parentVal;\n  return res ?\n  dedupeHooks(res) :\n  res;\n}\n\nfunction dedupeHooks(hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res;\n}\n\nfunction removeHook(hooks, hook) {\n  var index = hooks.indexOf(hook);\n  if (index !== -1) {\n    hooks.splice(index, 1);\n  }\n}\n\nfunction mergeInterceptorHook(interceptor, option) {\n  Object.keys(option).forEach(function (hook) {\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\n      interceptor[hook] = mergeHook(interceptor[hook], option[hook]);\n    }\n  });\n}\n\nfunction removeInterceptorHook(interceptor, option) {\n  if (!interceptor || !option) {\n    return;\n  }\n  Object.keys(option).forEach(function (hook) {\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\n      removeHook(interceptor[hook], option[hook]);\n    }\n  });\n}\n\nfunction addInterceptor(method, option) {\n  if (typeof method === 'string' && isPlainObject(option)) {\n    mergeInterceptorHook(scopedInterceptors[method] || (scopedInterceptors[method] = {}), option);\n  } else if (isPlainObject(method)) {\n    mergeInterceptorHook(globalInterceptors, method);\n  }\n}\n\nfunction removeInterceptor(method, option) {\n  if (typeof method === 'string') {\n    if (isPlainObject(option)) {\n      removeInterceptorHook(scopedInterceptors[method], option);\n    } else {\n      delete scopedInterceptors[method];\n    }\n  } else if (isPlainObject(method)) {\n    removeInterceptorHook(globalInterceptors, method);\n  }\n}\n\nfunction wrapperHook(hook) {\n  return function (data) {\n    return hook(data) || data;\n  };\n}\n\nfunction isPromise(obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n\nfunction queue(hooks, data) {\n  var promise = false;\n  for (var i = 0; i < hooks.length; i++) {\n    var hook = hooks[i];\n    if (promise) {\n      promise = Promise.then(wrapperHook(hook));\n    } else {\n      var res = hook(data);\n      if (isPromise(res)) {\n        promise = Promise.resolve(res);\n      }\n      if (res === false) {\n        return {\n          then: function then() {} };\n\n      }\n    }\n  }\n  return promise || {\n    then: function then(callback) {\n      return callback(data);\n    } };\n\n}\n\nfunction wrapperOptions(interceptor) {var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  ['success', 'fail', 'complete'].forEach(function (name) {\n    if (Array.isArray(interceptor[name])) {\n      var oldCallback = options[name];\n      options[name] = function callbackInterceptor(res) {\n        queue(interceptor[name], res).then(function (res) {\n          /* eslint-disable no-mixed-operators */\n          return isFn(oldCallback) && oldCallback(res) || res;\n        });\n      };\n    }\n  });\n  return options;\n}\n\nfunction wrapperReturnValue(method, returnValue) {\n  var returnValueHooks = [];\n  if (Array.isArray(globalInterceptors.returnValue)) {\n    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(globalInterceptors.returnValue));\n  }\n  var interceptor = scopedInterceptors[method];\n  if (interceptor && Array.isArray(interceptor.returnValue)) {\n    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(interceptor.returnValue));\n  }\n  returnValueHooks.forEach(function (hook) {\n    returnValue = hook(returnValue) || returnValue;\n  });\n  return returnValue;\n}\n\nfunction getApiInterceptorHooks(method) {\n  var interceptor = Object.create(null);\n  Object.keys(globalInterceptors).forEach(function (hook) {\n    if (hook !== 'returnValue') {\n      interceptor[hook] = globalInterceptors[hook].slice();\n    }\n  });\n  var scopedInterceptor = scopedInterceptors[method];\n  if (scopedInterceptor) {\n    Object.keys(scopedInterceptor).forEach(function (hook) {\n      if (hook !== 'returnValue') {\n        interceptor[hook] = (interceptor[hook] || []).concat(scopedInterceptor[hook]);\n      }\n    });\n  }\n  return interceptor;\n}\n\nfunction invokeApi(method, api, options) {for (var _len = arguments.length, params = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {params[_key - 3] = arguments[_key];}\n  var interceptor = getApiInterceptorHooks(method);\n  if (interceptor && Object.keys(interceptor).length) {\n    if (Array.isArray(interceptor.invoke)) {\n      var res = queue(interceptor.invoke, options);\n      return res.then(function (options) {\n        return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));\n      });\n    } else {\n      return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));\n    }\n  }\n  return api.apply(void 0, [options].concat(params));\n}\n\nvar promiseInterceptor = {\n  returnValue: function returnValue(res) {\n    if (!isPromise(res)) {\n      return res;\n    }\n    return res.then(function (res) {\n      return res[1];\n    }).catch(function (res) {\n      return res[0];\n    });\n  } };\n\n\nvar SYNC_API_RE =\n/^\\$|getMenuButtonBoundingClientRect|^report|interceptors|Interceptor$|getSubNVueById|requireNativePlugin|upx2px|hideKeyboard|canIUse|^create|Sync$|Manager$|base64ToArrayBuffer|arrayBufferToBase64/;\n\nvar CONTEXT_API_RE = /^create|Manager$/;\n\nvar CALLBACK_API_RE = /^on/;\n\nfunction isContextApi(name) {\n  return CONTEXT_API_RE.test(name);\n}\nfunction isSyncApi(name) {\n  return SYNC_API_RE.test(name);\n}\n\nfunction isCallbackApi(name) {\n  return CALLBACK_API_RE.test(name);\n}\n\nfunction handlePromise(promise) {\n  return promise.then(function (data) {\n    return [null, data];\n  }).\n  catch(function (err) {return [err];});\n}\n\nfunction shouldPromise(name) {\n  if (\n  isContextApi(name) ||\n  isSyncApi(name) ||\n  isCallbackApi(name))\n  {\n    return false;\n  }\n  return true;\n}\n\nfunction promisify(name, api) {\n  if (!shouldPromise(name)) {\n    return api;\n  }\n  return function promiseApi() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {params[_key2 - 1] = arguments[_key2];}\n    if (isFn(options.success) || isFn(options.fail) || isFn(options.complete)) {\n      return wrapperReturnValue(name, invokeApi.apply(void 0, [name, api, options].concat(params)));\n    }\n    return wrapperReturnValue(name, handlePromise(new Promise(function (resolve, reject) {\n      invokeApi.apply(void 0, [name, api, Object.assign({}, options, {\n        success: resolve,\n        fail: reject })].concat(\n      params));\n      /* eslint-disable no-extend-native */\n      if (!Promise.prototype.finally) {\n        Promise.prototype.finally = function (callback) {\n          var promise = this.constructor;\n          return this.then(\n          function (value) {return promise.resolve(callback()).then(function () {return value;});},\n          function (reason) {return promise.resolve(callback()).then(function () {\n              throw reason;\n            });});\n\n        };\n      }\n    })));\n  };\n}\n\nvar EPS = 1e-4;\nvar BASE_DEVICE_WIDTH = 750;\nvar isIOS = false;\nvar deviceWidth = 0;\nvar deviceDPR = 0;\n\nfunction checkDeviceWidth() {var _wx$getSystemInfoSync =\n\n\n\n\n  wx.getSystemInfoSync(),platform = _wx$getSystemInfoSync.platform,pixelRatio = _wx$getSystemInfoSync.pixelRatio,windowWidth = _wx$getSystemInfoSync.windowWidth; // uni=>wx runtime 编译目标是 uni 对象，内部不允许直接使用 uni\n\n  deviceWidth = windowWidth;\n  deviceDPR = pixelRatio;\n  isIOS = platform === 'ios';\n}\n\nfunction upx2px(number, newDeviceWidth) {\n  if (deviceWidth === 0) {\n    checkDeviceWidth();\n  }\n\n  number = Number(number);\n  if (number === 0) {\n    return 0;\n  }\n  var result = number / BASE_DEVICE_WIDTH * (newDeviceWidth || deviceWidth);\n  if (result < 0) {\n    result = -result;\n  }\n  result = Math.floor(result + EPS);\n  if (result === 0) {\n    if (deviceDPR === 1 || !isIOS) {\n      return 1;\n    } else {\n      return 0.5;\n    }\n  }\n  return number < 0 ? -result : result;\n}\n\nvar interceptors = {\n  promiseInterceptor: promiseInterceptor };\n\n\n\n\nvar baseApi = /*#__PURE__*/Object.freeze({\n  upx2px: upx2px,\n  interceptors: interceptors,\n  addInterceptor: addInterceptor,\n  removeInterceptor: removeInterceptor });\n\n\nvar protocols = {};\nvar todos = [];\nvar canIUses = [];\n\nvar CALLBACKS = ['success', 'fail', 'cancel', 'complete'];\n\nfunction processCallback(methodName, method, returnValue) {\n  return function (res) {\n    return method(processReturnValue(methodName, res, returnValue));\n  };\n}\n\nfunction processArgs(methodName, fromArgs) {var argsOption = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};var returnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};var keepFromArgs = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  if (isPlainObject(fromArgs)) {// 一般 api 的参数解析\n    var toArgs = keepFromArgs === true ? fromArgs : {}; // returnValue 为 false 时，说明是格式化返回值，直接在返回值对象上修改赋值\n    if (isFn(argsOption)) {\n      argsOption = argsOption(fromArgs, toArgs) || {};\n    }\n    for (var key in fromArgs) {\n      if (hasOwn(argsOption, key)) {\n        var keyOption = argsOption[key];\n        if (isFn(keyOption)) {\n          keyOption = keyOption(fromArgs[key], fromArgs, toArgs);\n        }\n        if (!keyOption) {// 不支持的参数\n          console.warn(\"app-plus \".concat(methodName, \"\\u6682\\u4E0D\\u652F\\u6301\").concat(key));\n        } else if (isStr(keyOption)) {// 重写参数 key\n          toArgs[keyOption] = fromArgs[key];\n        } else if (isPlainObject(keyOption)) {// {name:newName,value:value}可重新指定参数 key:value\n          toArgs[keyOption.name ? keyOption.name : key] = keyOption.value;\n        }\n      } else if (CALLBACKS.indexOf(key) !== -1) {\n        toArgs[key] = processCallback(methodName, fromArgs[key], returnValue);\n      } else {\n        if (!keepFromArgs) {\n          toArgs[key] = fromArgs[key];\n        }\n      }\n    }\n    return toArgs;\n  } else if (isFn(fromArgs)) {\n    fromArgs = processCallback(methodName, fromArgs, returnValue);\n  }\n  return fromArgs;\n}\n\nfunction processReturnValue(methodName, res, returnValue) {var keepReturnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  if (isFn(protocols.returnValue)) {// 处理通用 returnValue\n    res = protocols.returnValue(methodName, res);\n  }\n  return processArgs(methodName, res, returnValue, {}, keepReturnValue);\n}\n\nfunction wrapper(methodName, method) {\n  if (hasOwn(protocols, methodName)) {\n    var protocol = protocols[methodName];\n    if (!protocol) {// 暂不支持的 api\n      return function () {\n        console.error(\"app-plus \\u6682\\u4E0D\\u652F\\u6301\".concat(methodName));\n      };\n    }\n    return function (arg1, arg2) {// 目前 api 最多两个参数\n      var options = protocol;\n      if (isFn(protocol)) {\n        options = protocol(arg1);\n      }\n\n      arg1 = processArgs(methodName, arg1, options.args, options.returnValue);\n\n      var args = [arg1];\n      if (typeof arg2 !== 'undefined') {\n        args.push(arg2);\n      }\n      var returnValue = wx[options.name || methodName].apply(wx, args);\n      if (isSyncApi(methodName)) {// 同步 api\n        return processReturnValue(methodName, returnValue, options.returnValue, isContextApi(methodName));\n      }\n      return returnValue;\n    };\n  }\n  return method;\n}\n\nvar todoApis = Object.create(null);\n\nvar TODOS = [\n'onTabBarMidButtonTap',\n'subscribePush',\n'unsubscribePush',\n'onPush',\n'offPush',\n'share'];\n\n\nfunction createTodoApi(name) {\n  return function todoApi(_ref)\n\n\n  {var fail = _ref.fail,complete = _ref.complete;\n    var res = {\n      errMsg: \"\".concat(name, \":fail:\\u6682\\u4E0D\\u652F\\u6301 \").concat(name, \" \\u65B9\\u6CD5\") };\n\n    isFn(fail) && fail(res);\n    isFn(complete) && complete(res);\n  };\n}\n\nTODOS.forEach(function (name) {\n  todoApis[name] = createTodoApi(name);\n});\n\nvar getEmitter = function () {\n  if (typeof getUniEmitter === 'function') {\n    /* eslint-disable no-undef */\n    return getUniEmitter;\n  }\n  var Emitter;\n  return function getUniEmitter() {\n    if (!Emitter) {\n      Emitter = new _vue.default();\n    }\n    return Emitter;\n  };\n}();\n\nfunction apply(ctx, method, args) {\n  return ctx[method].apply(ctx, args);\n}\n\nfunction $on() {\n  return apply(getEmitter(), '$on', Array.prototype.slice.call(arguments));\n}\nfunction $off() {\n  return apply(getEmitter(), '$off', Array.prototype.slice.call(arguments));\n}\nfunction $once() {\n  return apply(getEmitter(), '$once', Array.prototype.slice.call(arguments));\n}\nfunction $emit() {\n  return apply(getEmitter(), '$emit', Array.prototype.slice.call(arguments));\n}\n\nvar eventApi = /*#__PURE__*/Object.freeze({\n  $on: $on,\n  $off: $off,\n  $once: $once,\n  $emit: $emit });\n\n\nfunction requireNativePlugin(pluginName) {\n  /* eslint-disable no-undef */\n  if (typeof weex !== 'undefined') {\n    return weex.requireModule(pluginName);\n  }\n  /* eslint-disable no-undef */\n  return __requireNativePlugin__(pluginName);\n}\n\nfunction wrapper$1(webview) {\n  webview.$processed = true;\n\n  webview.postMessage = function (data) {\n    plus.webview.postMessageToUniNView({\n      type: 'UniAppSubNVue',\n      data: data },\n    webview.id);\n  };\n  var callbacks = [];\n  webview.onMessage = function (callback) {\n    callbacks.push(callback);\n  };\n  webview.$consumeMessage = function (e) {\n    callbacks.forEach(function (callback) {return callback(e);});\n  };\n\n  if (!webview.__uniapp_mask_id) {\n    return;\n  }\n  var maskColor = webview.__uniapp_mask;\n  var maskWebview = webview.__uniapp_mask_id === '0' ? {\n    setStyle: function setStyle(_ref2)\n\n    {var mask = _ref2.mask;\n      requireNativePlugin('uni-tabview').setMask({\n        color: mask });\n\n    } } :\n  plus.webview.getWebviewById(webview.__uniapp_mask_id);\n  var oldShow = webview.show;\n  var oldHide = webview.hide;\n  var oldClose = webview.close;\n\n  var showMask = function showMask() {\n    maskWebview.setStyle({\n      mask: maskColor });\n\n  };\n  var closeMask = function closeMask() {\n    maskWebview.setStyle({\n      mask: 'none' });\n\n  };\n  webview.show = function () {\n    showMask();for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {args[_key3] = arguments[_key3];}\n    return oldShow.apply(webview, args);\n  };\n  webview.hide = function () {\n    closeMask();for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {args[_key4] = arguments[_key4];}\n    return oldHide.apply(webview, args);\n  };\n  webview.close = function () {\n    closeMask();\n    callbacks = [];for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {args[_key5] = arguments[_key5];}\n    return oldClose.apply(webview, args);\n  };\n}\n\nfunction getSubNVueById(id) {\n  var webview = plus.webview.getWebviewById(id);\n  if (webview && !webview.$processed) {\n    wrapper$1(webview);\n  }\n  return webview;\n}\n\n\n\nvar api = /*#__PURE__*/Object.freeze({\n  getSubNVueById: getSubNVueById,\n  requireNativePlugin: requireNativePlugin });\n\n\nvar MPPage = Page;\nvar MPComponent = Component;\n\nvar customizeRE = /:/g;\n\nvar customize = cached(function (str) {\n  return camelize(str.replace(customizeRE, '-'));\n});\n\nfunction initTriggerEvent(mpInstance) {\n  {\n    if (!wx.canIUse('nextTick')) {\n      return;\n    }\n  }\n  var oldTriggerEvent = mpInstance.triggerEvent;\n  mpInstance.triggerEvent = function (event) {for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {args[_key6 - 1] = arguments[_key6];}\n    return oldTriggerEvent.apply(mpInstance, [customize(event)].concat(args));\n  };\n}\n\nfunction initHook(name, options) {\n  var oldHook = options[name];\n  if (!oldHook) {\n    options[name] = function () {\n      initTriggerEvent(this);\n    };\n  } else {\n    options[name] = function () {\n      initTriggerEvent(this);for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {args[_key7] = arguments[_key7];}\n      return oldHook.apply(this, args);\n    };\n  }\n}\n\nPage = function Page() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  initHook('onLoad', options);\n  return MPPage(options);\n};\n\nComponent = function Component() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  initHook('created', options);\n  return MPComponent(options);\n};\n\nvar PAGE_EVENT_HOOKS = [\n'onPullDownRefresh',\n'onReachBottom',\n'onShareAppMessage',\n'onPageScroll',\n'onResize',\n'onTabItemTap'];\n\n\nfunction initMocks(vm, mocks) {\n  var mpInstance = vm.$mp[vm.mpType];\n  mocks.forEach(function (mock) {\n    if (hasOwn(mpInstance, mock)) {\n      vm[mock] = mpInstance[mock];\n    }\n  });\n}\n\nfunction hasHook(hook, vueOptions) {\n  if (!vueOptions) {\n    return true;\n  }\n\n  if (_vue.default.options && Array.isArray(_vue.default.options[hook])) {\n    return true;\n  }\n\n  vueOptions = vueOptions.default || vueOptions;\n\n  if (isFn(vueOptions)) {\n    if (isFn(vueOptions.extendOptions[hook])) {\n      return true;\n    }\n    if (vueOptions.super &&\n    vueOptions.super.options &&\n    Array.isArray(vueOptions.super.options[hook])) {\n      return true;\n    }\n    return false;\n  }\n\n  if (isFn(vueOptions[hook])) {\n    return true;\n  }\n  var mixins = vueOptions.mixins;\n  if (Array.isArray(mixins)) {\n    return !!mixins.find(function (mixin) {return hasHook(hook, mixin);});\n  }\n}\n\nfunction initHooks(mpOptions, hooks, vueOptions) {\n  hooks.forEach(function (hook) {\n    if (hasHook(hook, vueOptions)) {\n      mpOptions[hook] = function (args) {\n        return this.$vm && this.$vm.__call_hook(hook, args);\n      };\n    }\n  });\n}\n\nfunction initVueComponent(Vue, vueOptions) {\n  vueOptions = vueOptions.default || vueOptions;\n  var VueComponent;\n  if (isFn(vueOptions)) {\n    VueComponent = vueOptions;\n    vueOptions = VueComponent.extendOptions;\n  } else {\n    VueComponent = Vue.extend(vueOptions);\n  }\n  return [VueComponent, vueOptions];\n}\n\nfunction initSlots(vm, vueSlots) {\n  if (Array.isArray(vueSlots) && vueSlots.length) {\n    var $slots = Object.create(null);\n    vueSlots.forEach(function (slotName) {\n      $slots[slotName] = true;\n    });\n    vm.$scopedSlots = vm.$slots = $slots;\n  }\n}\n\nfunction initVueIds(vueIds, mpInstance) {\n  vueIds = (vueIds || '').split(',');\n  var len = vueIds.length;\n\n  if (len === 1) {\n    mpInstance._$vueId = vueIds[0];\n  } else if (len === 2) {\n    mpInstance._$vueId = vueIds[0];\n    mpInstance._$vuePid = vueIds[1];\n  }\n}\n\nfunction initData(vueOptions, context) {\n  var data = vueOptions.data || {};\n  var methods = vueOptions.methods || {};\n\n  if (typeof data === 'function') {\n    try {\n      data = data.call(context); // 支持 Vue.prototype 上挂的数据\n    } catch (e) {\n      if (Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\n        console.warn('根据 Vue 的 data 函数初始化小程序 data 失败，请尽量确保 data 函数中不访问 vm 对象，否则可能影响首次数据渲染速度。', data);\n      }\n    }\n  } else {\n    try {\n      // 对 data 格式化\n      data = JSON.parse(JSON.stringify(data));\n    } catch (e) {}\n  }\n\n  if (!isPlainObject(data)) {\n    data = {};\n  }\n\n  Object.keys(methods).forEach(function (methodName) {\n    if (context.__lifecycle_hooks__.indexOf(methodName) === -1 && !hasOwn(data, methodName)) {\n      data[methodName] = methods[methodName];\n    }\n  });\n\n  return data;\n}\n\nvar PROP_TYPES = [String, Number, Boolean, Object, Array, null];\n\nfunction createObserver(name) {\n  return function observer(newVal, oldVal) {\n    if (this.$vm) {\n      this.$vm[name] = newVal; // 为了触发其他非 render watcher\n    }\n  };\n}\n\nfunction initBehaviors(vueOptions, initBehavior) {\n  var vueBehaviors = vueOptions['behaviors'];\n  var vueExtends = vueOptions['extends'];\n  var vueMixins = vueOptions['mixins'];\n\n  var vueProps = vueOptions['props'];\n\n  if (!vueProps) {\n    vueOptions['props'] = vueProps = [];\n  }\n\n  var behaviors = [];\n  if (Array.isArray(vueBehaviors)) {\n    vueBehaviors.forEach(function (behavior) {\n      behaviors.push(behavior.replace('uni://', \"wx\".concat(\"://\")));\n      if (behavior === 'uni://form-field') {\n        if (Array.isArray(vueProps)) {\n          vueProps.push('name');\n          vueProps.push('value');\n        } else {\n          vueProps['name'] = {\n            type: String,\n            default: '' };\n\n          vueProps['value'] = {\n            type: [String, Number, Boolean, Array, Object, Date],\n            default: '' };\n\n        }\n      }\n    });\n  }\n  if (isPlainObject(vueExtends) && vueExtends.props) {\n    behaviors.push(\n    initBehavior({\n      properties: initProperties(vueExtends.props, true) }));\n\n\n  }\n  if (Array.isArray(vueMixins)) {\n    vueMixins.forEach(function (vueMixin) {\n      if (isPlainObject(vueMixin) && vueMixin.props) {\n        behaviors.push(\n        initBehavior({\n          properties: initProperties(vueMixin.props, true) }));\n\n\n      }\n    });\n  }\n  return behaviors;\n}\n\nfunction parsePropType(key, type, defaultValue, file) {\n  // [String]=>String\n  if (Array.isArray(type) && type.length === 1) {\n    return type[0];\n  }\n  return type;\n}\n\nfunction initProperties(props) {var isBehavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;var file = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var properties = {};\n  if (!isBehavior) {\n    properties.vueId = {\n      type: String,\n      value: '' };\n\n    properties.vueSlots = { // 小程序不能直接定义 $slots 的 props，所以通过 vueSlots 转换到 $slots\n      type: null,\n      value: [],\n      observer: function observer(newVal, oldVal) {\n        var $slots = Object.create(null);\n        newVal.forEach(function (slotName) {\n          $slots[slotName] = true;\n        });\n        this.setData({\n          $slots: $slots });\n\n      } };\n\n  }\n  if (Array.isArray(props)) {// ['title']\n    props.forEach(function (key) {\n      properties[key] = {\n        type: null,\n        observer: createObserver(key) };\n\n    });\n  } else if (isPlainObject(props)) {// {title:{type:String,default:''},content:String}\n    Object.keys(props).forEach(function (key) {\n      var opts = props[key];\n      if (isPlainObject(opts)) {// title:{type:String,default:''}\n        var value = opts['default'];\n        if (isFn(value)) {\n          value = value();\n        }\n\n        opts.type = parsePropType(key, opts.type);\n\n        properties[key] = {\n          type: PROP_TYPES.indexOf(opts.type) !== -1 ? opts.type : null,\n          value: value,\n          observer: createObserver(key) };\n\n      } else {// content:String\n        var type = parsePropType(key, opts);\n        properties[key] = {\n          type: PROP_TYPES.indexOf(type) !== -1 ? type : null,\n          observer: createObserver(key) };\n\n      }\n    });\n  }\n  return properties;\n}\n\nfunction wrapper$2(event) {\n  // TODO 又得兼容 mpvue 的 mp 对象\n  try {\n    event.mp = JSON.parse(JSON.stringify(event));\n  } catch (e) {}\n\n  event.stopPropagation = noop;\n  event.preventDefault = noop;\n\n  event.target = event.target || {};\n\n  if (!hasOwn(event, 'detail')) {\n    event.detail = {};\n  }\n\n  if (isPlainObject(event.detail)) {\n    event.target = Object.assign({}, event.target, event.detail);\n  }\n\n  return event;\n}\n\nfunction getExtraValue(vm, dataPathsArray) {\n  var context = vm;\n  dataPathsArray.forEach(function (dataPathArray) {\n    var dataPath = dataPathArray[0];\n    var value = dataPathArray[2];\n    if (dataPath || typeof value !== 'undefined') {// ['','',index,'disable']\n      var propPath = dataPathArray[1];\n      var valuePath = dataPathArray[3];\n\n      var vFor = dataPath ? vm.__get_value(dataPath, context) : context;\n\n      if (Number.isInteger(vFor)) {\n        context = value;\n      } else if (!propPath) {\n        context = vFor[value];\n      } else {\n        if (Array.isArray(vFor)) {\n          context = vFor.find(function (vForItem) {\n            return vm.__get_value(propPath, vForItem) === value;\n          });\n        } else if (isPlainObject(vFor)) {\n          context = Object.keys(vFor).find(function (vForKey) {\n            return vm.__get_value(propPath, vFor[vForKey]) === value;\n          });\n        } else {\n          console.error('v-for 暂不支持循环数据：', vFor);\n        }\n      }\n\n      if (valuePath) {\n        context = vm.__get_value(valuePath, context);\n      }\n    }\n  });\n  return context;\n}\n\nfunction processEventExtra(vm, extra, event) {\n  var extraObj = {};\n\n  if (Array.isArray(extra) && extra.length) {\n    /**\r\n                                              *[\r\n                                              *    ['data.items', 'data.id', item.data.id],\r\n                                              *    ['metas', 'id', meta.id]\r\n                                              *],\r\n                                              *[\r\n                                              *    ['data.items', 'data.id', item.data.id],\r\n                                              *    ['metas', 'id', meta.id]\r\n                                              *],\r\n                                              *'test'\r\n                                              */\n    extra.forEach(function (dataPath, index) {\n      if (typeof dataPath === 'string') {\n        if (!dataPath) {// model,prop.sync\n          extraObj['$' + index] = vm;\n        } else {\n          if (dataPath === '$event') {// $event\n            extraObj['$' + index] = event;\n          } else if (dataPath.indexOf('$event.') === 0) {// $event.target.value\n            extraObj['$' + index] = vm.__get_value(dataPath.replace('$event.', ''), event);\n          } else {\n            extraObj['$' + index] = vm.__get_value(dataPath);\n          }\n        }\n      } else {\n        extraObj['$' + index] = getExtraValue(vm, dataPath);\n      }\n    });\n  }\n\n  return extraObj;\n}\n\nfunction getObjByArray(arr) {\n  var obj = {};\n  for (var i = 1; i < arr.length; i++) {\n    var element = arr[i];\n    obj[element[0]] = element[1];\n  }\n  return obj;\n}\n\nfunction processEventArgs(vm, event) {var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];var extra = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];var isCustom = arguments.length > 4 ? arguments[4] : undefined;var methodName = arguments.length > 5 ? arguments[5] : undefined;\n  var isCustomMPEvent = false; // wxcomponent 组件，传递原始 event 对象\n  if (isCustom) {// 自定义事件\n    isCustomMPEvent = event.currentTarget &&\n    event.currentTarget.dataset &&\n    event.currentTarget.dataset.comType === 'wx';\n    if (!args.length) {// 无参数，直接传入 event 或 detail 数组\n      if (isCustomMPEvent) {\n        return [event];\n      }\n      return event.detail.__args__ || event.detail;\n    }\n  }\n\n  var extraObj = processEventExtra(vm, extra, event);\n\n  var ret = [];\n  args.forEach(function (arg) {\n    if (arg === '$event') {\n      if (methodName === '__set_model' && !isCustom) {// input v-model value\n        ret.push(event.target.value);\n      } else {\n        if (isCustom && !isCustomMPEvent) {\n          ret.push(event.detail.__args__[0]);\n        } else {// wxcomponent 组件或内置组件\n          ret.push(event);\n        }\n      }\n    } else {\n      if (Array.isArray(arg) && arg[0] === 'o') {\n        ret.push(getObjByArray(arg));\n      } else if (typeof arg === 'string' && hasOwn(extraObj, arg)) {\n        ret.push(extraObj[arg]);\n      } else {\n        ret.push(arg);\n      }\n    }\n  });\n\n  return ret;\n}\n\nvar ONCE = '~';\nvar CUSTOM = '^';\n\nfunction isMatchEventType(eventType, optType) {\n  return eventType === optType ||\n\n  optType === 'regionchange' && (\n\n  eventType === 'begin' ||\n  eventType === 'end');\n\n\n}\n\nfunction handleEvent(event) {var _this = this;\n  event = wrapper$2(event);\n\n  // [['tap',[['handle',[1,2,a]],['handle1',[1,2,a]]]]]\n  var dataset = (event.currentTarget || event.target).dataset;\n  if (!dataset) {\n    return console.warn(\"\\u4E8B\\u4EF6\\u4FE1\\u606F\\u4E0D\\u5B58\\u5728\");\n  }\n  var eventOpts = dataset.eventOpts || dataset['event-opts']; // 支付宝 web-view 组件 dataset 非驼峰\n  if (!eventOpts) {\n    return console.warn(\"\\u4E8B\\u4EF6\\u4FE1\\u606F\\u4E0D\\u5B58\\u5728\");\n  }\n\n  // [['handle',[1,2,a]],['handle1',[1,2,a]]]\n  var eventType = event.type;\n\n  var ret = [];\n\n  eventOpts.forEach(function (eventOpt) {\n    var type = eventOpt[0];\n    var eventsArray = eventOpt[1];\n\n    var isCustom = type.charAt(0) === CUSTOM;\n    type = isCustom ? type.slice(1) : type;\n    var isOnce = type.charAt(0) === ONCE;\n    type = isOnce ? type.slice(1) : type;\n\n    if (eventsArray && isMatchEventType(eventType, type)) {\n      eventsArray.forEach(function (eventArray) {\n        var methodName = eventArray[0];\n        if (methodName) {\n          var handlerCtx = _this.$vm;\n          if (\n          handlerCtx.$options.generic &&\n          handlerCtx.$parent &&\n          handlerCtx.$parent.$parent)\n          {// mp-weixin,mp-toutiao 抽象节点模拟 scoped slots\n            handlerCtx = handlerCtx.$parent.$parent;\n          }\n          var handler = handlerCtx[methodName];\n          if (!isFn(handler)) {\n            throw new Error(\" _vm.\".concat(methodName, \" is not a function\"));\n          }\n          if (isOnce) {\n            if (handler.once) {\n              return;\n            }\n            handler.once = true;\n          }\n          ret.push(handler.apply(handlerCtx, processEventArgs(\n          _this.$vm,\n          event,\n          eventArray[1],\n          eventArray[2],\n          isCustom,\n          methodName)));\n\n        }\n      });\n    }\n  });\n\n  if (\n  eventType === 'input' &&\n  ret.length === 1 &&\n  typeof ret[0] !== 'undefined')\n  {\n    return ret[0];\n  }\n}\n\nvar hooks = [\n'onShow',\n'onHide',\n'onError',\n'onPageNotFound'];\n\n\nfunction parseBaseApp(vm, _ref3)\n\n\n{var mocks = _ref3.mocks,initRefs = _ref3.initRefs;\n  if (vm.$options.store) {\n    _vue.default.prototype.$store = vm.$options.store;\n  }\n\n  _vue.default.prototype.mpHost = \"app-plus\";\n\n  _vue.default.mixin({\n    beforeCreate: function beforeCreate() {\n      if (!this.$options.mpType) {\n        return;\n      }\n\n      this.mpType = this.$options.mpType;\n\n      this.$mp = _defineProperty({\n        data: {} },\n      this.mpType, this.$options.mpInstance);\n\n\n      this.$scope = this.$options.mpInstance;\n\n      delete this.$options.mpType;\n      delete this.$options.mpInstance;\n\n      if (this.mpType !== 'app') {\n        initRefs(this);\n        initMocks(this, mocks);\n      }\n    } });\n\n\n  var appOptions = {\n    onLaunch: function onLaunch(args) {\n      if (this.$vm) {// 已经初始化过了，主要是为了百度，百度 onShow 在 onLaunch 之前\n        return;\n      }\n\n      this.$vm = vm;\n\n      this.$vm.$mp = {\n        app: this };\n\n\n      this.$vm.$scope = this;\n      // vm 上也挂载 globalData\n      this.$vm.globalData = this.globalData;\n\n      this.$vm._isMounted = true;\n      this.$vm.__call_hook('mounted', args);\n\n      this.$vm.__call_hook('onLaunch', args);\n    } };\n\n\n  // 兼容旧版本 globalData\n  appOptions.globalData = vm.$options.globalData || {};\n\n  initHooks(appOptions, hooks);\n\n  return appOptions;\n}\n\nvar mocks = ['__route__', '__wxExparserNodeId__', '__wxWebviewId__'];\n\nfunction findVmByVueId(vm, vuePid) {\n  var $children = vm.$children;\n  // 优先查找直属\n  var parentVm = $children.find(function (childVm) {return childVm.$scope._$vueId === vuePid;});\n  if (parentVm) {\n    return parentVm;\n  }\n  // 反向递归查找\n  for (var i = $children.length - 1; i >= 0; i--) {\n    parentVm = findVmByVueId($children[i], vuePid);\n    if (parentVm) {\n      return parentVm;\n    }\n  }\n}\n\nfunction initBehavior(options) {\n  return Behavior(options);\n}\n\nfunction isPage() {\n  return !!this.route;\n}\n\nfunction initRelation(detail) {\n  this.triggerEvent('__l', detail);\n}\n\nfunction initRefs(vm) {\n  var mpInstance = vm.$scope;\n  Object.defineProperty(vm, '$refs', {\n    get: function get() {\n      var $refs = {};\n      var components = mpInstance.selectAllComponents('.vue-ref');\n      components.forEach(function (component) {\n        var ref = component.dataset.ref;\n        $refs[ref] = component.$vm || component;\n      });\n      var forComponents = mpInstance.selectAllComponents('.vue-ref-in-for');\n      forComponents.forEach(function (component) {\n        var ref = component.dataset.ref;\n        if (!$refs[ref]) {\n          $refs[ref] = [];\n        }\n        $refs[ref].push(component.$vm || component);\n      });\n      return $refs;\n    } });\n\n}\n\nfunction handleLink(event) {var _ref4 =\n\n\n\n  event.detail || event.value,vuePid = _ref4.vuePid,vueOptions = _ref4.vueOptions; // detail 是微信,value 是百度(dipatch)\n\n  var parentVm;\n\n  if (vuePid) {\n    parentVm = findVmByVueId(this.$vm, vuePid);\n  }\n\n  if (!parentVm) {\n    parentVm = this.$vm;\n  }\n\n  vueOptions.parent = parentVm;\n}\n\nfunction parseApp(vm) {\n  return parseBaseApp(vm, {\n    mocks: mocks,\n    initRefs: initRefs });\n\n}\n\nvar hooks$1 = [\n'onUniNViewMessage'];\n\n\nfunction parseApp$1(vm) {\n  var appOptions = parseApp(vm);\n\n  initHooks(appOptions, hooks$1);\n\n  return appOptions;\n}\n\nfunction createApp(vm) {\n  App(parseApp$1(vm));\n  return vm;\n}\n\nfunction parseBaseComponent(vueComponentOptions)\n\n\n{var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},isPage = _ref5.isPage,initRelation = _ref5.initRelation;var _initVueComponent =\n  initVueComponent(_vue.default, vueComponentOptions),_initVueComponent2 = _slicedToArray(_initVueComponent, 2),VueComponent = _initVueComponent2[0],vueOptions = _initVueComponent2[1];\n\n  var componentOptions = {\n    options: {\n      multipleSlots: true,\n      addGlobalClass: true },\n\n    data: initData(vueOptions, _vue.default.prototype),\n    behaviors: initBehaviors(vueOptions, initBehavior),\n    properties: initProperties(vueOptions.props, false, vueOptions.__file),\n    lifetimes: {\n      attached: function attached() {\n        var properties = this.properties;\n\n        var options = {\n          mpType: isPage.call(this) ? 'page' : 'component',\n          mpInstance: this,\n          propsData: properties };\n\n\n        initVueIds(properties.vueId, this);\n\n        // 处理父子关系\n        initRelation.call(this, {\n          vuePid: this._$vuePid,\n          vueOptions: options });\n\n\n        // 初始化 vue 实例\n        this.$vm = new VueComponent(options);\n\n        // 处理$slots,$scopedSlots（暂不支持动态变化$slots）\n        initSlots(this.$vm, properties.vueSlots);\n\n        // 触发首次 setData\n        this.$vm.$mount();\n      },\n      ready: function ready() {\n        // 当组件 props 默认值为 true，初始化时传入 false 会导致 created,ready 触发, 但 attached 不触发\n        // https://developers.weixin.qq.com/community/develop/doc/00066ae2844cc0f8eb883e2a557800\n        if (this.$vm) {\n          this.$vm._isMounted = true;\n          this.$vm.__call_hook('mounted');\n          this.$vm.__call_hook('onReady');\n        }\n      },\n      detached: function detached() {\n        this.$vm.$destroy();\n      } },\n\n    pageLifetimes: {\n      show: function show(args) {\n        this.$vm && this.$vm.__call_hook('onPageShow', args);\n      },\n      hide: function hide() {\n        this.$vm && this.$vm.__call_hook('onPageHide');\n      },\n      resize: function resize(size) {\n        this.$vm && this.$vm.__call_hook('onPageResize', size);\n      } },\n\n    methods: {\n      __l: handleLink,\n      __e: handleEvent } };\n\n\n\n  if (Array.isArray(vueOptions.wxsCallMethods)) {\n    vueOptions.wxsCallMethods.forEach(function (callMethod) {\n      componentOptions.methods[callMethod] = function (args) {\n        return this.$vm[callMethod](args);\n      };\n    });\n  }\n\n  if (isPage) {\n    return componentOptions;\n  }\n  return [componentOptions, VueComponent];\n}\n\nfunction parseComponent(vueComponentOptions) {\n  return parseBaseComponent(vueComponentOptions, {\n    isPage: isPage,\n    initRelation: initRelation });\n\n}\n\nfunction parseComponent$1(vueComponentOptions) {\n  var componentOptions = parseComponent(vueComponentOptions);\n\n  componentOptions.methods.$getAppWebview = function () {\n    return plus.webview.getWebviewById(\"\".concat(this.__wxWebviewId__));\n  };\n  return componentOptions;\n}\n\nvar hooks$2 = [\n'onShow',\n'onHide',\n'onUnload'];\n\n\nhooks$2.push.apply(hooks$2, PAGE_EVENT_HOOKS);\n\nfunction parseBasePage(vuePageOptions, _ref6)\n\n\n{var isPage = _ref6.isPage,initRelation = _ref6.initRelation;\n  var pageOptions = parseComponent$1(vuePageOptions);\n\n  initHooks(pageOptions.methods, hooks$2, vuePageOptions);\n\n  pageOptions.methods.onLoad = function (args) {\n    this.$vm.$mp.query = args; // 兼容 mpvue\n    this.$vm.__call_hook('onLoad', args);\n  };\n\n  return pageOptions;\n}\n\nfunction parsePage(vuePageOptions) {\n  return parseBasePage(vuePageOptions, {\n    isPage: isPage,\n    initRelation: initRelation });\n\n}\n\nvar hooks$3 = [\n'onBackPress',\n'onNavigationBarButtonTap',\n'onNavigationBarSearchInputChanged',\n'onNavigationBarSearchInputConfirmed',\n'onNavigationBarSearchInputClicked'];\n\n\nfunction parsePage$1(vuePageOptions) {\n  var pageOptions = parsePage(vuePageOptions);\n\n  initHooks(pageOptions.methods, hooks$3);\n\n  return pageOptions;\n}\n\nfunction createPage(vuePageOptions) {\n  {\n    return Component(parsePage$1(vuePageOptions));\n  }\n}\n\nfunction createComponent(vueOptions) {\n  {\n    return Component(parseComponent$1(vueOptions));\n  }\n}\n\ntodos.forEach(function (todoApi) {\n  protocols[todoApi] = false;\n});\n\ncanIUses.forEach(function (canIUseApi) {\n  var apiName = protocols[canIUseApi] && protocols[canIUseApi].name ? protocols[canIUseApi].name :\n  canIUseApi;\n  if (!wx.canIUse(apiName)) {\n    protocols[canIUseApi] = false;\n  }\n});\n\nvar uni = {};\n\nif (typeof Proxy !== 'undefined' && \"app-plus\" !== 'app-plus') {\n  uni = new Proxy({}, {\n    get: function get(target, name) {\n      if (target[name]) {\n        return target[name];\n      }\n      if (baseApi[name]) {\n        return baseApi[name];\n      }\n      if (api[name]) {\n        return promisify(name, api[name]);\n      }\n      if (eventApi[name]) {\n        return eventApi[name];\n      }\n      if (!hasOwn(wx, name) && !hasOwn(protocols, name)) {\n        return;\n      }\n      return promisify(name, wrapper(name, wx[name]));\n    },\n    set: function set(target, name, value) {\n      target[name] = value;\n      return true;\n    } });\n\n} else {\n  Object.keys(baseApi).forEach(function (name) {\n    uni[name] = baseApi[name];\n  });\n\n  Object.keys(eventApi).forEach(function (name) {\n    uni[name] = eventApi[name];\n  });\n\n  Object.keys(api).forEach(function (name) {\n    uni[name] = promisify(name, api[name]);\n  });\n\n  Object.keys(wx).forEach(function (name) {\n    if (hasOwn(wx, name) || hasOwn(protocols, name)) {\n      uni[name] = promisify(name, wrapper(name, wx[name]));\n    }\n  });\n}\n\n{\n  if (typeof global !== 'undefined') {\n    global.uni = uni;\n    global.UniEmitter = eventApi;\n  }\n}\n\nwx.createApp = createApp;\nwx.createPage = createPage;\nwx.createComponent = createComponent;\n\nvar uni$1 = uni;var _default =\n\nuni$1;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),

/***/ 12:
/*!*********************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = formatLog;function typof(v) {\n  var s = Object.prototype.toString.call(v);\n  return s.substring(8, s.length - 1);\n}\n\nfunction formatLog() {for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}\n  var msgs = args.map(function (v) {\n    var type = Object.prototype.toString.call(v);\n    if (type.toLowerCase() === '[object object]') {\n      try {\n        v = '---BEGIN:JSON---' + JSON.stringify(v) + '---END:JSON---';\n      } catch (e) {\n        v = '[object object]';\n      }\n    } else {\n      if (v === null) {\n        v = '---NULL---';\n      } else if (v === undefined) {\n        v = '---UNDEFINED---';\n      } else {\n        var vType = typof(v).toUpperCase();\n        if (vType === 'NUMBER' || vType === 'BOOLEAN') {\n          v = '---BEGIN:' + vType + '---' + v + '---END:' + vType + '---';\n        } else {\n          v = String(v);\n        }\n      }\n    }\n    return v;\n  });\n  var msg = '';\n  if (msgs.length > 1) {\n    var lastMsg = msgs.pop();\n    msg = msgs.join('---COMMA---');\n    if (lastMsg.indexOf(' at ') === 0) {\n      msg += lastMsg;\n    } else {\n      msg += '---COMMA---' + lastMsg;\n    }\n  } else {\n    msg = msgs[0];\n  }\n  return msg;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbInR5cG9mIiwidiIsInMiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJzdWJzdHJpbmciLCJsZW5ndGgiLCJmb3JtYXRMb2ciLCJhcmdzIiwibXNncyIsIm1hcCIsInR5cGUiLCJ0b0xvd2VyQ2FzZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJlIiwidW5kZWZpbmVkIiwidlR5cGUiLCJ0b1VwcGVyQ2FzZSIsIlN0cmluZyIsIm1zZyIsImxhc3RNc2ciLCJwb3AiLCJqb2luIiwiaW5kZXhPZiJdLCJtYXBwaW5ncyI6IjBGQUFBLFNBQVNBLEtBQVQsQ0FBZ0JDLENBQWhCLEVBQW1CO0FBQ2pCLE1BQU1DLENBQUMsR0FBR0MsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JMLENBQS9CLENBQVY7QUFDQSxTQUFPQyxDQUFDLENBQUNLLFNBQUYsQ0FBWSxDQUFaLEVBQWVMLENBQUMsQ0FBQ00sTUFBRixHQUFXLENBQTFCLENBQVA7QUFDRDs7QUFFYyxTQUFTQyxTQUFULEdBQTZCLG1DQUFOQyxJQUFNLG9EQUFOQSxJQUFNO0FBQzFDLE1BQU1DLElBQUksR0FBR0QsSUFBSSxDQUFDRSxHQUFMLENBQVMsVUFBQ1gsQ0FBRCxFQUFPO0FBQzNCLFFBQU1ZLElBQUksR0FBR1YsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JMLENBQS9CLENBQWI7QUFDQSxRQUFJWSxJQUFJLENBQUNDLFdBQUwsT0FBdUIsaUJBQTNCLEVBQThDO0FBQzVDLFVBQUk7QUFDRmIsU0FBQyxHQUFHLHFCQUFxQmMsSUFBSSxDQUFDQyxTQUFMLENBQWVmLENBQWYsQ0FBckIsR0FBeUMsZ0JBQTdDO0FBQ0QsT0FGRCxDQUVFLE9BQU9nQixDQUFQLEVBQVU7QUFDVmhCLFNBQUMsR0FBRyxpQkFBSjtBQUNEO0FBQ0YsS0FORCxNQU1PO0FBQ0wsVUFBSUEsQ0FBQyxLQUFLLElBQVYsRUFBZ0I7QUFDZEEsU0FBQyxHQUFHLFlBQUo7QUFDRCxPQUZELE1BRU8sSUFBSUEsQ0FBQyxLQUFLaUIsU0FBVixFQUFxQjtBQUMxQmpCLFNBQUMsR0FBRyxpQkFBSjtBQUNELE9BRk0sTUFFQTtBQUNMLFlBQU1rQixLQUFLLEdBQUduQixLQUFLLENBQUNDLENBQUQsQ0FBTCxDQUFTbUIsV0FBVCxFQUFkO0FBQ0EsWUFBSUQsS0FBSyxLQUFLLFFBQVYsSUFBc0JBLEtBQUssS0FBSyxTQUFwQyxFQUErQztBQUM3Q2xCLFdBQUMsR0FBRyxjQUFja0IsS0FBZCxHQUFzQixLQUF0QixHQUE4QmxCLENBQTlCLEdBQWtDLFNBQWxDLEdBQThDa0IsS0FBOUMsR0FBc0QsS0FBMUQ7QUFDRCxTQUZELE1BRU87QUFDTGxCLFdBQUMsR0FBR29CLE1BQU0sQ0FBQ3BCLENBQUQsQ0FBVjtBQUNEO0FBQ0Y7QUFDRjtBQUNELFdBQU9BLENBQVA7QUFDRCxHQXZCWSxDQUFiO0FBd0JBLE1BQUlxQixHQUFHLEdBQUcsRUFBVjtBQUNBLE1BQUlYLElBQUksQ0FBQ0gsTUFBTCxHQUFjLENBQWxCLEVBQXFCO0FBQ25CLFFBQU1lLE9BQU8sR0FBR1osSUFBSSxDQUFDYSxHQUFMLEVBQWhCO0FBQ0FGLE9BQUcsR0FBR1gsSUFBSSxDQUFDYyxJQUFMLENBQVUsYUFBVixDQUFOO0FBQ0EsUUFBSUYsT0FBTyxDQUFDRyxPQUFSLENBQWdCLE1BQWhCLE1BQTRCLENBQWhDLEVBQW1DO0FBQ2pDSixTQUFHLElBQUlDLE9BQVA7QUFDRCxLQUZELE1BRU87QUFDTEQsU0FBRyxJQUFJLGdCQUFnQkMsT0FBdkI7QUFDRDtBQUNGLEdBUkQsTUFRTztBQUNMRCxPQUFHLEdBQUdYLElBQUksQ0FBQyxDQUFELENBQVY7QUFDRDtBQUNELFNBQU9XLEdBQVA7QUFDRCIsImZpbGUiOiIxMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHR5cG9mICh2KSB7XHJcbiAgY29uc3QgcyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2KVxyXG4gIHJldHVybiBzLnN1YnN0cmluZyg4LCBzLmxlbmd0aCAtIDEpXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdExvZyAoLi4uYXJncykge1xyXG4gIGNvbnN0IG1zZ3MgPSBhcmdzLm1hcCgodikgPT4ge1xyXG4gICAgY29uc3QgdHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2KVxyXG4gICAgaWYgKHR5cGUudG9Mb3dlckNhc2UoKSA9PT0gJ1tvYmplY3Qgb2JqZWN0XScpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICB2ID0gJy0tLUJFR0lOOkpTT04tLS0nICsgSlNPTi5zdHJpbmdpZnkodikgKyAnLS0tRU5EOkpTT04tLS0nXHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICB2ID0gJ1tvYmplY3Qgb2JqZWN0XSdcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKHYgPT09IG51bGwpIHtcclxuICAgICAgICB2ID0gJy0tLU5VTEwtLS0nXHJcbiAgICAgIH0gZWxzZSBpZiAodiA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdiA9ICctLS1VTkRFRklORUQtLS0nXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgdlR5cGUgPSB0eXBvZih2KS50b1VwcGVyQ2FzZSgpXHJcbiAgICAgICAgaWYgKHZUeXBlID09PSAnTlVNQkVSJyB8fCB2VHlwZSA9PT0gJ0JPT0xFQU4nKSB7XHJcbiAgICAgICAgICB2ID0gJy0tLUJFR0lOOicgKyB2VHlwZSArICctLS0nICsgdiArICctLS1FTkQ6JyArIHZUeXBlICsgJy0tLSdcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdiA9IFN0cmluZyh2KVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZcclxuICB9KVxyXG4gIGxldCBtc2cgPSAnJ1xyXG4gIGlmIChtc2dzLmxlbmd0aCA+IDEpIHtcclxuICAgIGNvbnN0IGxhc3RNc2cgPSBtc2dzLnBvcCgpXHJcbiAgICBtc2cgPSBtc2dzLmpvaW4oJy0tLUNPTU1BLS0tJylcclxuICAgIGlmIChsYXN0TXNnLmluZGV4T2YoJyBhdCAnKSA9PT0gMCkge1xyXG4gICAgICBtc2cgKz0gbGFzdE1zZ1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbXNnICs9ICctLS1DT01NQS0tLScgKyBsYXN0TXNnXHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIG1zZyA9IG1zZ3NbMF1cclxuICB9XHJcbiAgcmV0dXJuIG1zZ1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///12\n");

/***/ }),

/***/ 15:
/*!********************************************************************!*\
  !*** ./node_modules/vue-loader/lib/runtime/componentNormalizer.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return normalizeComponent; });\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nfunction normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWxzIF9fVlVFX1NTUl9DT05URVhUX18gKi9cblxuLy8gSU1QT1JUQU5UOiBEbyBOT1QgdXNlIEVTMjAxNSBmZWF0dXJlcyBpbiB0aGlzIGZpbGUgKGV4Y2VwdCBmb3IgbW9kdWxlcykuXG4vLyBUaGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vcm1hbGl6ZUNvbXBvbmVudCAoXG4gIHNjcmlwdEV4cG9ydHMsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmdW5jdGlvbmFsVGVtcGxhdGUsXG4gIGluamVjdFN0eWxlcyxcbiAgc2NvcGVJZCxcbiAgbW9kdWxlSWRlbnRpZmllciwgLyogc2VydmVyIG9ubHkgKi9cbiAgc2hhZG93TW9kZSAvKiB2dWUtY2xpIG9ubHkgKi9cbikge1xuICAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wXG4gIHZhciBvcHRpb25zID0gdHlwZW9mIHNjcmlwdEV4cG9ydHMgPT09ICdmdW5jdGlvbidcbiAgICA/IHNjcmlwdEV4cG9ydHMub3B0aW9uc1xuICAgIDogc2NyaXB0RXhwb3J0c1xuXG4gIC8vIHJlbmRlciBmdW5jdGlvbnNcbiAgaWYgKHJlbmRlcikge1xuICAgIG9wdGlvbnMucmVuZGVyID0gcmVuZGVyXG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnNcbiAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWVcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGZ1bmN0aW9uYWxUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWVcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9ICdkYXRhLXYtJyArIHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7IC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gc2hhZG93TW9kZVxuICAgICAgPyBmdW5jdGlvbiAoKSB7IGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIHRoaXMuJHJvb3QuJG9wdGlvbnMuc2hhZG93Um9vdCkgfVxuICAgICAgOiBpbmplY3RTdHlsZXNcbiAgfVxuXG4gIGlmIChob29rKSB7XG4gICAgaWYgKG9wdGlvbnMuZnVuY3Rpb25hbCkge1xuICAgICAgLy8gZm9yIHRlbXBsYXRlLW9ubHkgaG90LXJlbG9hZCBiZWNhdXNlIGluIHRoYXQgY2FzZSB0aGUgcmVuZGVyIGZuIGRvZXNuJ3RcbiAgICAgIC8vIGdvIHRocm91Z2ggdGhlIG5vcm1hbGl6ZXJcbiAgICAgIG9wdGlvbnMuX2luamVjdFN0eWxlcyA9IGhvb2tcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXJXaXRoU3R5bGVJbmplY3Rpb24gKGgsIGNvbnRleHQpIHtcbiAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpXG4gICAgICAgIHJldHVybiBvcmlnaW5hbFJlbmRlcihoLCBjb250ZXh0KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9va1xuICAgICAgdmFyIGV4aXN0aW5nID0gb3B0aW9ucy5iZWZvcmVDcmVhdGVcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmdcbiAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spXG4gICAgICAgIDogW2hvb2tdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///15\n");

/***/ }),

/***/ 16:
/*!***********************************************************************************!*\
  !*** D:/1zxyWork/daibeih5/daibei3.0/node_modules/vue-clipboard2/vue-clipboard.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var Clipboard = __webpack_require__(/*! clipboard/dist/clipboard.min.js */ 17); // FIXME: workaround for browserify\n\nvar VueClipboardConfig = {\n  autoSetContainer: false,\n  appendToBody: true // This fixes IE, see #50\n};\n\nvar VueClipboard = {\n  install: function install(Vue) {\n    Vue.prototype.$clipboardConfig = VueClipboardConfig;\n    Vue.prototype.$copyText = function (_text, container) {\n      return new Promise(function (resolve, reject) {\n        var fakeElement = document.createElement('button');\n        var clipboard = new Clipboard(fakeElement, {\n          text: function text() {return _text;},\n          action: function action() {return 'copy';},\n          container: typeof container === 'object' ? container : document.body });\n\n        clipboard.on('success', function (e) {\n          clipboard.destroy();\n          resolve(e);\n        });\n        clipboard.on('error', function (e) {\n          clipboard.destroy();\n          reject(e);\n        });\n        if (VueClipboardConfig.appendToBody) document.body.appendChild(fakeElement);\n        fakeElement.click();\n        if (VueClipboardConfig.appendToBody) document.body.removeChild(fakeElement);\n      });\n    };\n\n    Vue.directive('clipboard', {\n      bind: function bind(el, binding, vnode) {\n        if (binding.arg === 'success') {\n          el._vClipboard_success = binding.value;\n        } else if (binding.arg === 'error') {\n          el._vClipboard_error = binding.value;\n        } else {\n          var clipboard = new Clipboard(el, {\n            text: function text() {return binding.value;},\n            action: function action() {return binding.arg === 'cut' ? 'cut' : 'copy';},\n            container: VueClipboardConfig.autoSetContainer ? el : undefined });\n\n          clipboard.on('success', function (e) {\n            var callback = el._vClipboard_success;\n            callback && callback(e);\n          });\n          clipboard.on('error', function (e) {\n            var callback = el._vClipboard_error;\n            callback && callback(e);\n          });\n          el._vClipboard = clipboard;\n        }\n      },\n      update: function update(el, binding) {\n        if (binding.arg === 'success') {\n          el._vClipboard_success = binding.value;\n        } else if (binding.arg === 'error') {\n          el._vClipboard_error = binding.value;\n        } else {\n          el._vClipboard.text = function () {return binding.value;};\n          el._vClipboard.action = function () {return binding.arg === 'cut' ? 'cut' : 'copy';};\n        }\n      },\n      unbind: function unbind(el, binding) {\n        if (binding.arg === 'success') {\n          delete el._vClipboard_success;\n        } else if (binding.arg === 'error') {\n          delete el._vClipboard_error;\n        } else {\n          el._vClipboard.destroy();\n          delete el._vClipboard;\n        }\n      } });\n\n  },\n  config: VueClipboardConfig };\n\n\nif (true) {\n  module.exports = VueClipboard;\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///16\n");

/***/ }),

/***/ 17:
/*!***********************************************************************************!*\
  !*** D:/1zxyWork/daibeih5/daibei3.0/node_modules/clipboard/dist/clipboard.min.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" /*!\n               * clipboard.js v2.0.4\n               * https://zenorocha.github.io/clipboard.js\n               * \n               * Licensed MIT © Zeno Rocha\n               */\n!function (t, e) { true ? module.exports = e() : undefined;}(void 0, function () {return function (n) {var o = {};function r(t) {if (o[t]) return o[t].exports;var e = o[t] = { i: t, l: !1, exports: {} };return n[t].call(e.exports, e, e.exports, r), e.l = !0, e.exports;}return r.m = n, r.c = o, r.d = function (t, e, n) {r.o(t, e) || Object.defineProperty(t, e, { enumerable: !0, get: n });}, r.r = function (t) {\"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, { value: \"Module\" }), Object.defineProperty(t, \"__esModule\", { value: !0 });}, r.t = function (e, t) {if (1 & t && (e = r(e)), 8 & t) return e;if (4 & t && \"object\" == typeof e && e && e.__esModule) return e;var n = Object.create(null);if (r.r(n), Object.defineProperty(n, \"default\", { enumerable: !0, value: e }), 2 & t && \"string\" != typeof e) for (var o in e) {r.d(n, o, function (t) {return e[t];}.bind(null, o));}return n;}, r.n = function (t) {var e = t && t.__esModule ? function () {return t.default;} : function () {return t;};return r.d(e, \"a\", e), e;}, r.o = function (t, e) {return Object.prototype.hasOwnProperty.call(t, e);}, r.p = \"\", r(r.s = 0);}([function (t, e, n) {\"use strict\";var r = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (t) {return typeof t;} : function (t) {return t && \"function\" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? \"symbol\" : typeof t;},i = function () {function o(t, e) {for (var n = 0; n < e.length; n++) {var o = e[n];o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(t, o.key, o);}}return function (t, e, n) {return e && o(t.prototype, e), n && o(t, n), t;};}(),a = o(n(1)),c = o(n(3)),u = o(n(4));function o(t) {return t && t.__esModule ? t : { default: t };}var l = function (t) {function o(t, e) {!function (t, e) {if (!(t instanceof e)) throw new TypeError(\"Cannot call a class as a function\");}(this, o);var n = function (t, e) {if (!t) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return !e || \"object\" != typeof e && \"function\" != typeof e ? t : e;}(this, (o.__proto__ || Object.getPrototypeOf(o)).call(this));return n.resolveOptions(e), n.listenClick(t), n;}return function (t, e) {if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function, not \" + typeof e);t.prototype = Object.create(e && e.prototype, { constructor: { value: t, enumerable: !1, writable: !0, configurable: !0 } }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);}(o, c.default), i(o, [{ key: \"resolveOptions\", value: function value() {var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {};this.action = \"function\" == typeof t.action ? t.action : this.defaultAction, this.target = \"function\" == typeof t.target ? t.target : this.defaultTarget, this.text = \"function\" == typeof t.text ? t.text : this.defaultText, this.container = \"object\" === r(t.container) ? t.container : document.body;} }, { key: \"listenClick\", value: function value(t) {var e = this;this.listener = (0, u.default)(t, \"click\", function (t) {return e.onClick(t);});} }, { key: \"onClick\", value: function value(t) {var e = t.delegateTarget || t.currentTarget;this.clipboardAction && (this.clipboardAction = null), this.clipboardAction = new a.default({ action: this.action(e), target: this.target(e), text: this.text(e), container: this.container, trigger: e, emitter: this });} }, { key: \"defaultAction\", value: function value(t) {return s(\"action\", t);} }, { key: \"defaultTarget\", value: function value(t) {var e = s(\"target\", t);if (e) return document.querySelector(e);} }, { key: \"defaultText\", value: function value(t) {return s(\"text\", t);} }, { key: \"destroy\", value: function value() {this.listener.destroy(), this.clipboardAction && (this.clipboardAction.destroy(), this.clipboardAction = null);} }], [{ key: \"isSupported\", value: function value() {var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : [\"copy\", \"cut\"],e = \"string\" == typeof t ? [t] : t,n = !!document.queryCommandSupported;return e.forEach(function (t) {n = n && !!document.queryCommandSupported(t);}), n;} }]), o;}();function s(t, e) {var n = \"data-clipboard-\" + t;if (e.hasAttribute(n)) return e.getAttribute(n);}t.exports = l;}, function (t, e, n) {\"use strict\";var o,r = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (t) {return typeof t;} : function (t) {return t && \"function\" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? \"symbol\" : typeof t;},i = function () {function o(t, e) {for (var n = 0; n < e.length; n++) {var o = e[n];o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(t, o.key, o);}}return function (t, e, n) {return e && o(t.prototype, e), n && o(t, n), t;};}(),a = n(2),c = (o = a) && o.__esModule ? o : { default: o };var u = function () {function e(t) {!function (t, e) {if (!(t instanceof e)) throw new TypeError(\"Cannot call a class as a function\");}(this, e), this.resolveOptions(t), this.initSelection();}return i(e, [{ key: \"resolveOptions\", value: function value() {var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {};this.action = t.action, this.container = t.container, this.emitter = t.emitter, this.target = t.target, this.text = t.text, this.trigger = t.trigger, this.selectedText = \"\";} }, { key: \"initSelection\", value: function value() {this.text ? this.selectFake() : this.target && this.selectTarget();} }, { key: \"selectFake\", value: function value() {var t = this,e = \"rtl\" == document.documentElement.getAttribute(\"dir\");this.removeFake(), this.fakeHandlerCallback = function () {return t.removeFake();}, this.fakeHandler = this.container.addEventListener(\"click\", this.fakeHandlerCallback) || !0, this.fakeElem = document.createElement(\"textarea\"), this.fakeElem.style.fontSize = \"12pt\", this.fakeElem.style.border = \"0\", this.fakeElem.style.padding = \"0\", this.fakeElem.style.margin = \"0\", this.fakeElem.style.position = \"absolute\", this.fakeElem.style[e ? \"right\" : \"left\"] = \"-9999px\";var n = window.pageYOffset || document.documentElement.scrollTop;this.fakeElem.style.top = n + \"px\", this.fakeElem.setAttribute(\"readonly\", \"\"), this.fakeElem.value = this.text, this.container.appendChild(this.fakeElem), this.selectedText = (0, c.default)(this.fakeElem), this.copyText();} }, { key: \"removeFake\", value: function value() {this.fakeHandler && (this.container.removeEventListener(\"click\", this.fakeHandlerCallback), this.fakeHandler = null, this.fakeHandlerCallback = null), this.fakeElem && (this.container.removeChild(this.fakeElem), this.fakeElem = null);} }, { key: \"selectTarget\", value: function value() {this.selectedText = (0, c.default)(this.target), this.copyText();} }, { key: \"copyText\", value: function value() {var e = void 0;try {e = document.execCommand(this.action);} catch (t) {e = !1;}this.handleResult(e);} }, { key: \"handleResult\", value: function value(t) {this.emitter.emit(t ? \"success\" : \"error\", { action: this.action, text: this.selectedText, trigger: this.trigger, clearSelection: this.clearSelection.bind(this) });} }, { key: \"clearSelection\", value: function value() {this.trigger && this.trigger.focus(), window.getSelection().removeAllRanges();} }, { key: \"destroy\", value: function value() {this.removeFake();} }, { key: \"action\", set: function set() {var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : \"copy\";if (this._action = t, \"copy\" !== this._action && \"cut\" !== this._action) throw new Error('Invalid \"action\" value, use either \"copy\" or \"cut\"');}, get: function get() {return this._action;} }, { key: \"target\", set: function set(t) {if (void 0 !== t) {if (!t || \"object\" !== (void 0 === t ? \"undefined\" : r(t)) || 1 !== t.nodeType) throw new Error('Invalid \"target\" value, use a valid Element');if (\"copy\" === this.action && t.hasAttribute(\"disabled\")) throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');if (\"cut\" === this.action && (t.hasAttribute(\"readonly\") || t.hasAttribute(\"disabled\"))) throw new Error('Invalid \"target\" attribute. You can\\'t cut text from elements with \"readonly\" or \"disabled\" attributes');this._target = t;}}, get: function get() {return this._target;} }]), e;}();t.exports = u;}, function (t, e) {t.exports = function (t) {var e;if (\"SELECT\" === t.nodeName) t.focus(), e = t.value;else if (\"INPUT\" === t.nodeName || \"TEXTAREA\" === t.nodeName) {var n = t.hasAttribute(\"readonly\");n || t.setAttribute(\"readonly\", \"\"), t.select(), t.setSelectionRange(0, t.value.length), n || t.removeAttribute(\"readonly\"), e = t.value;} else {t.hasAttribute(\"contenteditable\") && t.focus();var o = window.getSelection(),r = document.createRange();r.selectNodeContents(t), o.removeAllRanges(), o.addRange(r), e = o.toString();}return e;};}, function (t, e) {function n() {}n.prototype = { on: function on(t, e, n) {var o = this.e || (this.e = {});return (o[t] || (o[t] = [])).push({ fn: e, ctx: n }), this;}, once: function once(t, e, n) {var o = this;function r() {o.off(t, r), e.apply(n, arguments);}return r._ = e, this.on(t, r, n);}, emit: function emit(t) {for (var e = [].slice.call(arguments, 1), n = ((this.e || (this.e = {}))[t] || []).slice(), o = 0, r = n.length; o < r; o++) {n[o].fn.apply(n[o].ctx, e);}return this;}, off: function off(t, e) {var n = this.e || (this.e = {}),o = n[t],r = [];if (o && e) for (var i = 0, a = o.length; i < a; i++) {o[i].fn !== e && o[i].fn._ !== e && r.push(o[i]);}return r.length ? n[t] = r : delete n[t], this;} }, t.exports = n;}, function (t, e, n) {var d = n(5),h = n(6);t.exports = function (t, e, n) {if (!t && !e && !n) throw new Error(\"Missing required arguments\");if (!d.string(e)) throw new TypeError(\"Second argument must be a String\");if (!d.fn(n)) throw new TypeError(\"Third argument must be a Function\");if (d.node(t)) return s = e, f = n, (l = t).addEventListener(s, f), { destroy: function destroy() {l.removeEventListener(s, f);} };if (d.nodeList(t)) return a = t, c = e, u = n, Array.prototype.forEach.call(a, function (t) {t.addEventListener(c, u);}), { destroy: function destroy() {Array.prototype.forEach.call(a, function (t) {t.removeEventListener(c, u);});} };if (d.string(t)) return o = t, r = e, i = n, h(document.body, o, r, i);throw new TypeError(\"First argument must be a String, HTMLElement, HTMLCollection, or NodeList\");var o, r, i, a, c, u, l, s, f;};}, function (t, n) {n.node = function (t) {return void 0 !== t && t instanceof HTMLElement && 1 === t.nodeType;}, n.nodeList = function (t) {var e = Object.prototype.toString.call(t);return void 0 !== t && (\"[object NodeList]\" === e || \"[object HTMLCollection]\" === e) && \"length\" in t && (0 === t.length || n.node(t[0]));}, n.string = function (t) {return \"string\" == typeof t || t instanceof String;}, n.fn = function (t) {return \"[object Function]\" === Object.prototype.toString.call(t);};}, function (t, e, n) {var a = n(7);function i(t, e, n, o, r) {var i = function (e, n, t, o) {return function (t) {t.delegateTarget = a(t.target, n), t.delegateTarget && o.call(e, t);};}.apply(this, arguments);return t.addEventListener(n, i, r), { destroy: function destroy() {t.removeEventListener(n, i, r);} };}t.exports = function (t, e, n, o, r) {return \"function\" == typeof t.addEventListener ? i.apply(null, arguments) : \"function\" == typeof n ? i.bind(null, document).apply(null, arguments) : (\"string\" == typeof t && (t = document.querySelectorAll(t)), Array.prototype.map.call(t, function (t) {return i(t, e, n, o, r);}));};}, function (t, e) {if (\"undefined\" != typeof Element && !Element.prototype.matches) {var n = Element.prototype;n.matches = n.matchesSelector || n.mozMatchesSelector || n.msMatchesSelector || n.oMatchesSelector || n.webkitMatchesSelector;}t.exports = function (t, e) {for (; t && 9 !== t.nodeType;) {if (\"function\" == typeof t.matches && t.matches(e)) return t;t = t.parentNode;}};}]);});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n");

/***/ }),

/***/ 18:
/*!*******************************************************************************!*\
  !*** D:/1zxyWork/daibeih5/daibei3.0/node_modules/clipboard/dist/clipboard.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" /*!\n               * clipboard.js v2.0.4\n               * https://zenorocha.github.io/clipboard.js\n               * \n               * Licensed MIT © Zeno Rocha\n               */\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (true)\n  module.exports = factory();else\n  {}\n})(void 0, function () {\n  return (/******/function (modules) {// webpackBootstrap\n      /******/ // The module cache\n      /******/var installedModules = {};\n      /******/\n      /******/ // The require function\n      /******/function __webpack_require__(moduleId) {\n        /******/\n        /******/ // Check if module is in cache\n        /******/if (installedModules[moduleId]) {\n          /******/return installedModules[moduleId].exports;\n          /******/}\n        /******/ // Create a new module (and put it into the cache)\n        /******/var module = installedModules[moduleId] = {\n          /******/i: moduleId,\n          /******/l: false,\n          /******/exports: {}\n          /******/ };\n        /******/\n        /******/ // Execute the module function\n        /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n        /******/ // Flag the module as loaded\n        /******/module.l = true;\n        /******/\n        /******/ // Return the exports of the module\n        /******/return module.exports;\n        /******/}\n      /******/\n      /******/\n      /******/ // expose the modules object (__webpack_modules__)\n      /******/__webpack_require__.m = modules;\n      /******/\n      /******/ // expose the module cache\n      /******/__webpack_require__.c = installedModules;\n      /******/\n      /******/ // define getter function for harmony exports\n      /******/__webpack_require__.d = function (exports, name, getter) {\n        /******/if (!__webpack_require__.o(exports, name)) {\n          /******/Object.defineProperty(exports, name, { enumerable: true, get: getter });\n          /******/}\n        /******/};\n      /******/\n      /******/ // define __esModule on exports\n      /******/__webpack_require__.r = function (exports) {\n        /******/if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n          /******/Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n          /******/}\n        /******/Object.defineProperty(exports, '__esModule', { value: true });\n        /******/};\n      /******/\n      /******/ // create a fake namespace object\n      /******/ // mode & 1: value is a module id, require it\n      /******/ // mode & 2: merge all properties of value into the ns\n      /******/ // mode & 4: return value when already ns object\n      /******/ // mode & 8|1: behave like require\n      /******/__webpack_require__.t = function (value, mode) {\n        /******/if (mode & 1) value = __webpack_require__(value);\n        /******/if (mode & 8) return value;\n        /******/if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;\n        /******/var ns = Object.create(null);\n        /******/__webpack_require__.r(ns);\n        /******/Object.defineProperty(ns, 'default', { enumerable: true, value: value });\n        /******/if (mode & 2 && typeof value != 'string') for (var key in value) {__webpack_require__.d(ns, key, function (key) {return value[key];}.bind(null, key));}\n        /******/return ns;\n        /******/};\n      /******/\n      /******/ // getDefaultExport function for compatibility with non-harmony modules\n      /******/__webpack_require__.n = function (module) {\n        /******/var getter = module && module.__esModule ?\n        /******/function getDefault() {return module['default'];} :\n        /******/function getModuleExports() {return module;};\n        /******/__webpack_require__.d(getter, 'a', getter);\n        /******/return getter;\n        /******/};\n      /******/\n      /******/ // Object.prototype.hasOwnProperty.call\n      /******/__webpack_require__.o = function (object, property) {return Object.prototype.hasOwnProperty.call(object, property);};\n      /******/\n      /******/ // __webpack_public_path__\n      /******/__webpack_require__.p = \"\";\n      /******/\n      /******/\n      /******/ // Load entry module and return exports\n      /******/return __webpack_require__(__webpack_require__.s = 0);\n      /******/}(\n    /************************************************************************/\n    /******/[\n    /* 0 */\n    /***/function (module, exports, __webpack_require__) {\n\n      \"use strict\";\n\n\n      var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;};\n\n      var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\n      var _clipboardAction = __webpack_require__(1);\n\n      var _clipboardAction2 = _interopRequireDefault(_clipboardAction);\n\n      var _tinyEmitter = __webpack_require__(3);\n\n      var _tinyEmitter2 = _interopRequireDefault(_tinyEmitter);\n\n      var _goodListener = __webpack_require__(4);\n\n      var _goodListener2 = _interopRequireDefault(_goodListener);\n\n      function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\n      function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\n      function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\n      function _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}\n\n      /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Base class which takes one or more elements, adds event listeners to them,\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * and instantiates a new `ClipboardAction` on each click.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n      var Clipboard = function (_Emitter) {\n        _inherits(Clipboard, _Emitter);\n\n        /**\n                                         * @param {String|HTMLElement|HTMLCollection|NodeList} trigger\n                                         * @param {Object} options\n                                         */\n        function Clipboard(trigger, options) {\n          _classCallCheck(this, Clipboard);\n\n          var _this = _possibleConstructorReturn(this, (Clipboard.__proto__ || Object.getPrototypeOf(Clipboard)).call(this));\n\n          _this.resolveOptions(options);\n          _this.listenClick(trigger);\n          return _this;\n        }\n\n        /**\n           * Defines if attributes would be resolved using internal setter functions\n           * or custom functions that were passed in the constructor.\n           * @param {Object} options\n           */\n\n\n        _createClass(Clipboard, [{\n          key: 'resolveOptions',\n          value: function resolveOptions() {\n            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            this.action = typeof options.action === 'function' ? options.action : this.defaultAction;\n            this.target = typeof options.target === 'function' ? options.target : this.defaultTarget;\n            this.text = typeof options.text === 'function' ? options.text : this.defaultText;\n            this.container = _typeof(options.container) === 'object' ? options.container : document.body;\n          }\n\n          /**\n             * Adds a click event listener to the passed trigger.\n             * @param {String|HTMLElement|HTMLCollection|NodeList} trigger\n             */ },\n\n        {\n          key: 'listenClick',\n          value: function listenClick(trigger) {\n            var _this2 = this;\n\n            this.listener = (0, _goodListener2.default)(trigger, 'click', function (e) {\n              return _this2.onClick(e);\n            });\n          }\n\n          /**\n             * Defines a new `ClipboardAction` on each click event.\n             * @param {Event} e\n             */ },\n\n        {\n          key: 'onClick',\n          value: function onClick(e) {\n            var trigger = e.delegateTarget || e.currentTarget;\n\n            if (this.clipboardAction) {\n              this.clipboardAction = null;\n            }\n\n            this.clipboardAction = new _clipboardAction2.default({\n              action: this.action(trigger),\n              target: this.target(trigger),\n              text: this.text(trigger),\n              container: this.container,\n              trigger: trigger,\n              emitter: this });\n\n          }\n\n          /**\n             * Default `action` lookup function.\n             * @param {Element} trigger\n             */ },\n\n        {\n          key: 'defaultAction',\n          value: function defaultAction(trigger) {\n            return getAttributeValue('action', trigger);\n          }\n\n          /**\n             * Default `target` lookup function.\n             * @param {Element} trigger\n             */ },\n\n        {\n          key: 'defaultTarget',\n          value: function defaultTarget(trigger) {\n            var selector = getAttributeValue('target', trigger);\n\n            if (selector) {\n              return document.querySelector(selector);\n            }\n          }\n\n          /**\n             * Returns the support of the given action, or all actions if no action is\n             * given.\n             * @param {String} [action]\n             */ },\n\n        {\n          key: 'defaultText',\n\n\n          /**\n                               * Default `text` lookup function.\n                               * @param {Element} trigger\n                               */\n          value: function defaultText(trigger) {\n            return getAttributeValue('text', trigger);\n          }\n\n          /**\n             * Destroy lifecycle.\n             */ },\n\n        {\n          key: 'destroy',\n          value: function destroy() {\n            this.listener.destroy();\n\n            if (this.clipboardAction) {\n              this.clipboardAction.destroy();\n              this.clipboardAction = null;\n            }\n          } }],\n        [{\n          key: 'isSupported',\n          value: function isSupported() {\n            var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['copy', 'cut'];\n\n            var actions = typeof action === 'string' ? [action] : action;\n            var support = !!document.queryCommandSupported;\n\n            actions.forEach(function (action) {\n              support = support && !!document.queryCommandSupported(action);\n            });\n\n            return support;\n          } }]);\n\n\n        return Clipboard;\n      }(_tinyEmitter2.default);\n\n      /**\n                                 * Helper function to retrieve attribute value.\n                                 * @param {String} suffix\n                                 * @param {Element} element\n                                 */\n\n\n      function getAttributeValue(suffix, element) {\n        var attribute = 'data-clipboard-' + suffix;\n\n        if (!element.hasAttribute(attribute)) {\n          return;\n        }\n\n        return element.getAttribute(attribute);\n      }\n\n      module.exports = Clipboard;\n\n      /***/},\n    /* 1 */\n    /***/function (module, exports, __webpack_require__) {\n\n      \"use strict\";\n\n\n      var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;};\n\n      var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\n      var _select = __webpack_require__(2);\n\n      var _select2 = _interopRequireDefault(_select);\n\n      function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\n      function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\n      /**\n                                                                                                                                                             * Inner class which performs selection from either `text` or `target`\n                                                                                                                                                             * properties and then executes copy or cut operations.\n                                                                                                                                                             */\n      var ClipboardAction = function () {\n        /**\n                                          * @param {Object} options\n                                          */\n        function ClipboardAction(options) {\n          _classCallCheck(this, ClipboardAction);\n\n          this.resolveOptions(options);\n          this.initSelection();\n        }\n\n        /**\n           * Defines base properties passed from constructor.\n           * @param {Object} options\n           */\n\n\n        _createClass(ClipboardAction, [{\n          key: 'resolveOptions',\n          value: function resolveOptions() {\n            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            this.action = options.action;\n            this.container = options.container;\n            this.emitter = options.emitter;\n            this.target = options.target;\n            this.text = options.text;\n            this.trigger = options.trigger;\n\n            this.selectedText = '';\n          }\n\n          /**\n             * Decides which selection strategy is going to be applied based\n             * on the existence of `text` and `target` properties.\n             */ },\n\n        {\n          key: 'initSelection',\n          value: function initSelection() {\n            if (this.text) {\n              this.selectFake();\n            } else if (this.target) {\n              this.selectTarget();\n            }\n          }\n\n          /**\n             * Creates a fake textarea element, sets its value from `text` property,\n             * and makes a selection on it.\n             */ },\n\n        {\n          key: 'selectFake',\n          value: function selectFake() {\n            var _this = this;\n\n            var isRTL = document.documentElement.getAttribute('dir') == 'rtl';\n\n            this.removeFake();\n\n            this.fakeHandlerCallback = function () {\n              return _this.removeFake();\n            };\n            this.fakeHandler = this.container.addEventListener('click', this.fakeHandlerCallback) || true;\n\n            this.fakeElem = document.createElement('textarea');\n            // Prevent zooming on iOS\n            this.fakeElem.style.fontSize = '12pt';\n            // Reset box model\n            this.fakeElem.style.border = '0';\n            this.fakeElem.style.padding = '0';\n            this.fakeElem.style.margin = '0';\n            // Move element out of screen horizontally\n            this.fakeElem.style.position = 'absolute';\n            this.fakeElem.style[isRTL ? 'right' : 'left'] = '-9999px';\n            // Move element to the same position vertically\n            var yPosition = window.pageYOffset || document.documentElement.scrollTop;\n            this.fakeElem.style.top = yPosition + 'px';\n\n            this.fakeElem.setAttribute('readonly', '');\n            this.fakeElem.value = this.text;\n\n            this.container.appendChild(this.fakeElem);\n\n            this.selectedText = (0, _select2.default)(this.fakeElem);\n            this.copyText();\n          }\n\n          /**\n             * Only removes the fake element after another click event, that way\n             * a user can hit `Ctrl+C` to copy because selection still exists.\n             */ },\n\n        {\n          key: 'removeFake',\n          value: function removeFake() {\n            if (this.fakeHandler) {\n              this.container.removeEventListener('click', this.fakeHandlerCallback);\n              this.fakeHandler = null;\n              this.fakeHandlerCallback = null;\n            }\n\n            if (this.fakeElem) {\n              this.container.removeChild(this.fakeElem);\n              this.fakeElem = null;\n            }\n          }\n\n          /**\n             * Selects the content from element passed on `target` property.\n             */ },\n\n        {\n          key: 'selectTarget',\n          value: function selectTarget() {\n            this.selectedText = (0, _select2.default)(this.target);\n            this.copyText();\n          }\n\n          /**\n             * Executes the copy operation based on the current selection.\n             */ },\n\n        {\n          key: 'copyText',\n          value: function copyText() {\n            var succeeded = void 0;\n\n            try {\n              succeeded = document.execCommand(this.action);\n            } catch (err) {\n              succeeded = false;\n            }\n\n            this.handleResult(succeeded);\n          }\n\n          /**\n             * Fires an event based on the copy operation result.\n             * @param {Boolean} succeeded\n             */ },\n\n        {\n          key: 'handleResult',\n          value: function handleResult(succeeded) {\n            this.emitter.emit(succeeded ? 'success' : 'error', {\n              action: this.action,\n              text: this.selectedText,\n              trigger: this.trigger,\n              clearSelection: this.clearSelection.bind(this) });\n\n          }\n\n          /**\n             * Moves focus away from `target` and back to the trigger, removes current selection.\n             */ },\n\n        {\n          key: 'clearSelection',\n          value: function clearSelection() {\n            if (this.trigger) {\n              this.trigger.focus();\n            }\n\n            window.getSelection().removeAllRanges();\n          }\n\n          /**\n             * Sets the `action` to be performed which can be either 'copy' or 'cut'.\n             * @param {String} action\n             */ },\n\n        {\n          key: 'destroy',\n\n\n          /**\n                           * Destroy lifecycle.\n                           */\n          value: function destroy() {\n            this.removeFake();\n          } },\n        {\n          key: 'action',\n          set: function set() {\n            var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'copy';\n\n            this._action = action;\n\n            if (this._action !== 'copy' && this._action !== 'cut') {\n              throw new Error('Invalid \"action\" value, use either \"copy\" or \"cut\"');\n            }\n          }\n\n          /**\n             * Gets the `action` property.\n             * @return {String}\n             */,\n\n          get: function get() {\n            return this._action;\n          }\n\n          /**\n             * Sets the `target` property using an element\n             * that will be have its content copied.\n             * @param {Element} target\n             */ },\n\n        {\n          key: 'target',\n          set: function set(target) {\n            if (target !== undefined) {\n              if (target && (typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object' && target.nodeType === 1) {\n                if (this.action === 'copy' && target.hasAttribute('disabled')) {\n                  throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\n                }\n\n                if (this.action === 'cut' && (target.hasAttribute('readonly') || target.hasAttribute('disabled'))) {\n                  throw new Error('Invalid \"target\" attribute. You can\\'t cut text from elements with \"readonly\" or \"disabled\" attributes');\n                }\n\n                this._target = target;\n              } else {\n                throw new Error('Invalid \"target\" value, use a valid Element');\n              }\n            }\n          }\n\n          /**\n             * Gets the `target` property.\n             * @return {String|HTMLElement}\n             */,\n\n          get: function get() {\n            return this._target;\n          } }]);\n\n\n        return ClipboardAction;\n      }();\n\n      module.exports = ClipboardAction;\n\n      /***/},\n    /* 2 */\n    /***/function (module, exports) {\n\n      function select(element) {\n        var selectedText;\n\n        if (element.nodeName === 'SELECT') {\n          element.focus();\n\n          selectedText = element.value;\n        } else\n        if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n          var isReadOnly = element.hasAttribute('readonly');\n\n          if (!isReadOnly) {\n            element.setAttribute('readonly', '');\n          }\n\n          element.select();\n          element.setSelectionRange(0, element.value.length);\n\n          if (!isReadOnly) {\n            element.removeAttribute('readonly');\n          }\n\n          selectedText = element.value;\n        } else\n        {\n          if (element.hasAttribute('contenteditable')) {\n            element.focus();\n          }\n\n          var selection = window.getSelection();\n          var range = document.createRange();\n\n          range.selectNodeContents(element);\n          selection.removeAllRanges();\n          selection.addRange(range);\n\n          selectedText = selection.toString();\n        }\n\n        return selectedText;\n      }\n\n      module.exports = select;\n\n\n      /***/},\n    /* 3 */\n    /***/function (module, exports) {\n\n      function E() {\n        // Keep this empty so it's easier to inherit from\n        // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n      }\n\n      E.prototype = {\n        on: function on(name, callback, ctx) {\n          var e = this.e || (this.e = {});\n\n          (e[name] || (e[name] = [])).push({\n            fn: callback,\n            ctx: ctx });\n\n\n          return this;\n        },\n\n        once: function once(name, callback, ctx) {\n          var self = this;\n          function listener() {\n            self.off(name, listener);\n            callback.apply(ctx, arguments);\n          };\n\n          listener._ = callback;\n          return this.on(name, listener, ctx);\n        },\n\n        emit: function emit(name) {\n          var data = [].slice.call(arguments, 1);\n          var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n          var i = 0;\n          var len = evtArr.length;\n\n          for (i; i < len; i++) {\n            evtArr[i].fn.apply(evtArr[i].ctx, data);\n          }\n\n          return this;\n        },\n\n        off: function off(name, callback) {\n          var e = this.e || (this.e = {});\n          var evts = e[name];\n          var liveEvents = [];\n\n          if (evts && callback) {\n            for (var i = 0, len = evts.length; i < len; i++) {\n              if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n              liveEvents.push(evts[i]);\n            }\n          }\n\n          // Remove event from queue to prevent memory leak\n          // Suggested by https://github.com/lazd\n          // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n          liveEvents.length ?\n          e[name] = liveEvents :\n          delete e[name];\n\n          return this;\n        } };\n\n\n      module.exports = E;\n\n\n      /***/},\n    /* 4 */\n    /***/function (module, exports, __webpack_require__) {\n\n      var is = __webpack_require__(5);\n      var delegate = __webpack_require__(6);\n\n      /**\n                                              * Validates all params and calls the right\n                                              * listener function based on its target type.\n                                              *\n                                              * @param {String|HTMLElement|HTMLCollection|NodeList} target\n                                              * @param {String} type\n                                              * @param {Function} callback\n                                              * @return {Object}\n                                              */\n      function listen(target, type, callback) {\n        if (!target && !type && !callback) {\n          throw new Error('Missing required arguments');\n        }\n\n        if (!is.string(type)) {\n          throw new TypeError('Second argument must be a String');\n        }\n\n        if (!is.fn(callback)) {\n          throw new TypeError('Third argument must be a Function');\n        }\n\n        if (is.node(target)) {\n          return listenNode(target, type, callback);\n        } else\n        if (is.nodeList(target)) {\n          return listenNodeList(target, type, callback);\n        } else\n        if (is.string(target)) {\n          return listenSelector(target, type, callback);\n        } else\n        {\n          throw new TypeError('First argument must be a String, HTMLElement, HTMLCollection, or NodeList');\n        }\n      }\n\n      /**\n         * Adds an event listener to a HTML element\n         * and returns a remove listener function.\n         *\n         * @param {HTMLElement} node\n         * @param {String} type\n         * @param {Function} callback\n         * @return {Object}\n         */\n      function listenNode(node, type, callback) {\n        node.addEventListener(type, callback);\n\n        return {\n          destroy: function destroy() {\n            node.removeEventListener(type, callback);\n          } };\n\n      }\n\n      /**\n         * Add an event listener to a list of HTML elements\n         * and returns a remove listener function.\n         *\n         * @param {NodeList|HTMLCollection} nodeList\n         * @param {String} type\n         * @param {Function} callback\n         * @return {Object}\n         */\n      function listenNodeList(nodeList, type, callback) {\n        Array.prototype.forEach.call(nodeList, function (node) {\n          node.addEventListener(type, callback);\n        });\n\n        return {\n          destroy: function destroy() {\n            Array.prototype.forEach.call(nodeList, function (node) {\n              node.removeEventListener(type, callback);\n            });\n          } };\n\n      }\n\n      /**\n         * Add an event listener to a selector\n         * and returns a remove listener function.\n         *\n         * @param {String} selector\n         * @param {String} type\n         * @param {Function} callback\n         * @return {Object}\n         */\n      function listenSelector(selector, type, callback) {\n        return delegate(document.body, selector, type, callback);\n      }\n\n      module.exports = listen;\n\n\n      /***/},\n    /* 5 */\n    /***/function (module, exports) {\n\n      /**\n                                      * Check if argument is a HTML element.\n                                      *\n                                      * @param {Object} value\n                                      * @return {Boolean}\n                                      */\n      exports.node = function (value) {\n        return value !== undefined &&\n        value instanceof HTMLElement &&\n        value.nodeType === 1;\n      };\n\n      /**\n          * Check if argument is a list of HTML elements.\n          *\n          * @param {Object} value\n          * @return {Boolean}\n          */\n      exports.nodeList = function (value) {\n        var type = Object.prototype.toString.call(value);\n\n        return value !== undefined && (\n        type === '[object NodeList]' || type === '[object HTMLCollection]') &&\n        'length' in value && (\n        value.length === 0 || exports.node(value[0]));\n      };\n\n      /**\n          * Check if argument is a string.\n          *\n          * @param {Object} value\n          * @return {Boolean}\n          */\n      exports.string = function (value) {\n        return typeof value === 'string' ||\n        value instanceof String;\n      };\n\n      /**\n          * Check if argument is a function.\n          *\n          * @param {Object} value\n          * @return {Boolean}\n          */\n      exports.fn = function (value) {\n        var type = Object.prototype.toString.call(value);\n\n        return type === '[object Function]';\n      };\n\n\n      /***/},\n    /* 6 */\n    /***/function (module, exports, __webpack_require__) {\n\n      var closest = __webpack_require__(7);\n\n      /**\n                                             * Delegates event to a selector.\n                                             *\n                                             * @param {Element} element\n                                             * @param {String} selector\n                                             * @param {String} type\n                                             * @param {Function} callback\n                                             * @param {Boolean} useCapture\n                                             * @return {Object}\n                                             */\n      function _delegate(element, selector, type, callback, useCapture) {\n        var listenerFn = listener.apply(this, arguments);\n\n        element.addEventListener(type, listenerFn, useCapture);\n\n        return {\n          destroy: function destroy() {\n            element.removeEventListener(type, listenerFn, useCapture);\n          } };\n\n      }\n\n      /**\n         * Delegates event to a selector.\n         *\n         * @param {Element|String|Array} [elements]\n         * @param {String} selector\n         * @param {String} type\n         * @param {Function} callback\n         * @param {Boolean} useCapture\n         * @return {Object}\n         */\n      function delegate(elements, selector, type, callback, useCapture) {\n        // Handle the regular Element usage\n        if (typeof elements.addEventListener === 'function') {\n          return _delegate.apply(null, arguments);\n        }\n\n        // Handle Element-less usage, it defaults to global delegation\n        if (typeof type === 'function') {\n          // Use `document` as the first parameter, then apply arguments\n          // This is a short way to .unshift `arguments` without running into deoptimizations\n          return _delegate.bind(null, document).apply(null, arguments);\n        }\n\n        // Handle Selector-based usage\n        if (typeof elements === 'string') {\n          elements = document.querySelectorAll(elements);\n        }\n\n        // Handle Array-like based usage\n        return Array.prototype.map.call(elements, function (element) {\n          return _delegate(element, selector, type, callback, useCapture);\n        });\n      }\n\n      /**\n         * Finds closest match and invokes callback.\n         *\n         * @param {Element} element\n         * @param {String} selector\n         * @param {String} type\n         * @param {Function} callback\n         * @return {Function}\n         */\n      function listener(element, selector, type, callback) {\n        return function (e) {\n          e.delegateTarget = closest(e.target, selector);\n\n          if (e.delegateTarget) {\n            callback.call(element, e);\n          }\n        };\n      }\n\n      module.exports = delegate;\n\n\n      /***/},\n    /* 7 */\n    /***/function (module, exports) {\n\n      var DOCUMENT_NODE_TYPE = 9;\n\n      /**\n                                   * A polyfill for Element.matches()\n                                   */\n      if (typeof Element !== 'undefined' && !Element.prototype.matches) {\n        var proto = Element.prototype;\n\n        proto.matches = proto.matchesSelector ||\n        proto.mozMatchesSelector ||\n        proto.msMatchesSelector ||\n        proto.oMatchesSelector ||\n        proto.webkitMatchesSelector;\n      }\n\n      /**\n         * Finds the closest parent that matches a selector.\n         *\n         * @param {Element} element\n         * @param {String} selector\n         * @return {Function}\n         */\n      function closest(element, selector) {\n        while (element && element.nodeType !== DOCUMENT_NODE_TYPE) {\n          if (typeof element.matches === 'function' &&\n          element.matches(selector)) {\n            return element;\n          }\n          element = element.parentNode;\n        }\n      }\n\n      module.exports = closest;\n\n\n      /***/}]));\n\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///18\n");

/***/ }),

/***/ 2:
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNENBQTRDOztBQUU1QyIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),

/***/ 263:
/*!************************************************************************!*\
  !*** D:/1zxyWork/daibeih5/daibei3.0/node_modules/image-tools/index.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.pathToBase64 = pathToBase64;exports.base64ToPath = base64ToPath;function getLocalFilePath(path) {\n  if (path.indexOf('_www') === 0 || path.indexOf('_doc') === 0 || path.indexOf('_documents') === 0 || path.indexOf('_downloads') === 0) {\n    return path;\n  }\n  if (path.indexOf('file://') === 0) {\n    return path;\n  }\n  if (path.indexOf('/storage/emulated/0/') === 0) {\n    return path;\n  }\n  if (path.indexOf('/') === 0) {\n    var localFilePath = plus.io.convertAbsoluteFileSystem(path);\n    if (localFilePath !== path) {\n      return localFilePath;\n    } else {\n      path = path.substr(1);\n    }\n  }\n  return '_www/' + path;\n}\n\nfunction pathToBase64(path) {\n  return new Promise(function (resolve, reject) {\n    if (typeof window === 'object' && 'document' in window) {\n      var canvas = document.createElement('canvas');\n      var c2x = canvas.getContext('2d');\n      var img = new Image();\n      img.onload = function () {\n        canvas.width = img.width;\n        canvas.height = img.height;\n        c2x.drawImage(img, 0, 0);\n        resolve(canvas.toDataURL());\n      };\n      img.onerror = reject;\n      img.src = path;\n      return;\n    }\n    if (typeof plus === 'object') {\n      plus.io.resolveLocalFileSystemURL(getLocalFilePath(path), function (entry) {\n        entry.file(function (file) {\n          var fileReader = new plus.io.FileReader();\n          fileReader.onload = function (data) {\n            resolve(data.target.result);\n          };\n          fileReader.onerror = function (error) {\n            reject(error);\n          };\n          fileReader.readAsDataURL(file);\n        }, function (error) {\n          reject(error);\n        });\n      }, function (error) {\n        reject(error);\n      });\n      return;\n    }\n    if (typeof wx === 'object' && wx.canIUse('getFileSystemManager')) {\n      wx.getFileSystemManager().readFile({\n        filePath: path,\n        encoding: 'base64',\n        success: function success(res) {\n          resolve('data:image/png;base64,' + res.data);\n        },\n        fail: function fail(error) {\n          reject(error);\n        } });\n\n      return;\n    }\n    reject(new Error('not support'));\n  });\n}\n\nfunction base64ToPath(base64) {\n  return new Promise(function (resolve, reject) {\n    if (typeof window === 'object' && 'document' in window) {\n      base64 = base64.split(',');\n      var type = base64[0].match(/:(.*?);/)[1];\n      var str = atob(base64[1]);\n      var n = str.length;\n      var array = new Uint8Array(n);\n      while (n--) {\n        array[n] = str.charCodeAt(n);\n      }\n      return resolve((window.URL || window.webkitURL).createObjectURL(new Blob([array], { type: type })));\n    }\n    var extName = base64.match(/data\\:\\S+\\/(\\S+);/);\n    if (extName) {\n      extName = extName[1];\n    } else {\n      reject(new Error('base64 error'));\n    }\n    var fileName = Date.now() + '.' + extName;\n    if (typeof plus === 'object') {\n      var bitmap = new plus.nativeObj.Bitmap('bitmap' + Date.now());\n      bitmap.loadBase64Data(base64, function () {\n        var filePath = '_doc/uniapp_temp/' + fileName;\n        bitmap.save(filePath, {}, function () {\n          bitmap.clear();\n          resolve(filePath);\n        }, function (error) {\n          bitmap.clear();\n          reject(error);\n        });\n      }, function (error) {\n        bitmap.clear();\n        reject(error);\n      });\n      return;\n    }\n    if (typeof wx === 'object' && wx.canIUse('getFileSystemManager')) {\n      var filePath = wx.env.USER_DATA_PATH + '/' + fileName;\n      wx.getFileSystemManager().writeFile({\n        filePath: filePath,\n        data: base64.replace(/^data:\\S+\\/\\S+;base64,/, ''),\n        encoding: 'base64',\n        success: function success() {\n          resolve(filePath);\n        },\n        fail: function fail(error) {\n          reject(error);\n        } });\n\n      return;\n    }\n    reject(new Error('not support'));\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///263\n");

/***/ }),

/***/ 3:
/*!******************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/mp-vue/dist/mp.runtime.esm.js ***!
  \******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/*!\n * Vue.js v2.6.10\n * (c) 2014-2019 Evan You\n * Released under the MIT License.\n */\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// These helpers produce better VM code in JS engines due to their\n// explicitness and function inlining.\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive.\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value, e.g., [object Object].\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\nfunction isPromise (val) {\n  return (\n    isDef(val) &&\n    typeof val.then === 'function' &&\n    typeof val.catch === 'function'\n  )\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert an input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if an attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array.\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether an object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind polyfill for environments that do not support it,\n * e.g., PhantomJS 1.x. Technically, we don't need this anymore\n * since native bind is now performant enough in most browsers.\n * But removing it would mean breaking code that was able to run in\n * PhantomJS 1.x, so this must be kept for backward compatibility.\n */\n\n/* istanbul ignore next */\nfunction polyfillBind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n\n  boundFn._length = fn.length;\n  return boundFn\n}\n\nfunction nativeBind (fn, ctx) {\n  return fn.bind(ctx)\n}\n\nvar bind = Function.prototype.bind\n  ? nativeBind\n  : polyfillBind;\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/* eslint-disable no-unused-vars */\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/* eslint-enable no-unused-vars */\n\n/**\n * Return the same value.\n */\nvar identity = function (_) { return _; };\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime()\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\n/**\n * Return the first index at which a loosely equal value can be\n * found in the array (if value is a plain object, the array must\n * contain an object of the same shape), or -1 if it is not present.\n */\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured',\n  'serverPrefetch'\n];\n\n/*  */\n\n\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: \"development\" !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: \"development\" !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Perform updates asynchronously. Intended to be used by Vue Test Utils\n   * This will significantly reduce performance if set to false.\n   */\n  async: true,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\n/**\n * unicode letters used for parsing html tags, component names and property paths.\n * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname\n * skipping \\u10000-\\uEFFFF due to it freezing up PhantomJS\n */\nvar unicodeRegExp = /a-zA-Z\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD/;\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = new RegExp((\"[^\" + (unicodeRegExp.source) + \".$_\\\\d]\"));\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\nvar isPhantomJS = UA && /phantomjs/.test(UA);\nvar isFF = UA && UA.match(/firefox\\/(\\d+)/);\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && !inWeex && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = /*@__PURE__*/(function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\nif (true) {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    {\n      if(vm.$scope && vm.$scope.is){\n        return vm.$scope.is\n      }\n    }\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var options = typeof vm === 'function' && vm.cid != null\n      ? vm.options\n      : vm._isVue\n        ? vm.$options || vm.constructor.options\n        : vm;\n    var name = options.name || options._componentTag;\n    var file = options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.SharedObject.target) {\n    Dep.SharedObject.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  if ( true && !config.async) {\n    // subs aren't sorted in scheduler if not running async\n    // we need to sort them now to make sure they fire in correct\n    // order\n    subs.sort(function (a, b) { return a.id - b.id; });\n  }\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// The current target watcher being evaluated.\n// This is globally unique because only one watcher\n// can be evaluated at a time.\n// fixed by xxxxxx (nvue shared vuex)\n/* eslint-disable no-undef */\nDep.SharedObject = typeof SharedObject !== 'undefined' ? SharedObject : {};\nDep.SharedObject.target = null;\nDep.SharedObject.targetStack = [];\n\nfunction pushTarget (target) {\n  Dep.SharedObject.targetStack.push(target);\n  Dep.SharedObject.target = target;\n}\n\nfunction popTarget () {\n  Dep.SharedObject.targetStack.pop();\n  Dep.SharedObject.target = Dep.SharedObject.targetStack[Dep.SharedObject.targetStack.length - 1];\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    // #7975\n    // clone children array to avoid mutating original in case of cloning\n    // a child.\n    vnode.children && vnode.children.slice(),\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.asyncMeta = vnode.asyncMeta;\n  cloned.isCloned = true;\n  return cloned\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);\n\nvar methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * In some cases we may want to disable observation inside a component's\n * update computation.\n */\nvar shouldObserve = true;\n\nfunction toggleObserving (value) {\n  shouldObserve = value;\n}\n\n/**\n * Observer class that is attached to each observed\n * object. Once attached, the observer converts the target\n * object's property keys into getter/setters that\n * collect dependencies and dispatch updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    if (hasProto) {\n      {// fixed by xxxxxx 微信小程序使用 plugins 之后，数组方法被直接挂载到了数组对象上，需要执行 copyAugment 逻辑\n        if(value.push !== value.__proto__.push){\n          copyAugment(value, arrayMethods, arrayKeys);\n        } else {\n          protoAugment(value, arrayMethods);\n        }\n      }\n    } else {\n      copyAugment(value, arrayMethods, arrayKeys);\n    }\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through all properties and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment a target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment a target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key];\n  }\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.SharedObject.target) { // fixed by xxxxxx\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if ( true && customSetter) {\n        customSetter();\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) { return }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot set reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot delete reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (true) {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n\n  var keys = hasSymbol\n    ? Reflect.ownKeys(from)\n    : Object.keys(from);\n\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    // in case the object is already observed...\n    if (key === '__ob__') { continue }\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (\n      toVal !== fromVal &&\n      isPlainObject(toVal) &&\n      isPlainObject(fromVal)\n    ) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n       true && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  var res = childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal;\n  return res\n    ? dedupeHooks(res)\n    : res\n}\n\nfunction dedupeHooks (hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n     true && assertObjectType(key, childVal, vm);\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (true) {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && \"development\" !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!new RegExp((\"^[a-zA-Z][\\\\-\\\\.0-9_\" + (unicodeRegExp.source) + \"]*$\")).test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'should conform to valid custom element name in html5 specification.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (true) {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(props)) + \".\",\n      vm\n    );\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(inject)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def$$1 = dirs[key];\n      if (typeof def$$1 === 'function') {\n        dirs[key] = { bind: def$$1, update: def$$1 };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (true) {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n\n  // Apply extends and mixins on the child options,\n  // but only if it is a raw options object that isn't\n  // the result of another mergeOptions call.\n  // Only merged options has the _base property.\n  if (!child._base) {\n    if (child.extends) {\n      parent = mergeOptions(parent, child.extends, vm);\n    }\n    if (child.mixins) {\n      for (var i = 0, l = child.mixins.length; i < l; i++) {\n        parent = mergeOptions(parent, child.mixins[i], vm);\n      }\n    }\n  }\n\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if ( true && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\n\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // boolean casting\n  var booleanIndex = getTypeIndex(Boolean, prop.type);\n  if (booleanIndex > -1) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (value === '' || value === hyphenate(key)) {\n      // only cast empty string / same name to boolean if\n      // boolean has higher priority\n      var stringIndex = getTypeIndex(String, prop.type);\n      if (stringIndex < 0 || booleanIndex < stringIndex) {\n        value = true;\n      }\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldObserve = shouldObserve;\n    toggleObserving(true);\n    observe(value);\n    toggleObserving(prevShouldObserve);\n  }\n  if (\n    true\n  ) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if ( true && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n\n  if (!valid) {\n    warn(\n      getInvalidTypeMessage(name, value, expectedTypes),\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isSameType (a, b) {\n  return getType(a) === getType(b)\n}\n\nfunction getTypeIndex (type, expectedTypes) {\n  if (!Array.isArray(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1\n  }\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\n    if (isSameType(expectedTypes[i], type)) {\n      return i\n    }\n  }\n  return -1\n}\n\nfunction getInvalidTypeMessage (name, value, expectedTypes) {\n  var message = \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n    \" Expected \" + (expectedTypes.map(capitalize).join(', '));\n  var expectedType = expectedTypes[0];\n  var receivedType = toRawType(value);\n  var expectedValue = styleValue(value, expectedType);\n  var receivedValue = styleValue(value, receivedType);\n  // check if we need to specify expected value\n  if (expectedTypes.length === 1 &&\n      isExplicable(expectedType) &&\n      !isBoolean(expectedType, receivedType)) {\n    message += \" with value \" + expectedValue;\n  }\n  message += \", got \" + receivedType + \" \";\n  // check if we need to specify received value\n  if (isExplicable(receivedType)) {\n    message += \"with value \" + receivedValue + \".\";\n  }\n  return message\n}\n\nfunction styleValue (value, type) {\n  if (type === 'String') {\n    return (\"\\\"\" + value + \"\\\"\")\n  } else if (type === 'Number') {\n    return (\"\" + (Number(value)))\n  } else {\n    return (\"\" + value)\n  }\n}\n\nfunction isExplicable (value) {\n  var explicitTypes = ['string', 'number', 'boolean'];\n  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })\n}\n\nfunction isBoolean () {\n  var args = [], len = arguments.length;\n  while ( len-- ) args[ len ] = arguments[ len ];\n\n  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.\n  // See: https://github.com/vuejs/vuex/issues/1505\n  pushTarget();\n  try {\n    if (vm) {\n      var cur = vm;\n      while ((cur = cur.$parent)) {\n        var hooks = cur.$options.errorCaptured;\n        if (hooks) {\n          for (var i = 0; i < hooks.length; i++) {\n            try {\n              var capture = hooks[i].call(cur, err, vm, info) === false;\n              if (capture) { return }\n            } catch (e) {\n              globalHandleError(e, cur, 'errorCaptured hook');\n            }\n          }\n        }\n      }\n    }\n    globalHandleError(err, vm, info);\n  } finally {\n    popTarget();\n  }\n}\n\nfunction invokeWithErrorHandling (\n  handler,\n  context,\n  args,\n  vm,\n  info\n) {\n  var res;\n  try {\n    res = args ? handler.apply(context, args) : handler.call(context);\n    if (res && !res._isVue && isPromise(res) && !res._handled) {\n      res.catch(function (e) { return handleError(e, vm, info + \" (Promise/async)\"); });\n      // issue #9511\n      // avoid catch triggering multiple times when nested calls\n      res._handled = true;\n    }\n  } catch (e) {\n    handleError(e, vm, info);\n  }\n  return res\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      // if the user intentionally throws the original error in the handler,\n      // do not log it twice\n      if (e !== err) {\n        logError(e, null, 'config.errorHandler');\n      }\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  if (true) {\n    warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n  }\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using microtasks.\n// In 2.5 we used (macro) tasks (in combination with microtasks).\n// However, it has subtle problems when state is changed right before repaint\n// (e.g. #6813, out-in transitions).\n// Also, using (macro) tasks in event handler would cause some weird behaviors\n// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).\n// So we now use microtasks everywhere, again.\n// A major drawback of this tradeoff is that there are some scenarios\n// where microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690, which have workarounds)\n// or even between bubbling of the same event (#6566).\nvar timerFunc;\n\n// The nextTick behavior leverages the microtask queue, which can be accessed\n// via either native Promise.then or MutationObserver.\n// MutationObserver has wider support, however it is seriously bugged in\n// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n// completely stops working after triggering a few times... so, if native\n// Promise is available, we will use it:\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  timerFunc = function () {\n    p.then(flushCallbacks);\n    // In problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n} else if (!isIE && typeof MutationObserver !== 'undefined' && (\n  isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  // Use MutationObserver where native Promise is not available,\n  // e.g. PhantomJS, iOS7, Android 4.4\n  // (#6466 MutationObserver is unreliable in IE11)\n  var counter = 1;\n  var observer = new MutationObserver(flushCallbacks);\n  var textNode = document.createTextNode(String(counter));\n  observer.observe(textNode, {\n    characterData: true\n  });\n  timerFunc = function () {\n    counter = (counter + 1) % 2;\n    textNode.data = String(counter);\n  };\n} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  // Fallback to setImmediate.\n  // Techinically it leverages the (macro) task queue,\n  // but it is still a better choice than setTimeout.\n  timerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else {\n  // Fallback to setTimeout.\n  timerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    timerFunc();\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (true) {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      'referenced during render. Make sure that this property is reactive, ' +\n      'either in the data option, or for class-based components, by ' +\n      'initializing the property. ' +\n      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n      target\n    );\n  };\n\n  var warnReservedPrefix = function (target, key) {\n    warn(\n      \"Property \\\"\" + key + \"\\\" must be accessed with \\\"$data.\" + key + \"\\\" because \" +\n      'properties starting with \"$\" or \"_\" are not proxied in the Vue instance to ' +\n      'prevent conflicts with Vue internals' +\n      'See: https://vuejs.org/v2/api/#data',\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' && isNative(Proxy);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) ||\n        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));\n      if (!has && !isAllowed) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\nvar mark;\nvar measure;\n\nif (true) {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      // perf.clearMeasures(name)\n    };\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns, vm) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, \"v-on handler\");\n      }\n    } else {\n      // return handler return value for single handlers\n      return invokeWithErrorHandling(fns, null, arguments, vm, \"v-on handler\")\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  createOnceHandler,\n  vm\n) {\n  var name, def$$1, cur, old, event;\n  for (name in on) {\n    def$$1 = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (isUndef(cur)) {\n       true && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur, vm);\n      }\n      if (isTrue(event.once)) {\n        cur = on[name] = createOnceHandler(event.name, cur, event.capture);\n      }\n      add(event.name, cur, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (true) {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    toggleObserving(false);\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (true) {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {}\n    });\n    toggleObserving(true);\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject)\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      // #6574 in case the inject object is observed...\n      if (key === '__ob__') { continue }\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && hasOwn(source._provided, provideKey)) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else if (true) {\n          warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n        }\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  if (!children || !children.length) {\n    return {}\n  }\n  var slots = {};\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      // fixed by xxxxxx 临时 hack 掉 uni-app 中的异步 name slot page\n      if(child.asyncMeta && child.asyncMeta.data && child.asyncMeta.data.slot === 'page'){\n        (slots['page'] || (slots['page'] = [])).push(child);\n      }else{\n        (slots.default || (slots.default = [])).push(child);\n      }\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\n/*  */\n\nfunction normalizeScopedSlots (\n  slots,\n  normalSlots,\n  prevSlots\n) {\n  var res;\n  var hasNormalSlots = Object.keys(normalSlots).length > 0;\n  var isStable = slots ? !!slots.$stable : !hasNormalSlots;\n  var key = slots && slots.$key;\n  if (!slots) {\n    res = {};\n  } else if (slots._normalized) {\n    // fast path 1: child component re-render only, parent did not change\n    return slots._normalized\n  } else if (\n    isStable &&\n    prevSlots &&\n    prevSlots !== emptyObject &&\n    key === prevSlots.$key &&\n    !hasNormalSlots &&\n    !prevSlots.$hasNormal\n  ) {\n    // fast path 2: stable scoped slots w/ no normal slots to proxy,\n    // only need to normalize once\n    return prevSlots\n  } else {\n    res = {};\n    for (var key$1 in slots) {\n      if (slots[key$1] && key$1[0] !== '$') {\n        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);\n      }\n    }\n  }\n  // expose normal slots on scopedSlots\n  for (var key$2 in normalSlots) {\n    if (!(key$2 in res)) {\n      res[key$2] = proxyNormalSlot(normalSlots, key$2);\n    }\n  }\n  // avoriaz seems to mock a non-extensible $scopedSlots object\n  // and when that is passed down this would cause an error\n  if (slots && Object.isExtensible(slots)) {\n    (slots)._normalized = res;\n  }\n  def(res, '$stable', isStable);\n  def(res, '$key', key);\n  def(res, '$hasNormal', hasNormalSlots);\n  return res\n}\n\nfunction normalizeScopedSlot(normalSlots, key, fn) {\n  var normalized = function () {\n    var res = arguments.length ? fn.apply(null, arguments) : fn({});\n    res = res && typeof res === 'object' && !Array.isArray(res)\n      ? [res] // single vnode\n      : normalizeChildren(res);\n    return res && (\n      res.length === 0 ||\n      (res.length === 1 && res[0].isComment) // #9658\n    ) ? undefined\n      : res\n  };\n  // this is a slot using the new v-slot syntax without scope. although it is\n  // compiled as a scoped slot, render fn users would expect it to be present\n  // on this.$slots because the usage is semantically a normal slot.\n  if (fn.proxy) {\n    Object.defineProperty(normalSlots, key, {\n      get: normalized,\n      enumerable: true,\n      configurable: true\n    });\n  }\n  return normalized\n}\n\nfunction proxyNormalSlot(slots, key) {\n  return function () { return slots[key]; }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    if (hasSymbol && val[Symbol.iterator]) {\n      ret = [];\n      var iterator = val[Symbol.iterator]();\n      var result = iterator.next();\n      while (!result.done) {\n        ret.push(render(result.value, ret.length));\n        result = iterator.next();\n      }\n    } else {\n      keys = Object.keys(val);\n      ret = new Array(keys.length);\n      for (i = 0, l = keys.length; i < l; i++) {\n        key = keys[i];\n        ret[i] = render(val[key], key, i);\n      }\n    }\n  }\n  if (!isDef(ret)) {\n    ret = [];\n  }\n  (ret)._isVList = true;\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if ( true && !isObject(bindObject)) {\n        warn(\n          'slot v-bind without argument expects an Object',\n          this\n        );\n      }\n      props = extend(extend({}, bindObject), props);\n    }\n    nodes = scopedSlotFn(props) || fallback;\n  } else {\n    nodes = this.$slots[name] || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\nfunction isKeyNotMatch (expect, actual) {\n  if (Array.isArray(expect)) {\n    return expect.indexOf(actual) === -1\n  } else {\n    return expect !== actual\n  }\n}\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInKeyCode,\n  eventKeyName,\n  builtInKeyName\n) {\n  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\n  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\n    return isKeyNotMatch(builtInKeyName, eventKeyName)\n  } else if (mappedKeyCode) {\n    return isKeyNotMatch(mappedKeyCode, eventKeyCode)\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n       true && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        var camelizedKey = camelize(key);\n        var hyphenatedKey = hyphenate(key);\n        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree.\n  if (tree && !isInFor) {\n    return tree\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n       true && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res,\n  // the following are added in 2.6\n  hasDynamicKeys,\n  contentHashKey\n) {\n  res = res || { $stable: !hasDynamicKeys };\n  for (var i = 0; i < fns.length; i++) {\n    var slot = fns[i];\n    if (Array.isArray(slot)) {\n      resolveScopedSlots(slot, res, hasDynamicKeys);\n    } else if (slot) {\n      // marker for reverse proxying v-slot without scope on this.$slots\n      if (slot.proxy) {\n        slot.fn.proxy = true;\n      }\n      res[slot.key] = slot.fn;\n    }\n  }\n  if (contentHashKey) {\n    (res).$key = contentHashKey;\n  }\n  return res\n}\n\n/*  */\n\nfunction bindDynamicKeys (baseObj, values) {\n  for (var i = 0; i < values.length; i += 2) {\n    var key = values[i];\n    if (typeof key === 'string' && key) {\n      baseObj[values[i]] = values[i + 1];\n    } else if ( true && key !== '' && key !== null) {\n      // null is a speical value for explicitly removing a binding\n      warn(\n        (\"Invalid value for dynamic directive argument (expected string or null): \" + key),\n        this\n      );\n    }\n  }\n  return baseObj\n}\n\n// helper to dynamically append modifier runtime markers to event names.\n// ensure only append when value is already string, otherwise it will be cast\n// to string and cause the type check to miss.\nfunction prependModifier (value, symbol) {\n  return typeof value === 'string' ? symbol + value : value\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n  target._d = bindDynamicKeys;\n  target._p = prependModifier;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var this$1 = this;\n\n  var options = Ctor.options;\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm;\n  if (hasOwn(parent, '_uid')) {\n    contextVm = Object.create(parent);\n    // $flow-disable-line\n    contextVm._original = parent;\n  } else {\n    // the context vm passed in is a functional context as well.\n    // in this case we want to make sure we are able to get a hold to the\n    // real context instance.\n    contextVm = parent;\n    // $flow-disable-line\n    parent = parent._original;\n  }\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () {\n    if (!this$1.$slots) {\n      normalizeScopedSlots(\n        data.scopedSlots,\n        this$1.$slots = resolveSlots(children, parent)\n      );\n    }\n    return this$1.$slots\n  };\n\n  Object.defineProperty(this, 'scopedSlots', ({\n    enumerable: true,\n    get: function get () {\n      return normalizeScopedSlots(data.scopedSlots, this.slots())\n    }\n  }));\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode && !Array.isArray(vnode)) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)\n  } else if (Array.isArray(vnode)) {\n    var vnodes = normalizeChildren(vnode) || [];\n    var res = new Array(vnodes.length);\n    for (var i = 0; i < vnodes.length; i++) {\n      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);\n    }\n    return res\n  }\n}\n\nfunction cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {\n  // #7817 clone node before setting fnContext, otherwise if the node is reused\n  // (e.g. it was from a cached normal slot) the fnContext causes named slots\n  // that should not be matched to match.\n  var clone = cloneVNode(vnode);\n  clone.fnContext = contextVm;\n  clone.fnOptions = options;\n  if (true) {\n    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;\n  }\n  if (data.slot) {\n    (clone.data || (clone.data = {})).slot = data.slot;\n  }\n  return clone\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n/*  */\n\n/*  */\n\n/*  */\n\n// inline hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (vnode, hydrating) {\n    if (\n      vnode.componentInstance &&\n      !vnode.componentInstance._isDestroyed &&\n      vnode.data.keepAlive\n    ) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    } else {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (true) {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // install component management hooks onto the placeholder node\n  installComponentHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent // activeInstance in lifecycle state\n) {\n  var options = {\n    _isComponent: true,\n    _parentVnode: vnode,\n    parent: parent\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction installComponentHooks (data) {\n  var hooks = data.hook || (data.hook = {});\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var existing = hooks[key];\n    var toMerge = componentVNodeHooks[key];\n    if (existing !== toMerge && !(existing && existing._merged)) {\n      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;\n    }\n  }\n}\n\nfunction mergeHook$1 (f1, f2) {\n  var merged = function (a, b) {\n    // flow complains about extra args which is why we use any\n    f1(a, b);\n    f2(a, b);\n  };\n  merged._merged = true;\n  return merged\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input'\n  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  var existing = on[event];\n  var callback = data.model.callback;\n  if (isDef(existing)) {\n    if (\n      Array.isArray(existing)\n        ? existing.indexOf(callback) === -1\n        : existing !== callback\n    ) {\n      on[event] = [callback].concat(existing);\n    }\n  } else {\n    on[event] = callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n     true && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if ( true &&\n    isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n  ) {\n    {\n      warn(\n        'Avoid using non-primitive value as key, ' +\n        'use string/number value instead.',\n        context\n      );\n    }\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) { applyNS(vnode, ns); }\n    if (isDef(data)) { registerDeepBindings(data); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (\n        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n// ref #5318\n// necessary to ensure parent re-render when deep bindings like :style and\n// :class are used on slot nodes\nfunction registerDeepBindings (data) {\n  if (isObject(data.style)) {\n    traverse(data.style);\n  }\n  if (isObject(data.class)) {\n    traverse(data.class);\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (true) {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {}\n}\n\nvar currentRenderingInstance = null;\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    if (_parentVnode) {\n      vm.$scopedSlots = normalizeScopedSlots(\n        _parentVnode.data.scopedSlots,\n        vm.$slots,\n        vm.$scopedSlots\n      );\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      // There's no need to maintain a stack becaues all render fns are called\n      // separately from one another. Nested component's render fns are called\n      // when parent component is patched.\n      currentRenderingInstance = vm;\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if ( true && vm.$options.renderError) {\n        try {\n          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n        } catch (e) {\n          handleError(e, vm, \"renderError\");\n          vnode = vm._vnode;\n        }\n      } else {\n        vnode = vm._vnode;\n      }\n    } finally {\n      currentRenderingInstance = null;\n    }\n    // if the returned array contains only a single node, allow it\n    if (Array.isArray(vnode) && vnode.length === 1) {\n      vnode = vnode[0];\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if ( true && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  var owner = currentRenderingInstance;\n  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {\n    // already pending\n    factory.owners.push(owner);\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (owner && !isDef(factory.owners)) {\n    var owners = factory.owners = [owner];\n    var sync = true;\n    var timerLoading = null;\n    var timerTimeout = null\n\n    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });\n\n    var forceRender = function (renderCompleted) {\n      for (var i = 0, l = owners.length; i < l; i++) {\n        (owners[i]).$forceUpdate();\n      }\n\n      if (renderCompleted) {\n        owners.length = 0;\n        if (timerLoading !== null) {\n          clearTimeout(timerLoading);\n          timerLoading = null;\n        }\n        if (timerTimeout !== null) {\n          clearTimeout(timerTimeout);\n          timerTimeout = null;\n        }\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender(true);\n      } else {\n        owners.length = 0;\n      }\n    });\n\n    var reject = once(function (reason) {\n       true && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender(true);\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (isPromise(res)) {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isPromise(res.component)) {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            timerLoading = setTimeout(function () {\n              timerLoading = null;\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender(false);\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          timerTimeout = setTimeout(function () {\n            timerTimeout = null;\n            if (isUndef(factory.resolved)) {\n              reject(\n                 true\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : undefined\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn) {\n  target.$on(event, fn);\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction createOnceHandler (event, fn) {\n  var _target = target;\n  return function onceHandler () {\n    var res = fn.apply(null, arguments);\n    if (res !== null) {\n      _target.$off(event, onceHandler);\n    }\n  }\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        vm.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\n        vm.$off(event[i$1], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (true) {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      var info = \"event handler for \\\"\" + event + \"\\\"\";\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        invokeWithErrorHandling(cbs[i], vm, args, vm, info);\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction setActiveInstance(vm) {\n  var prevActiveInstance = activeInstance;\n  activeInstance = vm;\n  return function () {\n    activeInstance = prevActiveInstance;\n  }\n}\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var restoreActiveInstance = setActiveInstance(vm);\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    restoreActiveInstance();\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (true) {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren.\n\n  // check if there are dynamic scopedSlots (hand-written or compiled but with\n  // dynamic slot names). Static scoped slots compiled from template has the\n  // \"$stable\" marker.\n  var newScopedSlots = parentVnode.data.scopedSlots;\n  var oldScopedSlots = vm.$scopedSlots;\n  var hasDynamicScopedSlot = !!(\n    (newScopedSlots && !newScopedSlots.$stable) ||\n    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||\n    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)\n  );\n\n  // Any static slot children from the parent may have changed during parent's\n  // update. Dynamic scoped slots may also have changed. In such cases, a forced\n  // update is necessary to ensure correctness.\n  var needsForceUpdate = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    hasDynamicScopedSlot\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = parentVnode.data.attrs || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    toggleObserving(false);\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      var propOptions = vm.$options.props; // wtf flow?\n      props[key] = validateProp(key, propOptions, propsData, vm);\n    }\n    toggleObserving(true);\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n\n  // update listeners\n  listeners = listeners || emptyObject;\n  var oldListeners = vm.$options._parentListeners;\n  vm.$options._parentListeners = listeners;\n  updateComponentListeners(vm, listeners, oldListeners);\n\n  // resolve slots + force update if has children\n  if (needsForceUpdate) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (true) {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  // #7573 disable dep collection when invoking lifecycle hooks\n  pushTarget();\n  var handlers = vm.$options[hook];\n  var info = hook + \" hook\";\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      invokeWithErrorHandling(handlers[i], vm, null, vm, info);\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n  popTarget();\n}\n\n/*  */\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (true) {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n// Async edge case #6566 requires saving the timestamp when event listeners are\n// attached. However, calling performance.now() has a perf overhead especially\n// if the page has thousands of event listeners. Instead, we take a timestamp\n// every time the scheduler flushes and use that for all event listeners\n// attached during that flush.\nvar currentFlushTimestamp = 0;\n\n// Async edge case fix requires storing an event listener's attach timestamp.\nvar getNow = Date.now;\n\n// Determine what event timestamp the browser is using. Annoyingly, the\n// timestamp can either be hi-res (relative to page load) or low-res\n// (relative to UNIX epoch), so in order to compare time we have to use the\n// same timestamp type when saving the flush timestamp.\n// All IE versions use low-res event timestamps, and have problematic clock\n// implementations (#9632)\nif (inBrowser && !isIE) {\n  var performance = window.performance;\n  if (\n    performance &&\n    typeof performance.now === 'function' &&\n    getNow() > document.createEvent('Event').timeStamp\n  ) {\n    // if the event timestamp, although evaluated AFTER the Date.now(), is\n    // smaller than it, it means the event is using a hi-res timestamp,\n    // and we need to use the hi-res version for event listener timestamps as\n    // well.\n    getNow = function () { return performance.now(); };\n  }\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  currentFlushTimestamp = getNow();\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    if (watcher.before) {\n      watcher.before();\n    }\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if ( true && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n\n      if ( true && !config.async) {\n        flushSchedulerQueue();\n        return\n      }\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\n\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n    this.before = options.before;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression =  true\n    ? expOrFn.toString()\n    : undefined;\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = noop;\n       true && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this.deps[i];\n    if (!this.newDepIds.has(dep.id)) {\n      dep.removeSub(this);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n  var i = this.deps.length;\n  while (i--) {\n    this.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this.deps[i].removeSub(this);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  if (!isRoot) {\n    toggleObserving(false);\n  }\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (true) {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (!isRoot && !isUpdatingChildComponent) {\n          {\n            if(vm.mpHost === 'mp-baidu'){//百度 observer 在 setData callback 之后触发，直接忽略该 warn\n                return\n            }\n            //fixed by xxxxxx __next_tick_pending,uni://form-field 时不告警\n            if(\n                key === 'value' && \n                Array.isArray(vm.$options.behaviors) &&\n                vm.$options.behaviors.indexOf('uni://form-field') !== -1\n              ){\n              return\n            }\n            if(vm._getFormData){\n              return\n            }\n            var $parent = vm.$parent;\n            while($parent){\n              if($parent.__next_tick_pending){\n                return  \n              }\n              $parent = $parent.$parent;\n            }\n          }\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {}\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  toggleObserving(true);\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n     true && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (true) {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n       true && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  // #7573 disable dep collection when invoking data getters\n  pushTarget();\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  } finally {\n    popTarget();\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if ( true && getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (true) {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : createGetterInvoker(userDef);\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : createGetterInvoker(userDef.get)\n      : noop;\n    sharedPropertyDefinition.set = userDef.set || noop;\n  }\n  if ( true &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.SharedObject.target) {// fixed by xxxxxx\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction createGetterInvoker(fn) {\n  return function computedGetter () {\n    return fn.call(this, this)\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (true) {\n      if (typeof methods[key] !== 'function') {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has type \\\"\" + (typeof methods[key]) + \"\\\" in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  expOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(expOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (true) {\n    dataDef.set = function () {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      try {\n        cb.call(vm, watcher.value);\n      } catch (error) {\n        handleError(error, vm, (\"callback for immediate watcher \\\"\" + (watcher.expression) + \"\\\"\"));\n      }\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nvar uid$3 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$3++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      startTag = \"vue-perf-start:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (true) {\n      initProxy(vm);\n    } else {}\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    vm.mpHost !== 'mp-toutiao' && initInjections(vm); // resolve injections before data/props  \n    initState(vm);\n    vm.mpHost !== 'mp-toutiao' && initProvide(vm); // resolve provide after data/props\n    vm.mpHost !== 'mp-toutiao' && callHook(vm, 'created');      \n\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = latest[key];\n    }\n  }\n  return modified\n}\n\nfunction Vue (options) {\n  if ( true &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nrenderMixin(Vue);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if ( true && name) {\n      validateComponentName(name);\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if ( true && type === 'component') {\n          validateComponentName(id);\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\n\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    for (var key in this.cache) {\n      pruneCacheEntry(this.cache, key, this.keys);\n    }\n  },\n\n  mounted: function mounted () {\n    var this$1 = this;\n\n    this.$watch('include', function (val) {\n      pruneCache(this$1, function (name) { return matches(val, name); });\n    });\n    this.$watch('exclude', function (val) {\n      pruneCache(this$1, function (name) { return !matches(val, name); });\n    });\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (true) {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive$$1\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  // 2.6 explicit observable API\n  Vue.observable = function (obj) {\n    observe(obj);\n    return obj\n  };\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue);\n\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\n// expose FunctionalRenderContext for ssr runtime helper installation\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\n  value: FunctionalRenderContext\n});\n\nVue.version = '2.6.10';\n\n/**\n * https://raw.githubusercontent.com/Tencent/westore/master/packages/westore/utils/diff.js\n */\nvar ARRAYTYPE = '[object Array]';\nvar OBJECTTYPE = '[object Object]';\n// const FUNCTIONTYPE = '[object Function]'\n\nfunction diff(current, pre) {\n    var result = {};\n    syncKeys(current, pre);\n    _diff(current, pre, '', result);\n    return result\n}\n\nfunction syncKeys(current, pre) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE && rootPreType == OBJECTTYPE) {\n        if(Object.keys(current).length >= Object.keys(pre).length){\n            for (var key in pre) {\n                var currentValue = current[key];\n                if (currentValue === undefined) {\n                    current[key] = null;\n                } else {\n                    syncKeys(currentValue, pre[key]);\n                }\n            }\n        }\n    } else if (rootCurrentType == ARRAYTYPE && rootPreType == ARRAYTYPE) {\n        if (current.length >= pre.length) {\n            pre.forEach(function (item, index) {\n                syncKeys(current[index], item);\n            });\n        }\n    }\n}\n\nfunction _diff(current, pre, path, result) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE) {\n        if (rootPreType != OBJECTTYPE || Object.keys(current).length < Object.keys(pre).length) {\n            setResult(result, path, current);\n        } else {\n            var loop = function ( key ) {\n                var currentValue = current[key];\n                var preValue = pre[key];\n                var currentType = type(currentValue);\n                var preType = type(preValue);\n                if (currentType != ARRAYTYPE && currentType != OBJECTTYPE) {\n                    if (currentValue != pre[key]) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    }\n                } else if (currentType == ARRAYTYPE) {\n                    if (preType != ARRAYTYPE) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        if (currentValue.length < preValue.length) {\n                            setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                        } else {\n                            currentValue.forEach(function (item, index) {\n                                _diff(item, preValue[index], (path == '' ? '' : path + \".\") + key + '[' + index + ']', result);\n                            });\n                        }\n                    }\n                } else if (currentType == OBJECTTYPE) {\n                    if (preType != OBJECTTYPE || Object.keys(currentValue).length < Object.keys(preValue).length) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        for (var subKey in currentValue) {\n                            _diff(currentValue[subKey], preValue[subKey], (path == '' ? '' : path + \".\") + key + '.' + subKey, result);\n                        }\n                    }\n                }\n            };\n\n            for (var key in current) loop( key );\n        }\n    } else if (rootCurrentType == ARRAYTYPE) {\n        if (rootPreType != ARRAYTYPE) {\n            setResult(result, path, current);\n        } else {\n            if (current.length < pre.length) {\n                setResult(result, path, current);\n            } else {\n                current.forEach(function (item, index) {\n                    _diff(item, pre[index], path + '[' + index + ']', result);\n                });\n            }\n        }\n    } else {\n        setResult(result, path, current);\n    }\n}\n\nfunction setResult(result, k, v) {\n    // if (type(v) != FUNCTIONTYPE) {\n        result[k] = v;\n    // }\n}\n\nfunction type(obj) {\n    return Object.prototype.toString.call(obj)\n}\n\n/*  */\r\n\r\nfunction flushCallbacks$1(vm) {\r\n    if (vm.__next_tick_callbacks && vm.__next_tick_callbacks.length) {\r\n        if (Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\r\n            var mpInstance = vm.$scope;\r\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\r\n                ']:flushCallbacks[' + vm.__next_tick_callbacks.length + ']');\r\n        }\r\n        var copies = vm.__next_tick_callbacks.slice(0);\r\n        vm.__next_tick_callbacks.length = 0;\r\n        for (var i = 0; i < copies.length; i++) {\r\n            copies[i]();\r\n        }\r\n    }\r\n}\r\n\r\nfunction hasRenderWatcher(vm) {\r\n    return queue.find(function (watcher) { return vm._watcher === watcher; })\r\n}\r\n\r\nfunction nextTick$1(vm, cb) {\r\n    //1.nextTick 之前 已 setData 且 setData 还未回调完成\r\n    //2.nextTick 之前存在 render watcher\r\n    if (!vm.__next_tick_pending && !hasRenderWatcher(vm)) {\n        if(Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG){\n            var mpInstance = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\n                ']:nextVueTick');\n        }\r\n        return nextTick(cb, vm)\r\n    }else{\n        if(Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG){\n            var mpInstance$1 = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance$1.is || mpInstance$1.route) + '][' + vm._uid +\n                ']:nextMPTick');\n        }\n    }\r\n    var _resolve;\r\n    if (!vm.__next_tick_callbacks) {\r\n        vm.__next_tick_callbacks = [];\r\n    }\r\n    vm.__next_tick_callbacks.push(function () {\r\n        if (cb) {\r\n            try {\r\n                cb.call(vm);\r\n            } catch (e) {\r\n                handleError(e, vm, 'nextTick');\r\n            }\r\n        } else if (_resolve) {\r\n            _resolve(vm);\r\n        }\r\n    });\r\n    // $flow-disable-line\r\n    if (!cb && typeof Promise !== 'undefined') {\r\n        return new Promise(function (resolve) {\r\n            _resolve = resolve;\r\n        })\r\n    }\r\n}\n\n/*  */\r\n\r\nfunction cloneWithData(vm) {\r\n  // 确保当前 vm 所有数据被同步\r\n  var ret = Object.create(null);\r\n  var dataKeys = [].concat(\r\n    Object.keys(vm._data || {}),\r\n    Object.keys(vm._computedWatchers || {}));\r\n\r\n  dataKeys.reduce(function(ret, key) {\r\n    ret[key] = vm[key];\r\n    return ret\r\n  }, ret);\r\n  //TODO 需要把无用数据处理掉，比如 list=>l0 则 list 需要移除，否则多传输一份数据\r\n  Object.assign(ret, vm.$mp.data || {});\r\n  if (\r\n    Array.isArray(vm.$options.behaviors) &&\r\n    vm.$options.behaviors.indexOf('uni://form-field') !== -1\r\n  ) { //form-field\r\n    ret['name'] = vm.name;\r\n    ret['value'] = vm.value;\r\n  }\r\n\r\n  return JSON.parse(JSON.stringify(ret))\r\n}\r\n\r\nvar patch = function(oldVnode, vnode) {\n  var this$1 = this;\n\r\n  if (vnode === null) { //destroy\r\n    return\r\n  }\r\n  if (this.mpType === 'page' || this.mpType === 'component') {\r\n    var mpInstance = this.$scope;\r\n    var data = Object.create(null);\r\n    try {\r\n      data = cloneWithData(this);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n    data.__webviewId__ = mpInstance.data.__webviewId__;\r\n    var mpData = Object.create(null);\r\n    Object.keys(data).forEach(function (key) { //仅同步 data 中有的数据\r\n      mpData[key] = mpInstance.data[key];\r\n    });\r\n    var diffData = diff(data, mpData);\r\n    if (Object.keys(diffData).length) {\r\n      if (Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\r\n        console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + this._uid +\r\n          ']差量更新',\r\n          JSON.stringify(diffData));\r\n      }\r\n      this.__next_tick_pending = true;\r\n      mpInstance.setData(diffData, function () {\r\n        this$1.__next_tick_pending = false;\r\n        flushCallbacks$1(this$1);\r\n      });\r\n    } else {\r\n      flushCallbacks$1(this);\r\n    }\r\n  }\r\n};\n\n/*  */\n\nfunction createEmptyRender() {\n\n}\n\nfunction mountComponent$1(\n  vm,\n  el,\n  hydrating\n) {\n  if (!vm.mpType) {//main.js 中的 new Vue\n    return vm\n  }\n  if (vm.mpType === 'app') {\n    vm.$options.render = createEmptyRender;\n  }\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyRender;\n    if (true) {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  \n  vm.mpHost !== 'mp-toutiao' && callHook(vm, 'beforeMount');\n\n  var updateComponent = function () {\n    vm._update(vm._render(), hydrating);\n  };\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, {\n    before: function before() {\n      if (vm._isMounted && !vm._isDestroyed) {\n        callHook(vm, 'beforeUpdate');\n      }\n    }\n  }, true /* isRenderWatcher */);\n  hydrating = false;\n  return vm\n}\n\n/*  */\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/*  */\r\n\r\nvar MP_METHODS = ['createSelectorQuery', 'createIntersectionObserver', 'selectAllComponents', 'selectComponent'];\r\n\r\nfunction getTarget(obj, path) {\r\n  var parts = path.split('.');\r\n  var key = parts[0];\r\n  if (key.indexOf('__$n') === 0) { //number index\r\n    key = parseInt(key.replace('__$n', ''));\r\n  }\r\n  if (parts.length === 1) {\r\n    return obj[key]\r\n  }\r\n  return getTarget(obj[key], parts.slice(1).join('.'))\r\n}\r\n\r\nfunction internalMixin(Vue) {\r\n\r\n  Vue.config.errorHandler = function(err) {\r\n    console.error(err);\r\n  };\r\n\r\n  var oldEmit = Vue.prototype.$emit;\r\n\r\n  Vue.prototype.$emit = function(event) {\r\n    if (this.$scope && event) {\r\n      this.$scope['triggerEvent'](event, {\r\n        __args__: toArray(arguments, 1)\r\n      });\r\n    }\r\n    return oldEmit.apply(this, arguments)\r\n  };\r\n\r\n  Vue.prototype.$nextTick = function(fn) {\r\n    return nextTick$1(this, fn)\r\n  };\r\n\r\n  MP_METHODS.forEach(function (method) {\r\n    Vue.prototype[method] = function(args) {\r\n      if (this.$scope) {\r\n        return this.$scope[method](args)\r\n      }\r\n    };\r\n  });\r\n\r\n  Vue.prototype.__init_provide = initProvide;\r\n\r\n  Vue.prototype.__init_injections = initInjections;\r\n\r\n  Vue.prototype.__call_hook = function(hook, args) {\r\n    var vm = this;\r\n    // #7573 disable dep collection when invoking lifecycle hooks\r\n    pushTarget();\r\n    var handlers = vm.$options[hook];\r\n    var info = hook + \" hook\";\r\n    var ret;\r\n    if (handlers) {\r\n      for (var i = 0, j = handlers.length; i < j; i++) {\r\n        ret = invokeWithErrorHandling(handlers[i], vm, args ? [args] : null, vm, info);\r\n      }\r\n    }\r\n    if (vm._hasHookEvent) {\r\n      vm.$emit('hook:' + hook);\r\n    }\r\n    popTarget();\r\n    return ret\r\n  };\r\n\r\n  Vue.prototype.__set_model = function(target, key, value, modifiers) {\r\n    if (Array.isArray(modifiers)) {\r\n      if (modifiers.indexOf('trim') !== -1) {\r\n        value = value.trim();\r\n      }\r\n      if (modifiers.indexOf('number') !== -1) {\r\n        value = this._n(value);\r\n      }\r\n    }\r\n    if (!target) {\r\n      target = this;\r\n    }\r\n    target[key] = value;\r\n  };\r\n\r\n  Vue.prototype.__set_sync = function(target, key, value) {\r\n    if (!target) {\r\n      target = this;\r\n    }\r\n    target[key] = value;\r\n  };\r\n\r\n  Vue.prototype.__get_orig = function(item) {\r\n    if (isPlainObject(item)) {\r\n      return item['$orig'] || item\r\n    }\r\n    return item\r\n  };\r\n\r\n  Vue.prototype.__get_value = function(dataPath, target) {\r\n    return getTarget(target || this, dataPath)\r\n  };\r\n\r\n\r\n  Vue.prototype.__get_class = function(dynamicClass, staticClass) {\r\n    return renderClass(staticClass, dynamicClass)\r\n  };\r\n\r\n  Vue.prototype.__get_style = function(dynamicStyle, staticStyle) {\r\n    if (!dynamicStyle && !staticStyle) {\r\n      return ''\r\n    }\r\n    var dynamicStyleObj = normalizeStyleBinding(dynamicStyle);\r\n    var styleObj = staticStyle ? extend(staticStyle, dynamicStyleObj) : dynamicStyleObj;\r\n    return Object.keys(styleObj).map(function (name) { return ((hyphenate(name)) + \":\" + (styleObj[name])); }).join(';')\r\n  };\r\n\r\n  Vue.prototype.__map = function(val, iteratee) {\r\n    //TODO 暂不考虑 string,number\r\n    var ret, i, l, keys, key;\r\n    if (Array.isArray(val)) {\r\n      ret = new Array(val.length);\r\n      for (i = 0, l = val.length; i < l; i++) {\r\n        ret[i] = iteratee(val[i], i);\r\n      }\r\n      return ret\r\n    } else if (isObject(val)) {\r\n      keys = Object.keys(val);\r\n      ret = Object.create(null);\r\n      for (i = 0, l = keys.length; i < l; i++) {\r\n        key = keys[i];\r\n        ret[key] = iteratee(val[key], key, i);\r\n      }\r\n      return ret\r\n    }\r\n    return []\r\n  };\r\n\r\n}\n\n/*  */\r\n\r\nvar LIFECYCLE_HOOKS$1 = [\r\n    //App\r\n    'onLaunch',\r\n    'onShow',\r\n    'onHide',\r\n    'onUniNViewMessage',\n    'onError',\r\n    //Page\r\n    'onLoad',\r\n    // 'onShow',\r\n    'onReady',\r\n    // 'onHide',\r\n    'onUnload',\r\n    'onPullDownRefresh',\r\n    'onReachBottom',\r\n    'onTabItemTap',\r\n    'onShareAppMessage',\n    'onResize',\r\n    'onPageScroll',\r\n    'onNavigationBarButtonTap',\r\n    'onBackPress',\r\n    'onNavigationBarSearchInputChanged',\r\n    'onNavigationBarSearchInputConfirmed',\r\n    'onNavigationBarSearchInputClicked',\r\n    //Component\r\n    // 'onReady', // 兼容旧版本，应该移除该事件\r\n    'onPageShow',\r\n    'onPageHide',\r\n    'onPageResize'\r\n];\r\nfunction lifecycleMixin$1(Vue) {\r\n\r\n    //fixed vue-class-component\r\n    var oldExtend = Vue.extend;\r\n    Vue.extend = function(extendOptions) {\r\n        extendOptions = extendOptions || {};\r\n\r\n        var methods = extendOptions.methods;\r\n        if (methods) {\r\n            Object.keys(methods).forEach(function (methodName) {\r\n                if (LIFECYCLE_HOOKS$1.indexOf(methodName)!==-1) {\r\n                    extendOptions[methodName] = methods[methodName];\r\n                    delete methods[methodName];\r\n                }\r\n            });\r\n        }\r\n\r\n        return oldExtend.call(this, extendOptions)\r\n    };\r\n\r\n    var strategies = Vue.config.optionMergeStrategies;\r\n    var mergeHook = strategies.created;\r\n    LIFECYCLE_HOOKS$1.forEach(function (hook) {\r\n        strategies[hook] = mergeHook;\r\n    });\r\n\r\n    Vue.prototype.__lifecycle_hooks__ = LIFECYCLE_HOOKS$1;\r\n}\n\n/*  */\r\n\n// install platform patch function\r\nVue.prototype.__patch__ = patch;\r\n\r\n// public mount method\r\nVue.prototype.$mount = function(\r\n    el ,\r\n    hydrating \r\n) {\r\n    return mountComponent$1(this, el, hydrating)\r\n};\r\n\r\nlifecycleMixin$1(Vue);\r\ninternalMixin(Vue);\n\n/*  */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Vue);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),

/***/ 33:
/*!********************************************************!*\
  !*** D:/1zxyWork/daibeih5/daibei3.0/common/api/api.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni, __f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;\nvar _jsencryptMin = _interopRequireDefault(__webpack_require__(/*! ../../common/js/jsencrypt.min.js */ 34));\n\nvar _jsMd = _interopRequireDefault(__webpack_require__(/*! js-md5 */ 35));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} //jsencrypt插件\n//MD5加密\n//线上域名\nvar baseURL = 'http://ts.rong298.cn'; //本地-韦家园\n//var baseURL = 'http://dai3q.io'\n//本地\n//var baseURL = 'http://192.168.1.17:81'\n// 通过接口获取数据\nfunction apiPost(url, parameter, data, method, callback) {\n  uni.request({\n    url: baseURL + url,\n    header: {\n      'Content-Type': 'application/x-www-form-urlencoded' },\n\n    data: data,\n    method: method || 'post',\n    success: function success(res) {\n      var code = res.data.code;\n\n\n\n      switch (parseInt(code)) {\n        case 0:\n          callback(true, res.data, code);\n          break;\n        case 301:\n          console.log(__f__(\"强制重定向url\", \" at common\\\\api\\\\api.js:30\"));\n          callback(false, res.data, code);\n          break;\n        case 401:\n          console.log(__f__(\"身份信息已过期\", \" at common\\\\api\\\\api.js:34\"));\n\n\n\n          uni.navigateTo({\n            url: '/pages/login/login' });\n\n          callback(false, res.data, code);\n          break;\n        case 403:\n          console.log(__f__(\"非法请求\", \" at common\\\\api\\\\api.js:44\"));\n          callback(false, res.data, code);\n          break;\n        case 404:\n          console.log(__f__(\"请求路径存在，请检查url\", \" at common\\\\api\\\\api.js:48\"));\n          callback(false, res.data, code);\n          break;\n        case 405:\n          console.log(__f__(\"请求参数错误\", \" at common\\\\api\\\\api.js:52\"));\n          callback(false, res.data, code);\n          break;\n        case 500:\n          console.log(__f__(\"服务器内部错误\", \" at common\\\\api\\\\api.js:56\"));\n          callback(false, res.data, code);\n          break;\n        case 503:\n          console.log(__f__(\"服务器繁忙\", \" at common\\\\api\\\\api.js:60\"));\n          callback(false, res.data, code);\n          break;\n        default:\n          console.log(__f__(\"未知错误\", \" at common\\\\api\\\\api.js:64\"));\n          callback(false, res.data, code);}\n\n    },\n    fail: function fail(res) {\n      console.log(__f__(res.data, \" at common\\\\api\\\\api.js:69\"));\n    } });\n\n\n}var _default =\n{\n  apiPost: apiPost };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tbW9uL2FwaS9hcGkuanMiXSwibmFtZXMiOlsiYmFzZVVSTCIsImFwaVBvc3QiLCJ1cmwiLCJwYXJhbWV0ZXIiLCJkYXRhIiwibWV0aG9kIiwiY2FsbGJhY2siLCJ1bmkiLCJyZXF1ZXN0IiwiaGVhZGVyIiwic3VjY2VzcyIsInJlcyIsImNvZGUiLCJwYXJzZUludCIsImNvbnNvbGUiLCJsb2ciLCJuYXZpZ2F0ZVRvIiwiZmFpbCJdLCJtYXBwaW5ncyI6IjtBQUNBOztBQUVBLDBFLDhGQUhBO0FBRUE7QUFFQTtBQUNBLElBQUlBLE9BQU8sR0FBRyxzQkFBZCxDLENBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLE9BQVQsQ0FBaUJDLEdBQWpCLEVBQXNCQyxTQUF0QixFQUFpQ0MsSUFBakMsRUFBdUNDLE1BQXZDLEVBQStDQyxRQUEvQyxFQUF5RDtBQUN4REMsS0FBRyxDQUFDQyxPQUFKLENBQVk7QUFDWE4sT0FBRyxFQUFFRixPQUFPLEdBQUdFLEdBREo7QUFFWE8sVUFBTSxFQUFFO0FBQ1Asc0JBQWdCLG1DQURULEVBRkc7O0FBS1hMLFFBQUksRUFBRUEsSUFMSztBQU1YQyxVQUFNLEVBQUVBLE1BQU0sSUFBSSxNQU5QO0FBT1hLLFdBQU8sRUFBRSxpQkFBQ0MsR0FBRCxFQUFTO0FBQ2pCLFVBQUlDLElBQUksR0FBR0QsR0FBRyxDQUFDUCxJQUFKLENBQVNRLElBQXBCOzs7O0FBSUEsY0FBUUMsUUFBUSxDQUFDRCxJQUFELENBQWhCO0FBQ0MsYUFBSyxDQUFMO0FBQ0NOLGtCQUFRLENBQUMsSUFBRCxFQUFPSyxHQUFHLENBQUNQLElBQVgsRUFBaUJRLElBQWpCLENBQVI7QUFDQTtBQUNELGFBQUssR0FBTDtBQUNDRSxpQkFBTyxDQUFDQyxHQUFSLE9BQVksVUFBWjtBQUNBVCxrQkFBUSxDQUFDLEtBQUQsRUFBUUssR0FBRyxDQUFDUCxJQUFaLEVBQWtCUSxJQUFsQixDQUFSO0FBQ0E7QUFDRCxhQUFLLEdBQUw7QUFDQ0UsaUJBQU8sQ0FBQ0MsR0FBUixPQUFZLFNBQVo7Ozs7QUFJQVIsYUFBRyxDQUFDUyxVQUFKLENBQWU7QUFDZGQsZUFBRyxFQUFFLG9CQURTLEVBQWY7O0FBR0FJLGtCQUFRLENBQUMsS0FBRCxFQUFRSyxHQUFHLENBQUNQLElBQVosRUFBa0JRLElBQWxCLENBQVI7QUFDQTtBQUNELGFBQUssR0FBTDtBQUNDRSxpQkFBTyxDQUFDQyxHQUFSLE9BQVksTUFBWjtBQUNBVCxrQkFBUSxDQUFDLEtBQUQsRUFBUUssR0FBRyxDQUFDUCxJQUFaLEVBQWtCUSxJQUFsQixDQUFSO0FBQ0E7QUFDRCxhQUFLLEdBQUw7QUFDQ0UsaUJBQU8sQ0FBQ0MsR0FBUixPQUFZLGVBQVo7QUFDQVQsa0JBQVEsQ0FBQyxLQUFELEVBQVFLLEdBQUcsQ0FBQ1AsSUFBWixFQUFrQlEsSUFBbEIsQ0FBUjtBQUNBO0FBQ0QsYUFBSyxHQUFMO0FBQ0NFLGlCQUFPLENBQUNDLEdBQVIsT0FBWSxRQUFaO0FBQ0FULGtCQUFRLENBQUMsS0FBRCxFQUFRSyxHQUFHLENBQUNQLElBQVosRUFBa0JRLElBQWxCLENBQVI7QUFDQTtBQUNELGFBQUssR0FBTDtBQUNDRSxpQkFBTyxDQUFDQyxHQUFSLE9BQVksU0FBWjtBQUNBVCxrQkFBUSxDQUFDLEtBQUQsRUFBUUssR0FBRyxDQUFDUCxJQUFaLEVBQWtCUSxJQUFsQixDQUFSO0FBQ0E7QUFDRCxhQUFLLEdBQUw7QUFDQ0UsaUJBQU8sQ0FBQ0MsR0FBUixPQUFZLE9BQVo7QUFDQVQsa0JBQVEsQ0FBQyxLQUFELEVBQVFLLEdBQUcsQ0FBQ1AsSUFBWixFQUFrQlEsSUFBbEIsQ0FBUjtBQUNBO0FBQ0Q7QUFDQ0UsaUJBQU8sQ0FBQ0MsR0FBUixPQUFZLE1BQVo7QUFDQVQsa0JBQVEsQ0FBQyxLQUFELEVBQVFLLEdBQUcsQ0FBQ1AsSUFBWixFQUFrQlEsSUFBbEIsQ0FBUixDQXhDRjs7QUEwQ0EsS0F0RFU7QUF1RFhLLFFBQUksRUFBRSxjQUFDTixHQUFELEVBQVM7QUFDZEcsYUFBTyxDQUFDQyxHQUFSLE9BQVlKLEdBQUcsQ0FBQ1AsSUFBaEI7QUFDQSxLQXpEVSxFQUFaOzs7QUE0REEsQztBQUNjO0FBQ2RILFNBQU8sRUFBUEEsT0FEYyxFIiwiZmlsZSI6IjMzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy9qc2VuY3J5cHTmj5Lku7ZcclxuaW1wb3J0IEpTRW5jcnlwdCBmcm9tICcuLi8uLi9jb21tb24vanMvanNlbmNyeXB0Lm1pbi5qcyc7XHJcbi8vTUQ15Yqg5a+GXHJcbmltcG9ydCBtZDUgZnJvbSAnanMtbWQ1JztcclxuLy/nur/kuIrln5/lkI1cclxudmFyIGJhc2VVUkwgPSAnaHR0cDovL3RzLnJvbmcyOTguY24nXHJcbi8v5pys5ZywLemfpuWutuWbrVxyXG4vL3ZhciBiYXNlVVJMID0gJ2h0dHA6Ly9kYWkzcS5pbydcclxuLy/mnKzlnLBcclxuLy92YXIgYmFzZVVSTCA9ICdodHRwOi8vMTkyLjE2OC4xLjE3OjgxJ1xyXG4vLyDpgJrov4fmjqXlj6Pojrflj5bmlbDmja5cclxuZnVuY3Rpb24gYXBpUG9zdCh1cmwsIHBhcmFtZXRlciwgZGF0YSwgbWV0aG9kLCBjYWxsYmFjaykge1xyXG5cdHVuaS5yZXF1ZXN0KHtcclxuXHRcdHVybDogYmFzZVVSTCArIHVybCxcclxuXHRcdGhlYWRlcjoge1xyXG5cdFx0XHQnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsXHJcblx0XHR9LFxyXG5cdFx0ZGF0YTogZGF0YSxcclxuXHRcdG1ldGhvZDogbWV0aG9kIHx8ICdwb3N0JyxcclxuXHRcdHN1Y2Nlc3M6IChyZXMpID0+IHtcclxuXHRcdFx0dmFyIGNvZGUgPSByZXMuZGF0YS5jb2RlO1xyXG5cclxuXHJcblxyXG5cdFx0XHRzd2l0Y2ggKHBhcnNlSW50KGNvZGUpKSB7XHJcblx0XHRcdFx0Y2FzZSAwOlxyXG5cdFx0XHRcdFx0Y2FsbGJhY2sodHJ1ZSwgcmVzLmRhdGEsIGNvZGUpXHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRjYXNlIDMwMTpcclxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKFwi5by65Yi26YeN5a6a5ZCRdXJsXCIpO1xyXG5cdFx0XHRcdFx0Y2FsbGJhY2soZmFsc2UsIHJlcy5kYXRhLCBjb2RlKVxyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0Y2FzZSA0MDE6XHJcblx0XHRcdFx0XHRjb25zb2xlLmxvZyhcIui6q+S7veS/oeaBr+W3sui/h+acn1wiKTtcclxuXHJcblxyXG5cclxuXHRcdFx0XHRcdHVuaS5uYXZpZ2F0ZVRvKHtcclxuXHRcdFx0XHRcdFx0dXJsOiAnL3BhZ2VzL2xvZ2luL2xvZ2luJ1xyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0XHRcdGNhbGxiYWNrKGZhbHNlLCByZXMuZGF0YSwgY29kZSlcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgNDAzOlxyXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coXCLpnZ7ms5Xor7fmsYJcIik7XHJcblx0XHRcdFx0XHRjYWxsYmFjayhmYWxzZSwgcmVzLmRhdGEsIGNvZGUpXHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRjYXNlIDQwNDpcclxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKFwi6K+35rGC6Lev5b6E5a2Y5Zyo77yM6K+35qOA5p+ldXJsXCIpO1xyXG5cdFx0XHRcdFx0Y2FsbGJhY2soZmFsc2UsIHJlcy5kYXRhLCBjb2RlKVxyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0Y2FzZSA0MDU6XHJcblx0XHRcdFx0XHRjb25zb2xlLmxvZyhcIuivt+axguWPguaVsOmUmeivr1wiKTtcclxuXHRcdFx0XHRcdGNhbGxiYWNrKGZhbHNlLCByZXMuZGF0YSwgY29kZSlcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgNTAwOlxyXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coXCLmnI3liqHlmajlhoXpg6jplJnor69cIik7XHJcblx0XHRcdFx0XHRjYWxsYmFjayhmYWxzZSwgcmVzLmRhdGEsIGNvZGUpXHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRjYXNlIDUwMzpcclxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKFwi5pyN5Yqh5Zmo57mB5b+ZXCIpO1xyXG5cdFx0XHRcdFx0Y2FsbGJhY2soZmFsc2UsIHJlcy5kYXRhLCBjb2RlKVxyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0ZGVmYXVsdDpcclxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKFwi5pyq55+l6ZSZ6K+vXCIpO1xyXG5cdFx0XHRcdFx0Y2FsbGJhY2soZmFsc2UsIHJlcy5kYXRhLCBjb2RlKVxyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0ZmFpbDogKHJlcykgPT4ge1xyXG5cdFx0XHRjb25zb2xlLmxvZyhyZXMuZGF0YSk7XHJcblx0XHR9XHJcblx0fSk7XHJcblxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuXHRhcGlQb3N0XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///33\n");

/***/ }),

/***/ 34:
/*!*****************************************************************!*\
  !*** D:/1zxyWork/daibeih5/daibei3.0/common/js/jsencrypt.min.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {!function (t, e) {\n   true ? e(exports) : undefined;\n}(void 0, function (t) {\n  \"use strict\";\n  //--------------------- 这里开始添加---------------------\n  // 用来替换 navigator2\n  var navigator2 = {\n    appName: 'Netscape',\n    userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1' };\n\n  //  用来替换window2\n  var window2 = {\n    ASN1: null,\n    Base64: null,\n    Hex: null,\n    crypto: null,\n    href: null };\n\n  //--------------------- 这里结束添加---------------------\n  var e = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n\n  function a(t) {\n    return e.charAt(t);\n  }\n\n  function i(t, e) {\n    return t & e;\n  }\n\n  function u(t, e) {\n    return t | e;\n  }\n\n  function r(t, e) {\n    return t ^ e;\n  }\n\n  function n(t, e) {\n    return t & ~e;\n  }\n\n  function s(t) {\n    if (0 == t) return -1;\n    var e = 0;\n    return 0 == (65535 & t) && (t >>= 16, e += 16), 0 == (255 & t) && (t >>= 8, e += 8), 0 == (15 & t) && (t >>= 4, e +=\n    4), 0 == (3 & t) && (t >>= 2, e += 2), 0 == (1 & t) && ++e, e;\n  }\n\n  function o(t) {\n    for (var e = 0; 0 != t;) {t &= t - 1, ++e;}\n    return e;\n  }\n  var h = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n  function c(t) {\n    var e,i,r = \"\";\n    for (e = 0; e + 3 <= t.length; e += 3) {i = parseInt(t.substring(e, e + 3), 16), r += h.charAt(i >> 6) + h.charAt(63 &\n      i);}\n    for (e + 1 == t.length ? (i = parseInt(t.substring(e, e + 1), 16), r += h.charAt(i << 2)) : e + 2 == t.length && (i =\n    parseInt(t.substring(e, e + 2), 16), r += h.charAt(i >> 2) + h.charAt((3 & i) << 4)); 0 < (3 & r.length);) {r +=\n      \"=\";}\n    return r;\n  }\n\n  function f(t) {\n    var e,i = \"\",\n    r = 0,\n    n = 0;\n    for (e = 0; e < t.length && \"=\" != t.charAt(e); ++e) {\n      var s = h.indexOf(t.charAt(e));\n      s < 0 || (0 == r ? (i += a(s >> 2), n = 3 & s, r = 1) : 1 == r ? (i += a(n << 2 | s >> 4), n = 15 & s, r = 2) : 2 ==\n      r ? (i += a(n), i += a(s >> 2), n = 3 & s, r = 3) : (i += a(n << 2 | s >> 4), i += a(15 & s), r = 0));\n    }\n    return 1 == r && (i += a(n << 2)), i;\n  }\n  var l,_p = function p(t, e) {\n    return (_p = Object.setPrototypeOf || {\n      __proto__: [] } instanceof\n\n    Array && function (t, e) {\n      t.__proto__ = e;\n    } || function (t, e) {\n      for (var i in e) {e.hasOwnProperty(i) && (t[i] = e[i]);}\n    })(t, e);\n  };\n  var g,d = function d(t) {\n    var e;\n    if (void 0 === l) {\n      var i = \"0123456789ABCDEF\",\n      r = \" \\f\\n\\r\\t\\xA0\\u2028\\u2029\";\n      for (l = {}, e = 0; e < 16; ++e) {l[i.charAt(e)] = e;}\n      for (i = i.toLowerCase(), e = 10; e < 16; ++e) {l[i.charAt(e)] = e;}\n      for (e = 0; e < r.length; ++e) {l[r.charAt(e)] = -1;}\n    }\n    var n = [],\n    s = 0,\n    o = 0;\n    for (e = 0; e < t.length; ++e) {\n      var h = t.charAt(e);\n      if (\"=\" == h) break;\n      if (-1 != (h = l[h])) {\n        if (void 0 === h) throw new Error(\"Illegal character at offset \" + e);\n        s |= h, 2 <= ++o ? (n[n.length] = s, o = s = 0) : s <<= 4;\n      }\n    }\n    if (o) throw new Error(\"Hex encoding incomplete: 4 bits missing\");\n    return n;\n  },\n  v = {\n    decode: function decode(t) {\n      var e;\n      if (void 0 === g) {\n        var i = \"= \\f\\n\\r\\t\\xA0\\u2028\\u2029\";\n        for (g = Object.create(null), e = 0; e < 64; ++e) {g[\n          \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".charAt(e)] = e;}\n        for (e = 0; e < i.length; ++e) {g[i.charAt(e)] = -1;}\n      }\n      var r = [],\n      n = 0,\n      s = 0;\n      for (e = 0; e < t.length; ++e) {\n        var o = t.charAt(e);\n        if (\"=\" == o) break;\n        if (-1 != (o = g[o])) {\n          if (void 0 === o) throw new Error(\"Illegal character at offset \" + e);\n          n |= o, 4 <= ++s ? (r[r.length] = n >> 16, r[r.length] = n >> 8 & 255, r[r.length] = 255 & n, s = n = 0) : n <<=\n          6;\n        }\n      }\n      switch (s) {\n        case 1:\n          throw new Error(\"Base64 encoding incomplete: at least 2 bits missing\");\n        case 2:\n          r[r.length] = n >> 10;\n          break;\n        case 3:\n          r[r.length] = n >> 16, r[r.length] = n >> 8 & 255;}\n\n      return r;\n    },\n    re: /-----BEGIN [^-]+-----([A-Za-z0-9+\\/=\\s]+)-----END [^-]+-----|begin-base64[^\\n]+\\n([A-Za-z0-9+\\/=\\s]+)====/,\n    unarmor: function unarmor(t) {\n      var e = v.re.exec(t);\n      if (e)\n      if (e[1]) t = e[1];else\n      {\n        if (!e[2]) throw new Error(\"RegExp out of sync\");\n        t = e[2];\n      }return v.decode(t);\n    } },\n\n  m = 1e13,\n  y = function () {\n    function t(t) {\n      this.buf = [+t || 0];\n    }\n    return t.prototype.mulAdd = function (t, e) {\n      var i,r,n = this.buf,\n      s = n.length;\n      for (i = 0; i < s; ++i) {(r = n[i] * t + e) < m ? e = 0 : r -= (e = 0 | r / m) * m, n[i] = r;}\n      0 < e && (n[i] = e);\n    }, t.prototype.sub = function (t) {\n      var e,i,r = this.buf,\n      n = r.length;\n      for (e = 0; e < n; ++e) {(i = r[e] - t) < 0 ? (i += m, t = 1) : t = 0, r[e] = i;}\n      for (; 0 === r[r.length - 1];) {r.pop();}\n    }, t.prototype.toString = function (t) {\n      if (10 != (t || 10)) throw new Error(\"only base 10 is supported\");\n      for (var e = this.buf, i = e[e.length - 1].toString(), r = e.length - 2; 0 <= r; --r) {i += (m + e[r]).toString().substring(\n        1);}\n      return i;\n    }, t.prototype.valueOf = function () {\n      for (var t = this.buf, e = 0, i = t.length - 1; 0 <= i; --i) {e = e * m + t[i];}\n      return e;\n    }, t.prototype.simplify = function () {\n      var t = this.buf;\n      return 1 == t.length ? t[0] : this;\n    }, t;\n  }(),\n  b = \"…\",\n  T =\n  /^(\\d\\d)(0[1-9]|1[0-2])(0[1-9]|[12]\\d|3[01])([01]\\d|2[0-3])(?:([0-5]\\d)(?:([0-5]\\d)(?:[.,](\\d{1,3}))?)?)?(Z|[-+](?:[0]\\d|1[0-2])([0-5]\\d)?)?$/,\n  S =\n  /^(\\d\\d\\d\\d)(0[1-9]|1[0-2])(0[1-9]|[12]\\d|3[01])([01]\\d|2[0-3])(?:([0-5]\\d)(?:([0-5]\\d)(?:[.,](\\d{1,3}))?)?)?(Z|[-+](?:[0]\\d|1[0-2])([0-5]\\d)?)?$/;\n\n  function E(t, e) {\n    return t.length > e && (t = t.substring(0, e) + b), t;\n  }\n  var w,D = function () {\n    function i(t, e) {\n      this.hexDigits = \"0123456789ABCDEF\", t instanceof i ? (this.enc = t.enc, this.pos = t.pos) : (this.enc = t, this.pos =\n      e);\n    }\n    return i.prototype.get = function (t) {\n      if (void 0 === t && (t = this.pos++), t >= this.enc.length) throw new Error(\"Requesting byte offset \" + t +\n      \" on a stream of length \" + this.enc.length);\n      return \"string\" == typeof this.enc ? this.enc.charCodeAt(t) : this.enc[t];\n    }, i.prototype.hexByte = function (t) {\n      return this.hexDigits.charAt(t >> 4 & 15) + this.hexDigits.charAt(15 & t);\n    }, i.prototype.hexDump = function (t, e, i) {\n      for (var r = \"\", n = t; n < e; ++n) {\n        if (r += this.hexByte(this.get(n)), !0 !== i) switch (15 & n) {\n          case 7:\n            r += \"  \";\n            break;\n          case 15:\n            r += \"\\n\";\n            break;\n          default:\n            r += \" \";}}\n\n      return r;\n    }, i.prototype.isASCII = function (t, e) {\n      for (var i = t; i < e; ++i) {\n        var r = this.get(i);\n        if (r < 32 || 176 < r) return !1;\n      }\n      return !0;\n    }, i.prototype.parseStringISO = function (t, e) {\n      for (var i = \"\", r = t; r < e; ++r) {i += String.fromCharCode(this.get(r));}\n      return i;\n    }, i.prototype.parseStringUTF = function (t, e) {\n      for (var i = \"\", r = t; r < e;) {\n        var n = this.get(r++);\n        i += n < 128 ? String.fromCharCode(n) : 191 < n && n < 224 ? String.fromCharCode((31 & n) << 6 | 63 & this.get(r++)) :\n        String.fromCharCode((15 & n) << 12 | (63 & this.get(r++)) << 6 | 63 & this.get(r++));\n      }\n      return i;\n    }, i.prototype.parseStringBMP = function (t, e) {\n      for (var i, r, n = \"\", s = t; s < e;) {i = this.get(s++), r = this.get(s++), n += String.fromCharCode(i << 8 | r);}\n      return n;\n    }, i.prototype.parseTime = function (t, e, i) {\n      var r = this.parseStringISO(t, e),\n      n = (i ? T : S).exec(r);\n      return n ? (i && (n[1] = +n[1], n[1] += +n[1] < 70 ? 2e3 : 1900), r = n[1] + \"-\" + n[2] + \"-\" + n[3] + \" \" + n[4],\n      n[5] && (r += \":\" + n[5], n[6] && (r += \":\" + n[6], n[7] && (r += \".\" + n[7]))), n[8] && (r += \" UTC\", \"Z\" != n[\n      8] && (r += n[8], n[9] && (r += \":\" + n[9]))), r) : \"Unrecognized time: \" + r;\n    }, i.prototype.parseInteger = function (t, e) {\n      for (var i, r = this.get(t), n = 127 < r, s = n ? 255 : 0, o = \"\"; r == s && ++t < e;) {r = this.get(t);}\n      if (0 === (i = e - t)) return n ? -1 : 0;\n      if (4 < i) {\n        for (o = r, i <<= 3; 0 == (128 & (+o ^ s));) {o = +o << 1, --i;}\n        o = \"(\" + i + \" bit)\\n\";\n      }\n      n && (r -= 256);\n      for (var h = new y(r), a = t + 1; a < e; ++a) {h.mulAdd(256, this.get(a));}\n      return o + h.toString();\n    }, i.prototype.parseBitString = function (t, e, i) {\n      for (var r = this.get(t), n = \"(\" + ((e - t - 1 << 3) - r) + \" bit)\\n\", s = \"\", o = t + 1; o < e; ++o) {\n        for (var h = this.get(o), a = o == e - 1 ? r : 0, u = 7; a <= u; --u) {s += h >> u & 1 ? \"1\" : \"0\";}\n        if (s.length > i) return n + E(s, i);\n      }\n      return n + s;\n    }, i.prototype.parseOctetString = function (t, e, i) {\n      if (this.isASCII(t, e)) return E(this.parseStringISO(t, e), i);\n      var r = e - t,\n      n = \"(\" + r + \" byte)\\n\";\n      (i /= 2) < r && (e = t + i);\n      for (var s = t; s < e; ++s) {n += this.hexByte(this.get(s));}\n      return i < r && (n += b), n;\n    }, i.prototype.parseOID = function (t, e, i) {\n      for (var r = \"\", n = new y(), s = 0, o = t; o < e; ++o) {\n        var h = this.get(o);\n        if (n.mulAdd(128, 127 & h), s += 7, !(128 & h)) {\n          if (\"\" === r) {\n            if ((n = n.simplify()) instanceof y) n.sub(80), r = \"2.\" + n.toString();else\n            {\n              var a = n < 80 ? n < 40 ? 0 : 1 : 2;\n              r = a + \".\" + (n - 40 * a);\n            }} else\n          r += \".\" + n.toString();\n          if (r.length > i) return E(r, i);\n          n = new y(), s = 0;\n        }\n      }\n      return 0 < s && (r += \".incomplete\"), r;\n    }, i;\n  }(),\n  x = function () {\n    function c(t, e, i, r, n) {\n      if (!(r instanceof R)) throw new Error(\"Invalid tag value.\");\n      this.stream = t, this.header = e, this.length = i, this.tag = r, this.sub = n;\n    }\n    return c.prototype.typeName = function () {\n      switch (this.tag.tagClass) {\n        case 0:\n          switch (this.tag.tagNumber) {\n            case 0:\n              return \"EOC\";\n            case 1:\n              return \"BOOLEAN\";\n            case 2:\n              return \"INTEGER\";\n            case 3:\n              return \"BIT_STRING\";\n            case 4:\n              return \"OCTET_STRING\";\n            case 5:\n              return \"NULL\";\n            case 6:\n              return \"OBJECT_IDENTIFIER\";\n            case 7:\n              return \"ObjectDescriptor\";\n            case 8:\n              return \"EXTERNAL\";\n            case 9:\n              return \"REAL\";\n            case 10:\n              return \"ENUMERATED\";\n            case 11:\n              return \"EMBEDDED_PDV\";\n            case 12:\n              return \"UTF8String\";\n            case 16:\n              return \"SEQUENCE\";\n            case 17:\n              return \"SET\";\n            case 18:\n              return \"NumericString\";\n            case 19:\n              return \"PrintableString\";\n            case 20:\n              return \"TeletexString\";\n            case 21:\n              return \"VideotexString\";\n            case 22:\n              return \"IA5String\";\n            case 23:\n              return \"UTCTime\";\n            case 24:\n              return \"GeneralizedTime\";\n            case 25:\n              return \"GraphicString\";\n            case 26:\n              return \"VisibleString\";\n            case 27:\n              return \"GeneralString\";\n            case 28:\n              return \"UniversalString\";\n            case 30:\n              return \"BMPString\";}\n\n          return \"Universal_\" + this.tag.tagNumber.toString();\n        case 1:\n          return \"Application_\" + this.tag.tagNumber.toString();\n        case 2:\n          return \"[\" + this.tag.tagNumber.toString() + \"]\";\n        case 3:\n          return \"Private_\" + this.tag.tagNumber.toString();}\n\n    }, c.prototype.content = function (t) {\n      if (void 0 === this.tag) return null;\n      void 0 === t && (t = 1 / 0);\n      var e = this.posContent(),\n      i = Math.abs(this.length);\n      if (!this.tag.isUniversal()) return null !== this.sub ? \"(\" + this.sub.length + \" elem)\" : this.stream.parseOctetString(\n      e, e + i, t);\n      switch (this.tag.tagNumber) {\n        case 1:\n          return 0 === this.stream.get(e) ? \"false\" : \"true\";\n        case 2:\n          return this.stream.parseInteger(e, e + i);\n        case 3:\n          return this.sub ? \"(\" + this.sub.length + \" elem)\" : this.stream.parseBitString(e, e + i, t);\n        case 4:\n          return this.sub ? \"(\" + this.sub.length + \" elem)\" : this.stream.parseOctetString(e, e + i, t);\n        case 6:\n          return this.stream.parseOID(e, e + i, t);\n        case 16:\n        case 17:\n          return null !== this.sub ? \"(\" + this.sub.length + \" elem)\" : \"(no elem)\";\n        case 12:\n          return E(this.stream.parseStringUTF(e, e + i), t);\n        case 18:\n        case 19:\n        case 20:\n        case 21:\n        case 22:\n        case 26:\n          return E(this.stream.parseStringISO(e, e + i), t);\n        case 30:\n          return E(this.stream.parseStringBMP(e, e + i), t);\n        case 23:\n        case 24:\n          return this.stream.parseTime(e, e + i, 23 == this.tag.tagNumber);}\n\n      return null;\n    }, c.prototype.toString = function () {\n      return this.typeName() + \"@\" + this.stream.pos + \"[header:\" + this.header + \",length:\" + this.length + \",sub:\" + (\n      null === this.sub ? \"null\" : this.sub.length) + \"]\";\n    }, c.prototype.toPrettyString = function (t) {\n      void 0 === t && (t = \"\");\n      var e = t + this.typeName() + \" @\" + this.stream.pos;\n      if (0 <= this.length && (e += \"+\"), e += this.length, this.tag.tagConstructed ? e += \" (constructed)\" : !this.tag.\n      isUniversal() || 3 != this.tag.tagNumber && 4 != this.tag.tagNumber || null === this.sub || (e +=\n      \" (encapsulates)\"), e += \"\\n\", null !== this.sub) {\n        t += \"  \";\n        for (var i = 0, r = this.sub.length; i < r; ++i) {e += this.sub[i].toPrettyString(t);}\n      }\n      return e;\n    }, c.prototype.posStart = function () {\n      return this.stream.pos;\n    }, c.prototype.posContent = function () {\n      return this.stream.pos + this.header;\n    }, c.prototype.posEnd = function () {\n      return this.stream.pos + this.header + Math.abs(this.length);\n    }, c.prototype.toHexString = function () {\n      return this.stream.hexDump(this.posStart(), this.posEnd(), !0);\n    }, c.decodeLength = function (t) {\n      var e = t.get(),\n      i = 127 & e;\n      if (i == e) return i;\n      if (6 < i) throw new Error(\"Length over 48 bits not supported at position \" + (t.pos - 1));\n      if (0 === i) return null;\n      for (var r = e = 0; r < i; ++r) {e = 256 * e + t.get();}\n      return e;\n    }, c.prototype.getHexStringValue = function () {\n      var t = this.toHexString(),\n      e = 2 * this.header,\n      i = 2 * this.length;\n      return t.substr(e, i);\n    }, c.decode = function (t) {\n      var r;\n      r = t instanceof D ? t : new D(t, 0);\n      var e = new D(r),\n      i = new R(r),\n      n = c.decodeLength(r),\n      s = r.pos,\n      o = s - e.pos,\n      h = null,\n      a = function a() {\n        var t = [];\n        if (null !== n) {\n          for (var e = s + n; r.pos < e;) {t[t.length] = c.decode(r);}\n          if (r.pos != e) throw new Error(\"Content size is not correct for container starting at offset \" + s);\n        } else try {\n          for (;;) {\n            var i = c.decode(r);\n            if (i.tag.isEOC()) break;\n            t[t.length] = i;\n          }\n          n = s - r.pos;\n        } catch (t) {\n          throw new Error(\"Exception while decoding undefined length content: \" + t);\n        }\n        return t;\n      };\n      if (i.tagConstructed) h = a();else\n      if (i.isUniversal() && (3 == i.tagNumber || 4 == i.tagNumber)) try {\n        if (3 == i.tagNumber && 0 != r.get()) throw new Error(\"BIT STRINGs with unused bits cannot encapsulate.\");\n        h = a();\n        for (var u = 0; u < h.length; ++u) {\n          if (h[u].tag.isEOC()) throw new Error(\"EOC is not supposed to be actual content.\");}\n      } catch (t) {\n        h = null;\n      }\n      if (null === h) {\n        if (null === n) throw new Error(\"We can't skip over an invalid tag with undefined length at offset \" + s);\n        r.pos = s + Math.abs(n);\n      }\n      return new c(e, o, n, i, h);\n    }, c;\n  }(),\n  R = function () {\n    function t(t) {\n      var e = t.get();\n      if (this.tagClass = e >> 6, this.tagConstructed = 0 != (32 & e), this.tagNumber = 31 & e, 31 == this.tagNumber) {\n        for (var i = new y(); e = t.get(), i.mulAdd(128, 127 & e), 128 & e;) {;}\n        this.tagNumber = i.simplify();\n      }\n    }\n    return t.prototype.isUniversal = function () {\n      return 0 === this.tagClass;\n    }, t.prototype.isEOC = function () {\n      return 0 === this.tagClass && 0 === this.tagNumber;\n    }, t;\n  }(),\n  B = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107,\n  109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233,\n  239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373,\n  379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509,\n  521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659,\n  661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823,\n  827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983,\n  991, 997],\n\n  A = (1 << 26) / B[B.length - 1],\n  O = function () {\n    function b(t, e, i) {\n      null != t && (\"number\" == typeof t ? this.fromNumber(t, e, i) : null == e && \"string\" != typeof t ? this.fromString(\n      t, 256) : this.fromString(t, e));\n    }\n    return b.prototype.toString = function (t) {\n      if (this.s < 0) return \"-\" + this.negate().toString(t);\n      var e;\n      if (16 == t) e = 4;else\n      if (8 == t) e = 3;else\n      if (2 == t) e = 1;else\n      if (32 == t) e = 5;else\n      {\n        if (4 != t) return this.toRadix(t);\n        e = 2;\n      }\n      var i,r = (1 << e) - 1,\n      n = !1,\n      s = \"\",\n      o = this.t,\n      h = this.DB - o * this.DB % e;\n      if (0 < o--)\n      for (h < this.DB && 0 < (i = this[o] >> h) && (n = !0, s = a(i)); 0 <= o;) {h < e ? (i = (this[o] & (1 << h) - 1) <<\n        e - h, i |= this[--o] >> (h += this.DB - e)) : (i = this[o] >> (h -= e) & r, h <= 0 && (h += this.DB, --o)), 0 <\n        i && (n = !0), n && (s += a(i));}\n      return n ? s : \"0\";\n    }, b.prototype.negate = function () {\n      var t = M();\n      return b.ZERO.subTo(this, t), t;\n    }, b.prototype.abs = function () {\n      return this.s < 0 ? this.negate() : this;\n    }, b.prototype.compareTo = function (t) {\n      var e = this.s - t.s;\n      if (0 != e) return e;\n      var i = this.t;\n      if (0 != (e = i - t.t)) return this.s < 0 ? -e : e;\n      for (; 0 <= --i;) {\n        if (0 != (e = this[i] - t[i])) return e;}\n      return 0;\n    }, b.prototype.bitLength = function () {\n      return this.t <= 0 ? 0 : this.DB * (this.t - 1) + U(this[this.t - 1] ^ this.s & this.DM);\n    }, b.prototype.mod = function (t) {\n      var e = M();\n      return this.abs().divRemTo(t, null, e), this.s < 0 && 0 < e.compareTo(b.ZERO) && t.subTo(e, e), e;\n    }, b.prototype.modPowInt = function (t, e) {\n      var i;\n      return i = t < 256 || e.isEven() ? new I(e) : new N(e), this.exp(t, i);\n    }, b.prototype.clone = function () {\n      var t = M();\n      return this.copyTo(t), t;\n    }, b.prototype.intValue = function () {\n      if (this.s < 0) {\n        if (1 == this.t) return this[0] - this.DV;\n        if (0 == this.t) return -1;\n      } else {\n        if (1 == this.t) return this[0];\n        if (0 == this.t) return 0;\n      }\n      return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];\n    }, b.prototype.byteValue = function () {\n      return 0 == this.t ? this.s : this[0] << 24 >> 24;\n    }, b.prototype.shortValue = function () {\n      return 0 == this.t ? this.s : this[0] << 16 >> 16;\n    }, b.prototype.signum = function () {\n      return this.s < 0 ? -1 : this.t <= 0 || 1 == this.t && this[0] <= 0 ? 0 : 1;\n    }, b.prototype.toByteArray = function () {\n      var t = this.t,\n      e = [];\n      e[0] = this.s;\n      var i,r = this.DB - t * this.DB % 8,\n      n = 0;\n      if (0 < t--)\n      for (r < this.DB && (i = this[t] >> r) != (this.s & this.DM) >> r && (e[n++] = i | this.s << this.DB - r); 0 <=\n      t;) {r < 8 ? (i = (this[t] & (1 << r) - 1) << 8 - r, i |= this[--t] >> (r += this.DB - 8)) : (i = this[t] >> (r -=\n        8) & 255, r <= 0 && (r += this.DB, --t)), 0 != (128 & i) && (i |= -256), 0 == n && (128 & this.s) != (128 & i) &&\n        ++n, (0 < n || i != this.s) && (e[n++] = i);}\n      return e;\n    }, b.prototype.equals = function (t) {\n      return 0 == this.compareTo(t);\n    }, b.prototype.min = function (t) {\n      return this.compareTo(t) < 0 ? this : t;\n    }, b.prototype.max = function (t) {\n      return 0 < this.compareTo(t) ? this : t;\n    }, b.prototype.and = function (t) {\n      var e = M();\n      return this.bitwiseTo(t, i, e), e;\n    }, b.prototype.or = function (t) {\n      var e = M();\n      return this.bitwiseTo(t, u, e), e;\n    }, b.prototype.xor = function (t) {\n      var e = M();\n      return this.bitwiseTo(t, r, e), e;\n    }, b.prototype.andNot = function (t) {\n      var e = M();\n      return this.bitwiseTo(t, n, e), e;\n    }, b.prototype.not = function () {\n      for (var t = M(), e = 0; e < this.t; ++e) {t[e] = this.DM & ~this[e];}\n      return t.t = this.t, t.s = ~this.s, t;\n    }, b.prototype.shiftLeft = function (t) {\n      var e = M();\n      return t < 0 ? this.rShiftTo(-t, e) : this.lShiftTo(t, e), e;\n    }, b.prototype.shiftRight = function (t) {\n      var e = M();\n      return t < 0 ? this.lShiftTo(-t, e) : this.rShiftTo(t, e), e;\n    }, b.prototype.getLowestSetBit = function () {\n      for (var t = 0; t < this.t; ++t) {\n        if (0 != this[t]) return t * this.DB + s(this[t]);}\n      return this.s < 0 ? this.t * this.DB : -1;\n    }, b.prototype.bitCount = function () {\n      for (var t = 0, e = this.s & this.DM, i = 0; i < this.t; ++i) {t += o(this[i] ^ e);}\n      return t;\n    }, b.prototype.testBit = function (t) {\n      var e = Math.floor(t / this.DB);\n      return e >= this.t ? 0 != this.s : 0 != (this[e] & 1 << t % this.DB);\n    }, b.prototype.setBit = function (t) {\n      return this.changeBit(t, u);\n    }, b.prototype.clearBit = function (t) {\n      return this.changeBit(t, n);\n    }, b.prototype.flipBit = function (t) {\n      return this.changeBit(t, r);\n    }, b.prototype.add = function (t) {\n      var e = M();\n      return this.addTo(t, e), e;\n    }, b.prototype.subtract = function (t) {\n      var e = M();\n      return this.subTo(t, e), e;\n    }, b.prototype.multiply = function (t) {\n      var e = M();\n      return this.multiplyTo(t, e), e;\n    }, b.prototype.divide = function (t) {\n      var e = M();\n      return this.divRemTo(t, e, null), e;\n    }, b.prototype.remainder = function (t) {\n      var e = M();\n      return this.divRemTo(t, null, e), e;\n    }, b.prototype.divideAndRemainder = function (t) {\n      var e = M(),\n      i = M();\n      return this.divRemTo(t, e, i), [e, i];\n    }, b.prototype.modPow = function (t, e) {\n      var i,r,n = t.bitLength(),\n      s = F(1);\n      if (n <= 0) return s;\n      i = n < 18 ? 1 : n < 48 ? 3 : n < 144 ? 4 : n < 768 ? 5 : 6, r = n < 8 ? new I(e) : e.isEven() ? new P(e) : new N(\n      e);\n      var o = [],\n      h = 3,\n      a = i - 1,\n      u = (1 << i) - 1;\n      if (o[1] = r.convert(this), 1 < i) {\n        var c = M();\n        for (r.sqrTo(o[1], c); h <= u;) {o[h] = M(), r.mulTo(c, o[h - 2], o[h]), h += 2;}\n      }\n      var f,l,p = t.t - 1,\n      g = !0,\n      d = M();\n      for (n = U(t[p]) - 1; 0 <= p;) {\n        for (a <= n ? f = t[p] >> n - a & u : (f = (t[p] & (1 << n + 1) - 1) << a - n, 0 < p && (f |= t[p - 1] >> this.DB +\n        n - a)), h = i; 0 == (1 & f);) {f >>= 1, --h;}\n        if ((n -= h) < 0 && (n += this.DB, --p), g) o[f].copyTo(s), g = !1;else\n        {\n          for (; 1 < h;) {r.sqrTo(s, d), r.sqrTo(d, s), h -= 2;}\n          0 < h ? r.sqrTo(s, d) : (l = s, s = d, d = l), r.mulTo(d, o[f], s);\n        }\n        for (; 0 <= p && 0 == (t[p] & 1 << n);) {r.sqrTo(s, d), l = s, s = d, d = l, --n < 0 && (n = this.DB - 1, --p);}\n      }\n      return r.revert(s);\n    }, b.prototype.modInverse = function (t) {\n      var e = t.isEven();\n      if (this.isEven() && e || 0 == t.signum()) return b.ZERO;\n      for (var i = t.clone(), r = this.clone(), n = F(1), s = F(0), o = F(0), h = F(1); 0 != i.signum();) {\n        for (; i.isEven();) {i.rShiftTo(1, i), e ? (n.isEven() && s.isEven() || (n.addTo(this, n), s.subTo(t, s)), n.rShiftTo(\n          1, n)) : s.isEven() || s.subTo(t, s), s.rShiftTo(1, s);}\n        for (; r.isEven();) {r.rShiftTo(1, r), e ? (o.isEven() && h.isEven() || (o.addTo(this, o), h.subTo(t, h)), o.rShiftTo(\n          1, o)) : h.isEven() || h.subTo(t, h), h.rShiftTo(1, h);}\n        0 <= i.compareTo(r) ? (i.subTo(r, i), e && n.subTo(o, n), s.subTo(h, s)) : (r.subTo(i, r), e && o.subTo(n, o), h.\n        subTo(s, h));\n      }\n      return 0 != r.compareTo(b.ONE) ? b.ZERO : 0 <= h.compareTo(t) ? h.subtract(t) : h.signum() < 0 ? (h.addTo(t, h),\n      h.signum() < 0 ? h.add(t) : h) : h;\n    }, b.prototype.pow = function (t) {\n      return this.exp(t, new V());\n    }, b.prototype.gcd = function (t) {\n      var e = this.s < 0 ? this.negate() : this.clone(),\n      i = t.s < 0 ? t.negate() : t.clone();\n      if (e.compareTo(i) < 0) {\n        var r = e;\n        e = i, i = r;\n      }\n      var n = e.getLowestSetBit(),\n      s = i.getLowestSetBit();\n      if (s < 0) return e;\n      for (n < s && (s = n), 0 < s && (e.rShiftTo(s, e), i.rShiftTo(s, i)); 0 < e.signum();) {0 < (n = e.getLowestSetBit()) &&\n        e.rShiftTo(n, e), 0 < (n = i.getLowestSetBit()) && i.rShiftTo(n, i), 0 <= e.compareTo(i) ? (e.subTo(i, e), e.rShiftTo(\n        1, e)) : (i.subTo(e, i), i.rShiftTo(1, i));}\n      return 0 < s && i.lShiftTo(s, i), i;\n    }, b.prototype.isProbablePrime = function (t) {\n      var e,i = this.abs();\n      if (1 == i.t && i[0] <= B[B.length - 1]) {\n        for (e = 0; e < B.length; ++e) {\n          if (i[0] == B[e]) return !0;}\n        return !1;\n      }\n      if (i.isEven()) return !1;\n      for (e = 1; e < B.length;) {\n        for (var r = B[e], n = e + 1; n < B.length && r < A;) {r *= B[n++];}\n        for (r = i.modInt(r); e < n;) {\n          if (r % B[e++] == 0) return !1;}\n      }\n      return i.millerRabin(t);\n    }, b.prototype.copyTo = function (t) {\n      for (var e = this.t - 1; 0 <= e; --e) {t[e] = this[e];}\n      t.t = this.t, t.s = this.s;\n    }, b.prototype.fromInt = function (t) {\n      this.t = 1, this.s = t < 0 ? -1 : 0, 0 < t ? this[0] = t : t < -1 ? this[0] = t + this.DV : this.t = 0;\n    }, b.prototype.fromString = function (t, e) {\n      var i;\n      if (16 == e) i = 4;else\n      if (8 == e) i = 3;else\n      if (256 == e) i = 8;else\n      if (2 == e) i = 1;else\n      if (32 == e) i = 5;else\n      {\n        if (4 != e) return void this.fromRadix(t, e);\n        i = 2;\n      }\n      this.t = 0, this.s = 0;\n      for (var r = t.length, n = !1, s = 0; 0 <= --r;) {\n        var o = 8 == i ? 255 & +t[r] : C(t, r);\n        o < 0 ? \"-\" == t.charAt(r) && (n = !0) : (n = !1, 0 == s ? this[this.t++] = o : s + i > this.DB ? (this[this.t -\n        1] |= (o & (1 << this.DB - s) - 1) << s, this[this.t++] = o >> this.DB - s) : this[this.t - 1] |= o << s, (s +=\n        i) >= this.DB && (s -= this.DB));\n      }\n      8 == i && 0 != (128 & +t[0]) && (this.s = -1, 0 < s && (this[this.t - 1] |= (1 << this.DB - s) - 1 << s)), this.clamp(),\n      n && b.ZERO.subTo(this, this);\n    }, b.prototype.clamp = function () {\n      for (var t = this.s & this.DM; 0 < this.t && this[this.t - 1] == t;) {--this.t;}\n    }, b.prototype.dlShiftTo = function (t, e) {\n      var i;\n      for (i = this.t - 1; 0 <= i; --i) {e[i + t] = this[i];}\n      for (i = t - 1; 0 <= i; --i) {e[i] = 0;}\n      e.t = this.t + t, e.s = this.s;\n    }, b.prototype.drShiftTo = function (t, e) {\n      for (var i = t; i < this.t; ++i) {e[i - t] = this[i];}\n      e.t = Math.max(this.t - t, 0), e.s = this.s;\n    }, b.prototype.lShiftTo = function (t, e) {\n      for (var i = t % this.DB, r = this.DB - i, n = (1 << r) - 1, s = Math.floor(t / this.DB), o = this.s << i & this.DM,\n      h = this.t - 1; 0 <= h; --h) {e[h + s + 1] = this[h] >> r | o, o = (this[h] & n) << i;}\n      for (h = s - 1; 0 <= h; --h) {e[h] = 0;}\n      e[s] = o, e.t = this.t + s + 1, e.s = this.s, e.clamp();\n    }, b.prototype.rShiftTo = function (t, e) {\n      e.s = this.s;\n      var i = Math.floor(t / this.DB);\n      if (i >= this.t) e.t = 0;else\n      {\n        var r = t % this.DB,\n        n = this.DB - r,\n        s = (1 << r) - 1;\n        e[0] = this[i] >> r;\n        for (var o = i + 1; o < this.t; ++o) {e[o - i - 1] |= (this[o] & s) << n, e[o - i] = this[o] >> r;}\n        0 < r && (e[this.t - i - 1] |= (this.s & s) << n), e.t = this.t - i, e.clamp();\n      }\n    }, b.prototype.subTo = function (t, e) {\n      for (var i = 0, r = 0, n = Math.min(t.t, this.t); i < n;) {r += this[i] - t[i], e[i++] = r & this.DM, r >>= this.DB;}\n      if (t.t < this.t) {\n        for (r -= t.s; i < this.t;) {r += this[i], e[i++] = r & this.DM, r >>= this.DB;}\n        r += this.s;\n      } else {\n        for (r += this.s; i < t.t;) {r -= t[i], e[i++] = r & this.DM, r >>= this.DB;}\n        r -= t.s;\n      }\n      e.s = r < 0 ? -1 : 0, r < -1 ? e[i++] = this.DV + r : 0 < r && (e[i++] = r), e.t = i, e.clamp();\n    }, b.prototype.multiplyTo = function (t, e) {\n      var i = this.abs(),\n      r = t.abs(),\n      n = i.t;\n      for (e.t = n + r.t; 0 <= --n;) {e[n] = 0;}\n      for (n = 0; n < r.t; ++n) {e[n + i.t] = i.am(0, r[n], e, n, 0, i.t);}\n      e.s = 0, e.clamp(), this.s != t.s && b.ZERO.subTo(e, e);\n    }, b.prototype.squareTo = function (t) {\n      for (var e = this.abs(), i = t.t = 2 * e.t; 0 <= --i;) {t[i] = 0;}\n      for (i = 0; i < e.t - 1; ++i) {\n        var r = e.am(i, e[i], t, 2 * i, 0, 1);\n        (t[i + e.t] += e.am(i + 1, 2 * e[i], t, 2 * i + 1, r, e.t - i - 1)) >= e.DV && (t[i + e.t] -= e.DV, t[i + e.t +\n        1] = 1);\n      }\n      0 < t.t && (t[t.t - 1] += e.am(i, e[i], t, 2 * i, 0, 1)), t.s = 0, t.clamp();\n    }, b.prototype.divRemTo = function (t, e, i) {\n      var r = t.abs();\n      if (!(r.t <= 0)) {\n        var n = this.abs();\n        if (n.t < r.t) return null != e && e.fromInt(0), void (null != i && this.copyTo(i));\n        null == i && (i = M());\n        var s = M(),\n        o = this.s,\n        h = t.s,\n        a = this.DB - U(r[r.t - 1]);\n        0 < a ? (r.lShiftTo(a, s), n.lShiftTo(a, i)) : (r.copyTo(s), n.copyTo(i));\n        var u = s.t,\n        c = s[u - 1];\n        if (0 != c) {\n          var f = c * (1 << this.F1) + (1 < u ? s[u - 2] >> this.F2 : 0),\n          l = this.FV / f,\n          p = (1 << this.F1) / f,\n          g = 1 << this.F2,\n          d = i.t,\n          v = d - u,\n          m = null == e ? M() : e;\n          for (s.dlShiftTo(v, m), 0 <= i.compareTo(m) && (i[i.t++] = 1, i.subTo(m, i)), b.ONE.dlShiftTo(u, m), m.subTo(s,\n          s); s.t < u;) {s[s.t++] = 0;}\n          for (; 0 <= --v;) {\n            var y = i[--d] == c ? this.DM : Math.floor(i[d] * l + (i[d - 1] + g) * p);\n            if ((i[d] += s.am(0, y, i, v, 0, u)) < y)\n            for (s.dlShiftTo(v, m), i.subTo(m, i); i[d] < --y;) {i.subTo(m, i);}\n          }\n          null != e && (i.drShiftTo(u, e), o != h && b.ZERO.subTo(e, e)), i.t = u, i.clamp(), 0 < a && i.rShiftTo(a, i),\n          o < 0 && b.ZERO.subTo(i, i);\n        }\n      }\n    }, b.prototype.invDigit = function () {\n      if (this.t < 1) return 0;\n      var t = this[0];\n      if (0 == (1 & t)) return 0;\n      var e = 3 & t;\n      return 0 < (e = (e = (e = (e = e * (2 - (15 & t) * e) & 15) * (2 - (255 & t) * e) & 255) * (2 - ((65535 & t) * e &\n      65535)) & 65535) * (2 - t * e % this.DV) % this.DV) ? this.DV - e : -e;\n    }, b.prototype.isEven = function () {\n      return 0 == (0 < this.t ? 1 & this[0] : this.s);\n    }, b.prototype.exp = function (t, e) {\n      if (4294967295 < t || t < 1) return b.ONE;\n      var i = M(),\n      r = M(),\n      n = e.convert(this),\n      s = U(t) - 1;\n      for (n.copyTo(i); 0 <= --s;) {\n        if (e.sqrTo(i, r), 0 < (t & 1 << s)) e.mulTo(r, n, i);else\n        {\n          var o = i;\n          i = r, r = o;\n        }}return e.revert(i);\n    }, b.prototype.chunkSize = function (t) {\n      return Math.floor(Math.LN2 * this.DB / Math.log(t));\n    }, b.prototype.toRadix = function (t) {\n      if (null == t && (t = 10), 0 == this.signum() || t < 2 || 36 < t) return \"0\";\n      var e = this.chunkSize(t),\n      i = Math.pow(t, e),\n      r = F(i),\n      n = M(),\n      s = M(),\n      o = \"\";\n      for (this.divRemTo(r, n, s); 0 < n.signum();) {o = (i + s.intValue()).toString(t).substr(1) + o, n.divRemTo(r, n,\n        s);}\n      return s.intValue().toString(t) + o;\n    }, b.prototype.fromRadix = function (t, e) {\n      this.fromInt(0), null == e && (e = 10);\n      for (var i = this.chunkSize(e), r = Math.pow(e, i), n = !1, s = 0, o = 0, h = 0; h < t.length; ++h) {\n        var a = C(t, h);\n        a < 0 ? \"-\" == t.charAt(h) && 0 == this.signum() && (n = !0) : (o = e * o + a, ++s >= i && (this.dMultiply(r),\n        this.dAddOffset(o, 0), o = s = 0));\n      }\n      0 < s && (this.dMultiply(Math.pow(e, s)), this.dAddOffset(o, 0)), n && b.ZERO.subTo(this, this);\n    }, b.prototype.fromNumber = function (t, e, i) {\n      if (\"number\" == typeof e) {\n        if (t < 2) this.fromInt(1);else\n\n        for (this.fromNumber(t, i), this.testBit(t - 1) || this.bitwiseTo(b.ONE.shiftLeft(t - 1), u, this), this.isEven() &&\n        this.dAddOffset(1, 0); !this.isProbablePrime(e);) {this.dAddOffset(2, 0), this.bitLength() > t && this.subTo(b.ONE.\n          shiftLeft(t - 1), this);}} else\n      {\n        var r = [],\n        n = 7 & t;\n        r.length = 1 + (t >> 3), e.nextBytes(r), 0 < n ? r[0] &= (1 << n) - 1 : r[0] = 0, this.fromString(r, 256);\n      }\n    }, b.prototype.bitwiseTo = function (t, e, i) {\n      var r,n,s = Math.min(t.t, this.t);\n      for (r = 0; r < s; ++r) {i[r] = e(this[r], t[r]);}\n      if (t.t < this.t) {\n        for (n = t.s & this.DM, r = s; r < this.t; ++r) {i[r] = e(this[r], n);}\n        i.t = this.t;\n      } else {\n        for (n = this.s & this.DM, r = s; r < t.t; ++r) {i[r] = e(n, t[r]);}\n        i.t = t.t;\n      }\n      i.s = e(this.s, t.s), i.clamp();\n    }, b.prototype.changeBit = function (t, e) {\n      var i = b.ONE.shiftLeft(t);\n      return this.bitwiseTo(i, e, i), i;\n    }, b.prototype.addTo = function (t, e) {\n      for (var i = 0, r = 0, n = Math.min(t.t, this.t); i < n;) {r += this[i] + t[i], e[i++] = r & this.DM, r >>= this.DB;}\n      if (t.t < this.t) {\n        for (r += t.s; i < this.t;) {r += this[i], e[i++] = r & this.DM, r >>= this.DB;}\n        r += this.s;\n      } else {\n        for (r += this.s; i < t.t;) {r += t[i], e[i++] = r & this.DM, r >>= this.DB;}\n        r += t.s;\n      }\n      e.s = r < 0 ? -1 : 0, 0 < r ? e[i++] = r : r < -1 && (e[i++] = this.DV + r), e.t = i, e.clamp();\n    }, b.prototype.dMultiply = function (t) {\n      this[this.t] = this.am(0, t - 1, this, 0, 0, this.t), ++this.t, this.clamp();\n    }, b.prototype.dAddOffset = function (t, e) {\n      if (0 != t) {\n        for (; this.t <= e;) {this[this.t++] = 0;}\n        for (this[e] += t; this[e] >= this.DV;) {this[e] -= this.DV, ++e >= this.t && (this[this.t++] = 0), ++this[e];}\n      }\n    }, b.prototype.multiplyLowerTo = function (t, e, i) {\n      var r = Math.min(this.t + t.t, e);\n      for (i.s = 0, i.t = r; 0 < r;) {i[--r] = 0;}\n      for (var n = i.t - this.t; r < n; ++r) {i[r + this.t] = this.am(0, t[r], i, r, 0, this.t);}\n      for (n = Math.min(t.t, e); r < n; ++r) {this.am(0, t[r], i, r, 0, e - r);}\n      i.clamp();\n    }, b.prototype.multiplyUpperTo = function (t, e, i) {\n      --e;\n      var r = i.t = this.t + t.t - e;\n      for (i.s = 0; 0 <= --r;) {i[r] = 0;}\n      for (r = Math.max(e - this.t, 0); r < t.t; ++r) {i[this.t + r - e] = this.am(e - r, t[r], i, 0, 0, this.t + r - e);}\n      i.clamp(), i.drShiftTo(1, i);\n    }, b.prototype.modInt = function (t) {\n      if (t <= 0) return 0;\n      var e = this.DV % t,\n      i = this.s < 0 ? t - 1 : 0;\n      if (0 < this.t)\n      if (0 == e) i = this[0] % t;else\n\n      for (var r = this.t - 1; 0 <= r; --r) {i = (e * i + this[r]) % t;}\n      return i;\n    }, b.prototype.millerRabin = function (t) {\n      var e = this.subtract(b.ONE),\n      i = e.getLowestSetBit();\n      if (i <= 0) return !1;\n      var r = e.shiftRight(i);\n      B.length < (t = t + 1 >> 1) && (t = B.length);\n      for (var n = M(), s = 0; s < t; ++s) {\n        n.fromInt(B[Math.floor(Math.random() * B.length)]);\n        var o = n.modPow(r, this);\n        if (0 != o.compareTo(b.ONE) && 0 != o.compareTo(e)) {\n          for (var h = 1; h++ < i && 0 != o.compareTo(e);) {\n            if (0 == (o = o.modPowInt(2, this)).compareTo(b.ONE)) return !1;}\n          if (0 != o.compareTo(e)) return !1;\n        }\n      }\n      return !0;\n    }, b.prototype.square = function () {\n      var t = M();\n      return this.squareTo(t), t;\n    }, b.prototype.gcda = function (t, e) {\n      var i = this.s < 0 ? this.negate() : this.clone(),\n      r = t.s < 0 ? t.negate() : t.clone();\n      if (i.compareTo(r) < 0) {\n        var n = i;\n        i = r, r = n;\n      }\n      var s = i.getLowestSetBit(),\n      o = r.getLowestSetBit();\n      if (o < 0) e(i);else\n      {\n        s < o && (o = s), 0 < o && (i.rShiftTo(o, i), r.rShiftTo(o, r));\n        var h = function h() {\n          0 < (s = i.getLowestSetBit()) && i.rShiftTo(s, i), 0 < (s = r.getLowestSetBit()) && r.rShiftTo(s, r), 0 <= i.compareTo(\n          r) ? (i.subTo(r, i), i.rShiftTo(1, i)) : (r.subTo(i, r), r.rShiftTo(1, r)), 0 < i.signum() ? setTimeout(h, 0) : (\n          0 < o && r.lShiftTo(o, r), setTimeout(function () {\n            e(r);\n          }, 0));\n        };\n        setTimeout(h, 10);\n      }\n    }, b.prototype.fromNumberAsync = function (t, e, i, r) {\n      if (\"number\" == typeof e) {\n        if (t < 2) this.fromInt(1);else\n        {\n          this.fromNumber(t, i), this.testBit(t - 1) || this.bitwiseTo(b.ONE.shiftLeft(t - 1), u, this), this.isEven() &&\n          this.dAddOffset(1, 0);\n          var n = this,\n          s = function s() {\n            n.dAddOffset(2, 0), n.bitLength() > t && n.subTo(b.ONE.shiftLeft(t - 1), n), n.isProbablePrime(e) ?\n            setTimeout(function () {\n              r();\n            }, 0) : setTimeout(s, 0);\n          };\n          setTimeout(s, 0);\n        }} else\n      {\n        var o = [],\n        h = 7 & t;\n        o.length = 1 + (t >> 3), e.nextBytes(o), 0 < h ? o[0] &= (1 << h) - 1 : o[0] = 0, this.fromString(o, 256);\n      }\n    }, b;\n  }(),\n  V = function () {\n    function t() {}\n    return t.prototype.convert = function (t) {\n      return t;\n    }, t.prototype.revert = function (t) {\n      return t;\n    }, t.prototype.mulTo = function (t, e, i) {\n      t.multiplyTo(e, i);\n    }, t.prototype.sqrTo = function (t, e) {\n      t.squareTo(e);\n    }, t;\n  }(),\n  I = function () {\n    function t(t) {\n      this.m = t;\n    }\n    return t.prototype.convert = function (t) {\n      return t.s < 0 || 0 <= t.compareTo(this.m) ? t.mod(this.m) : t;\n    }, t.prototype.revert = function (t) {\n      return t;\n    }, t.prototype.reduce = function (t) {\n      t.divRemTo(this.m, null, t);\n    }, t.prototype.mulTo = function (t, e, i) {\n      t.multiplyTo(e, i), this.reduce(i);\n    }, t.prototype.sqrTo = function (t, e) {\n      t.squareTo(e), this.reduce(e);\n    }, t;\n  }(),\n  N = function () {\n    function t(t) {\n      this.m = t, this.mp = t.invDigit(), this.mpl = 32767 & this.mp, this.mph = this.mp >> 15, this.um = (1 << t.DB -\n      15) - 1, this.mt2 = 2 * t.t;\n    }\n    return t.prototype.convert = function (t) {\n      var e = M();\n      return t.abs().dlShiftTo(this.m.t, e), e.divRemTo(this.m, null, e), t.s < 0 && 0 < e.compareTo(O.ZERO) && this.m.subTo(\n      e, e), e;\n    }, t.prototype.revert = function (t) {\n      var e = M();\n      return t.copyTo(e), this.reduce(e), e;\n    }, t.prototype.reduce = function (t) {\n      for (; t.t <= this.mt2;) {t[t.t++] = 0;}\n      for (var e = 0; e < this.m.t; ++e) {\n        var i = 32767 & t[e],\n        r = i * this.mpl + ((i * this.mph + (t[e] >> 15) * this.mpl & this.um) << 15) & t.DM;\n        for (t[i = e + this.m.t] += this.m.am(0, r, t, e, 0, this.m.t); t[i] >= t.DV;) {t[i] -= t.DV, t[++i]++;}\n      }\n      t.clamp(), t.drShiftTo(this.m.t, t), 0 <= t.compareTo(this.m) && t.subTo(this.m, t);\n    }, t.prototype.mulTo = function (t, e, i) {\n      t.multiplyTo(e, i), this.reduce(i);\n    }, t.prototype.sqrTo = function (t, e) {\n      t.squareTo(e), this.reduce(e);\n    }, t;\n  }(),\n  P = function () {\n    function t(t) {\n      this.m = t, this.r2 = M(), this.q3 = M(), O.ONE.dlShiftTo(2 * t.t, this.r2), this.mu = this.r2.divide(t);\n    }\n    return t.prototype.convert = function (t) {\n      if (t.s < 0 || t.t > 2 * this.m.t) return t.mod(this.m);\n      if (t.compareTo(this.m) < 0) return t;\n      var e = M();\n      return t.copyTo(e), this.reduce(e), e;\n    }, t.prototype.revert = function (t) {\n      return t;\n    }, t.prototype.reduce = function (t) {\n      for (t.drShiftTo(this.m.t - 1, this.r2), t.t > this.m.t + 1 && (t.t = this.m.t + 1, t.clamp()), this.mu.multiplyUpperTo(\n      this.r2, this.m.t + 1, this.q3), this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2); t.compareTo(this.r2) <\n      0;) {t.dAddOffset(1, this.m.t + 1);}\n      for (t.subTo(this.r2, t); 0 <= t.compareTo(this.m);) {t.subTo(this.m, t);}\n    }, t.prototype.mulTo = function (t, e, i) {\n      t.multiplyTo(e, i), this.reduce(i);\n    }, t.prototype.sqrTo = function (t, e) {\n      t.squareTo(e), this.reduce(e);\n    }, t;\n  }();\n\n  function M() {\n    return new O(null);\n  }\n\n  function q(t, e) {\n    return new O(t, e);\n  }\n  \"Microsoft Internet Explorer\" == navigator2.appName ? (O.prototype.am = function (t, e, i, r, n, s) {\n    for (var o = 32767 & e, h = e >> 15; 0 <= --s;) {\n      var a = 32767 & this[t],\n      u = this[t++] >> 15,\n      c = h * a + u * o;\n      n = ((a = o * a + ((32767 & c) << 15) + i[r] + (1073741823 & n)) >>> 30) + (c >>> 15) + h * u + (n >>> 30), i[r++] =\n      1073741823 & a;\n    }\n    return n;\n  }, w = 30) : \"Netscape\" != navigator2.appName ? (O.prototype.am = function (t, e, i, r, n, s) {\n    for (; 0 <= --s;) {\n      var o = e * this[t++] + i[r] + n;\n      n = Math.floor(o / 67108864), i[r++] = 67108863 & o;\n    }\n    return n;\n  }, w = 26) : (O.prototype.am = function (t, e, i, r, n, s) {\n    for (var o = 16383 & e, h = e >> 14; 0 <= --s;) {\n      var a = 16383 & this[t],\n      u = this[t++] >> 14,\n      c = h * a + u * o;\n      n = ((a = o * a + ((16383 & c) << 14) + i[r] + n) >> 28) + (c >> 14) + h * u, i[r++] = 268435455 & a;\n    }\n    return n;\n  }, w = 28), O.prototype.DB = w, O.prototype.DM = (1 << w) - 1, O.prototype.DV = 1 << w;\n  O.prototype.FV = Math.pow(2, 52), O.prototype.F1 = 52 - w, O.prototype.F2 = 2 * w - 52;\n  var j,L,H = [];\n  for (j = \"0\".charCodeAt(0), L = 0; L <= 9; ++L) {H[j++] = L;}\n  for (j = \"a\".charCodeAt(0), L = 10; L < 36; ++L) {H[j++] = L;}\n  for (j = \"A\".charCodeAt(0), L = 10; L < 36; ++L) {H[j++] = L;}\n\n  function C(t, e) {\n    var i = H[t.charCodeAt(e)];\n    return null == i ? -1 : i;\n  }\n\n  function F(t) {\n    var e = M();\n    return e.fromInt(t), e;\n  }\n\n  function U(t) {\n    var e,i = 1;\n    return 0 != (e = t >>> 16) && (t = e, i += 16), 0 != (e = t >> 8) && (t = e, i += 8), 0 != (e = t >> 4) && (t = e, i +=\n    4), 0 != (e = t >> 2) && (t = e, i += 2), 0 != (e = t >> 1) && (t = e, i += 1), i;\n  }\n  O.ZERO = F(0), O.ONE = F(1);\n  var K = function () {\n    function t() {\n      this.i = 0, this.j = 0, this.S = [];\n    }\n    return t.prototype.init = function (t) {\n      var e, i, r;\n      for (e = 0; e < 256; ++e) {this.S[e] = e;}\n      for (e = i = 0; e < 256; ++e) {i = i + this.S[e] + t[e % t.length] & 255, r = this.S[e], this.S[e] = this.S[i],\n        this.S[i] = r;}\n      this.i = 0, this.j = 0;\n    }, t.prototype.next = function () {\n      var t;\n      return this.i = this.i + 1 & 255, this.j = this.j + this.S[this.i] & 255, t = this.S[this.i], this.S[this.i] =\n      this.S[this.j], this.S[this.j] = t, this.S[t + this.S[this.i] & 255];\n    }, t;\n  }();\n  var k,_,z = 256,\n  Z = null;\n  if (null == Z) {\n    Z = [];\n    var G = void (_ = 0);\n    if (window2.crypto && window2.crypto.getRandomValues) {\n      var $ = new Uint32Array(256);\n      for (window2.crypto.getRandomValues($), G = 0; G < $.length; ++G) {Z[_++] = 255 & $[G];}\n    }\n    var Y = function Y(t) {\n      if (this.count = this.count || 0, 256 <= this.count || z <= _) window2.removeEventListener ? window2.removeEventListener(\n      \"mousemove\", Y, !1) : window2.detachEvent && window2.detachEvent(\"onmousemove\", Y);else\n      try {\n        var e = t.x + t.y;\n        Z[_++] = 255 & e, this.count += 1;\n      } catch (t) {}\n    };\n    window2.addEventListener ? window2.addEventListener(\"mousemove\", Y, !1) : window2.attachEvent && window2.attachEvent(\n    \"onmousemove\", Y);\n  }\n\n  function J() {\n    if (null == k) {\n      for (k = new K(); _ < z;) {\n        var t = Math.floor(65536 * Math.random());\n        Z[_++] = 255 & t;\n      }\n      for (k.init(Z), _ = 0; _ < Z.length; ++_) {Z[_] = 0;}\n      _ = 0;\n    }\n    return k.next();\n  }\n  var X = function () {\n    function t() {}\n    return t.prototype.nextBytes = function (t) {\n      for (var e = 0; e < t.length; ++e) {t[e] = J();}\n    }, t;\n  }();\n  var Q = function () {\n    function t() {\n      this.n = null, this.e = 0, this.d = null, this.p = null, this.q = null, this.dmp1 = null, this.dmq1 = null, this.coeff =\n      null;\n    }\n    return t.prototype.doPublic = function (t) {\n      return t.modPowInt(this.e, this.n);\n    }, t.prototype.doPrivate = function (t) {\n      if (null == this.p || null == this.q) return t.modPow(this.d, this.n);\n      for (var e = t.mod(this.p).modPow(this.dmp1, this.p), i = t.mod(this.q).modPow(this.dmq1, this.q); e.compareTo(i) <\n      0;) {e = e.add(this.p);}\n      return e.subtract(i).multiply(this.coeff).mod(this.p).multiply(this.q).add(i);\n    }, t.prototype.setPublic = function (t, e) {\n      null != t && null != e && 0 < t.length && 0 < e.length ? (this.n = q(t, 16), this.e = parseInt(e, 16)) : console.error(__f__(\n      \"Invalid RSA public key\", \" at common\\\\js\\\\jsencrypt.min.js:1173\"));\n    }, t.prototype.encrypt = function (t) {\n      var e = function (t, e) {\n        if (e < t.length + 11) return console.error(__f__(\"Message too long for RSA\", \" at common\\\\js\\\\jsencrypt.min.js:1177\")), null;\n        for (var i = [], r = t.length - 1; 0 <= r && 0 < e;) {\n          var n = t.charCodeAt(r--);\n          n < 128 ? i[--e] = n : 127 < n && n < 2048 ? (i[--e] = 63 & n | 128, i[--e] = n >> 6 | 192) : (i[--e] = 63 & n |\n          128, i[--e] = n >> 6 & 63 | 128, i[--e] = n >> 12 | 224);\n        }\n        i[--e] = 0;\n        for (var s = new X(), o = []; 2 < e;) {\n          for (o[0] = 0; 0 == o[0];) {s.nextBytes(o);}\n          i[--e] = o[0];\n        }\n        return i[--e] = 2, i[--e] = 0, new O(i);\n      }(t, this.n.bitLength() + 7 >> 3);\n      if (null == e) return null;\n      var i = this.doPublic(e);\n      if (null == i) return null;\n      var r = i.toString(16);\n      return 0 == (1 & r.length) ? r : \"0\" + r;\n    }, t.prototype.setPrivate = function (t, e, i) {\n      null != t && null != e && 0 < t.length && 0 < e.length ? (this.n = q(t, 16), this.e = parseInt(e, 16), this.d = q(\n      i, 16)) : console.error(__f__(\"Invalid RSA private key\", \" at common\\\\js\\\\jsencrypt.min.js:1197\"));\n    }, t.prototype.setPrivateEx = function (t, e, i, r, n, s, o, h) {\n      null != t && null != e && 0 < t.length && 0 < e.length ? (this.n = q(t, 16), this.e = parseInt(e, 16), this.d = q(\n      i, 16), this.p = q(r, 16), this.q = q(n, 16), this.dmp1 = q(s, 16), this.dmq1 = q(o, 16), this.coeff = q(h, 16)) :\n      console.error(__f__(\"Invalid RSA private key\", \" at common\\\\js\\\\jsencrypt.min.js:1201\"));\n    }, t.prototype.generate = function (t, e) {\n      var i = new X(),\n      r = t >> 1;\n      this.e = parseInt(e, 16);\n      for (var n = new O(e, 16);;) {\n        for (; this.p = new O(t - r, 1, i), 0 != this.p.subtract(O.ONE).gcd(n).compareTo(O.ONE) || !this.p.isProbablePrime(\n        10);) {;}\n        for (; this.q = new O(r, 1, i), 0 != this.q.subtract(O.ONE).gcd(n).compareTo(O.ONE) || !this.q.isProbablePrime(\n        10);) {;}\n        if (this.p.compareTo(this.q) <= 0) {\n          var s = this.p;\n          this.p = this.q, this.q = s;\n        }\n        var o = this.p.subtract(O.ONE),\n        h = this.q.subtract(O.ONE),\n        a = o.multiply(h);\n        if (0 == a.gcd(n).compareTo(O.ONE)) {\n          this.n = this.p.multiply(this.q), this.d = n.modInverse(a), this.dmp1 = this.d.mod(o), this.dmq1 = this.d.mod(h),\n          this.coeff = this.q.modInverse(this.p);\n          break;\n        }\n      }\n    }, t.prototype.decrypt = function (t) {\n      var e = q(t, 16),\n      i = this.doPrivate(e);\n      return null == i ? null : function (t, e) {\n        var i = t.toByteArray(),\n        r = 0;\n        for (; r < i.length && 0 == i[r];) {++r;}\n        if (i.length - r != e - 1 || 2 != i[r]) return null;\n        ++r;\n        for (; 0 != i[r];) {\n          if (++r >= i.length) return null;}\n        var n = \"\";\n        for (; ++r < i.length;) {\n          var s = 255 & i[r];\n          s < 128 ? n += String.fromCharCode(s) : 191 < s && s < 224 ? (n += String.fromCharCode((31 & s) << 6 | 63 & i[\n          r + 1]), ++r) : (n += String.fromCharCode((15 & s) << 12 | (63 & i[r + 1]) << 6 | 63 & i[r + 2]), r += 2);\n        }\n        return n;\n      }(i, this.n.bitLength() + 7 >> 3);\n    }, t.prototype.generateAsync = function (t, e, n) {\n      var s = new X(),\n      o = t >> 1;\n      this.e = parseInt(e, 16);\n      var h = new O(e, 16),\n      a = this,\n      u = function u() {\n        var e = function e() {\n          if (a.p.compareTo(a.q) <= 0) {\n            var t = a.p;\n            a.p = a.q, a.q = t;\n          }\n          var e = a.p.subtract(O.ONE),\n          i = a.q.subtract(O.ONE),\n          r = e.multiply(i);\n          0 == r.gcd(h).compareTo(O.ONE) ? (a.n = a.p.multiply(a.q), a.d = h.modInverse(r), a.dmp1 = a.d.mod(e), a.dmq1 =\n          a.d.mod(i), a.coeff = a.q.modInverse(a.p), setTimeout(function () {\n            n();\n          }, 0)) : setTimeout(u, 0);\n        },\n        i = function i() {\n          a.q = M(), a.q.fromNumberAsync(o, 1, s, function () {\n            a.q.subtract(O.ONE).gcda(h, function (t) {\n              0 == t.compareTo(O.ONE) && a.q.isProbablePrime(10) ? setTimeout(e, 0) : setTimeout(i, 0);\n            });\n          });\n        },\n        r = function r() {\n          a.p = M(), a.p.fromNumberAsync(t - o, 1, s, function () {\n            a.p.subtract(O.ONE).gcda(h, function (t) {\n              0 == t.compareTo(O.ONE) && a.p.isProbablePrime(10) ? setTimeout(i, 0) : setTimeout(r, 0);\n            });\n          });\n        };\n        setTimeout(r, 0);\n      };\n      setTimeout(u, 0);\n    }, t.prototype.sign = function (t, e, i) {\n      var r = function (t, e) {\n        if (e < t.length + 22) return console.error(__f__(\"Message too long for RSA\", \" at common\\\\js\\\\jsencrypt.min.js:1282\")), null;\n        for (var i = e - t.length - 6, r = \"\", n = 0; n < i; n += 2) {r += \"ff\";}\n        return q(\"0001\" + r + \"00\" + t, 16);\n      }((W[i] || \"\") + e(t).toString(), this.n.bitLength() / 4);\n      if (null == r) return null;\n      var n = this.doPrivate(r);\n      if (null == n) return null;\n      var s = n.toString(16);\n      return 0 == (1 & s.length) ? s : \"0\" + s;\n    }, t.prototype.verify = function (t, e, i) {\n      var r = q(e, 16),\n      n = this.doPublic(r);\n      return null == n ? null : function (t) {\n        for (var e in W) {\n          if (W.hasOwnProperty(e)) {\n            var i = W[e],\n            r = i.length;\n            if (t.substr(0, r) == i) return t.substr(r);\n          }}return t;\n      }(n.toString(16).replace(/^1f+00/, \"\")) == i(t).toString();\n    }, t;\n  }();\n  var W = {\n    md2: \"3020300c06082a864886f70d020205000410\",\n    md5: \"3020300c06082a864886f70d020505000410\",\n    sha1: \"3021300906052b0e03021a05000414\",\n    sha224: \"302d300d06096086480165030402040500041c\",\n    sha256: \"3031300d060960864801650304020105000420\",\n    sha384: \"3041300d060960864801650304020205000430\",\n    sha512: \"3051300d060960864801650304020305000440\",\n    ripemd160: \"3021300906052b2403020105000414\" };\n\n  var tt = {};\n  tt.lang = {\n    extend: function extend(t, e, i) {\n      if (!e || !t) throw new Error(\"YAHOO.lang.extend failed, please check that all dependencies are included.\");\n      var r = function r() {};\n      if (r.prototype = e.prototype, t.prototype = new r(), (t.prototype.constructor = t).superclass = e.prototype, e.prototype.\n      constructor == Object.prototype.constructor && (e.prototype.constructor = e), i) {\n        var n;\n        for (n in i) {t.prototype[n] = i[n];}\n        var s = function s() {},\n        o = [\"toString\", \"valueOf\"];\n        try {\n          /MSIE/.test(navigator2.userAgent) && (s = function s(t, e) {\n            for (n = 0; n < o.length; n += 1) {\n              var i = o[n],\n              r = e[i];\n              \"function\" == typeof r && r != Object.prototype[i] && (t[i] = r);\n            }\n          });\n        } catch (t) {}\n        s(t.prototype, i);\n      }\n    } };\n\n  var et = {};\n  void 0 !== et.asn1 && et.asn1 || (et.asn1 = {}), et.asn1.ASN1Util = new function () {\n    this.integerToByteHex = function (t) {\n      var e = t.toString(16);\n      return e.length % 2 == 1 && (e = \"0\" + e), e;\n    }, this.bigIntToMinTwosComplementsHex = function (t) {\n      var e = t.toString(16);\n      if (\"-\" != e.substr(0, 1)) e.length % 2 == 1 ? e = \"0\" + e : e.match(/^[0-7]/) || (e = \"00\" + e);else\n      {\n        var i = e.substr(1).length;\n        i % 2 == 1 ? i += 1 : e.match(/^[0-7]/) || (i += 2);\n        for (var r = \"\", n = 0; n < i; n++) {r += \"f\";}\n        e = new O(r, 16).xor(t).add(O.ONE).toString(16).replace(/^-/, \"\");\n      }\n      return e;\n    }, this.getPEMStringFromHex = function (t, e) {\n      return hextopem(t, e);\n    }, this.newObject = function (t) {\n      var e = et.asn1,\n      i = e.DERBoolean,\n      r = e.DERInteger,\n      n = e.DERBitString,\n      s = e.DEROctetString,\n      o = e.DERNull,\n      h = e.DERObjectIdentifier,\n      a = e.DEREnumerated,\n      u = e.DERUTF8String,\n      c = e.DERNumericString,\n      f = e.DERPrintableString,\n      l = e.DERTeletexString,\n      p = e.DERIA5String,\n      g = e.DERUTCTime,\n      d = e.DERGeneralizedTime,\n      v = e.DERSequence,\n      m = e.DERSet,\n      y = e.DERTaggedObject,\n      b = e.ASN1Util.newObject,\n      T = Object.keys(t);\n      if (1 != T.length) throw \"key of param shall be only one.\";\n      var S = T[0];\n      if (-1 ==\n      \":bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:seq:set:tag:\".indexOf(\n      \":\" + S + \":\")) throw \"undefined key: \" + S;\n      if (\"bool\" == S) return new i(t[S]);\n      if (\"int\" == S) return new r(t[S]);\n      if (\"bitstr\" == S) return new n(t[S]);\n      if (\"octstr\" == S) return new s(t[S]);\n      if (\"null\" == S) return new o(t[S]);\n      if (\"oid\" == S) return new h(t[S]);\n      if (\"enum\" == S) return new a(t[S]);\n      if (\"utf8str\" == S) return new u(t[S]);\n      if (\"numstr\" == S) return new c(t[S]);\n      if (\"prnstr\" == S) return new f(t[S]);\n      if (\"telstr\" == S) return new l(t[S]);\n      if (\"ia5str\" == S) return new p(t[S]);\n      if (\"utctime\" == S) return new g(t[S]);\n      if (\"gentime\" == S) return new d(t[S]);\n      if (\"seq\" == S) {\n        for (var E = t[S], w = [], D = 0; D < E.length; D++) {\n          var x = b(E[D]);\n          w.push(x);\n        }\n        return new v({\n          array: w });\n\n      }\n      if (\"set\" == S) {\n        for (E = t[S], w = [], D = 0; D < E.length; D++) {\n          x = b(E[D]);\n          w.push(x);\n        }\n        return new m({\n          array: w });\n\n      }\n      if (\"tag\" == S) {\n        var R = t[S];\n        if (\"[object Array]\" === Object.prototype.toString.call(R) && 3 == R.length) {\n          var B = b(R[2]);\n          return new y({\n            tag: R[0],\n            explicit: R[1],\n            obj: B });\n\n        }\n        var A = {};\n        if (void 0 !== R.explicit && (A.explicit = R.explicit), void 0 !== R.tag && (A.tag = R.tag), void 0 === R.obj)\n        throw \"obj shall be specified for 'tag'.\";\n        return A.obj = b(R.obj), new y(A);\n      }\n    }, this.jsonToASN1HEX = function (t) {\n      return this.newObject(t).getEncodedHex();\n    };\n  }(), et.asn1.ASN1Util.oidHexToInt = function (t) {\n    for (var e = \"\", i = parseInt(t.substr(0, 2), 16), r = (e = Math.floor(i / 40) + \".\" + i % 40, \"\"), n = 2; n < t.length; n +=\n    2) {\n      var s = (\"00000000\" + parseInt(t.substr(n, 2), 16).toString(2)).slice(-8);\n      if (r += s.substr(1, 7), \"0\" == s.substr(0, 1)) e = e + \".\" + new O(r, 2).toString(10), r = \"\";\n    }\n    return e;\n  }, et.asn1.ASN1Util.oidIntToHex = function (t) {\n    var h = function h(t) {\n      var e = t.toString(16);\n      return 1 == e.length && (e = \"0\" + e), e;\n    },\n    e = function e(t) {\n      var e = \"\",\n      i = new O(t, 10).toString(2),\n      r = 7 - i.length % 7;\n      7 == r && (r = 0);\n      for (var n = \"\", s = 0; s < r; s++) {n += \"0\";}\n      i = n + i;\n      for (s = 0; s < i.length - 1; s += 7) {\n        var o = i.substr(s, 7);\n        s != i.length - 7 && (o = \"1\" + o), e += h(parseInt(o, 2));\n      }\n      return e;\n    };\n    if (!t.match(/^[0-9.]+$/)) throw \"malformed oid string: \" + t;\n    var i = \"\",\n    r = t.split(\".\"),\n    n = 40 * parseInt(r[0]) + parseInt(r[1]);\n    i += h(n), r.splice(0, 2);\n    for (var s = 0; s < r.length; s++) {i += e(r[s]);}\n    return i;\n  }, et.asn1.ASN1Object = function () {\n    this.getLengthHexFromValue = function () {\n      if (void 0 === this.hV || null == this.hV) throw \"this.hV is null or undefined.\";\n      if (this.hV.length % 2 == 1) throw \"value hex must be even length: n=\" + \"\".length + \",v=\" + this.hV;\n      var t = this.hV.length / 2,\n      e = t.toString(16);\n      if (e.length % 2 == 1 && (e = \"0\" + e), t < 128) return e;\n      var i = e.length / 2;\n      if (15 < i) throw \"ASN.1 length too long to represent by 8x: n = \" + t.toString(16);\n      return (128 + i).toString(16) + e;\n    }, this.getEncodedHex = function () {\n      return (null == this.hTLV || this.isModified) && (this.hV = this.getFreshValueHex(), this.hL = this.getLengthHexFromValue(),\n      this.hTLV = this.hT + this.hL + this.hV, this.isModified = !1), this.hTLV;\n    }, this.getValueHex = function () {\n      return this.getEncodedHex(), this.hV;\n    }, this.getFreshValueHex = function () {\n      return \"\";\n    };\n  }, et.asn1.DERAbstractString = function (t) {\n    et.asn1.DERAbstractString.superclass.constructor.call(this), this.getString = function () {\n      return this.s;\n    }, this.setString = function (t) {\n      this.hTLV = null, this.isModified = !0, this.s = t, this.hV = stohex(this.s);\n    }, this.setStringHex = function (t) {\n      this.hTLV = null, this.isModified = !0, this.s = null, this.hV = t;\n    }, this.getFreshValueHex = function () {\n      return this.hV;\n    }, void 0 !== t && (\"string\" == typeof t ? this.setString(t) : void 0 !== t.str ? this.setString(t.str) : void 0 !==\n    t.hex && this.setStringHex(t.hex));\n  }, tt.lang.extend(et.asn1.DERAbstractString, et.asn1.ASN1Object), et.asn1.DERAbstractTime = function (t) {\n    et.asn1.DERAbstractTime.superclass.constructor.call(this), this.localDateToUTC = function (t) {\n      return utc = t.getTime() + 6e4 * t.getTimezoneOffset(), new Date(utc);\n    }, this.formatDate = function (t, e, i) {\n      var r = this.zeroPadding,\n      n = this.localDateToUTC(t),\n      s = String(n.getFullYear());\n      \"utc\" == e && (s = s.substr(2, 2));\n      var o = s + r(String(n.getMonth() + 1), 2) + r(String(n.getDate()), 2) + r(String(n.getHours()), 2) + r(String(n.getMinutes()),\n      2) + r(String(n.getSeconds()), 2);\n      if (!0 === i) {\n        var h = n.getMilliseconds();\n        if (0 != h) {\n          var a = r(String(h), 3);\n          o = o + \".\" + (a = a.replace(/[0]+$/, \"\"));\n        }\n      }\n      return o + \"Z\";\n    }, this.zeroPadding = function (t, e) {\n      return t.length >= e ? t : new Array(e - t.length + 1).join(\"0\") + t;\n    }, this.getString = function () {\n      return this.s;\n    }, this.setString = function (t) {\n      this.hTLV = null, this.isModified = !0, this.s = t, this.hV = stohex(t);\n    }, this.setByDateValue = function (t, e, i, r, n, s) {\n      var o = new Date(Date.UTC(t, e - 1, i, r, n, s, 0));\n      this.setByDate(o);\n    }, this.getFreshValueHex = function () {\n      return this.hV;\n    };\n  }, tt.lang.extend(et.asn1.DERAbstractTime, et.asn1.ASN1Object), et.asn1.DERAbstractStructured = function (t) {\n    et.asn1.DERAbstractString.superclass.constructor.call(this), this.setByASN1ObjectArray = function (t) {\n      this.hTLV = null, this.isModified = !0, this.asn1Array = t;\n    }, this.appendASN1Object = function (t) {\n      this.hTLV = null, this.isModified = !0, this.asn1Array.push(t);\n    }, this.asn1Array = new Array(), void 0 !== t && void 0 !== t.array && (this.asn1Array = t.array);\n  }, tt.lang.extend(et.asn1.DERAbstractStructured, et.asn1.ASN1Object), et.asn1.DERBoolean = function () {\n    et.asn1.DERBoolean.superclass.constructor.call(this), this.hT = \"01\", this.hTLV = \"0101ff\";\n  }, tt.lang.extend(et.asn1.DERBoolean, et.asn1.ASN1Object), et.asn1.DERInteger = function (t) {\n    et.asn1.DERInteger.superclass.constructor.call(this), this.hT = \"02\", this.setByBigInteger = function (t) {\n      this.hTLV = null, this.isModified = !0, this.hV = et.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t);\n    }, this.setByInteger = function (t) {\n      var e = new O(String(t), 10);\n      this.setByBigInteger(e);\n    }, this.setValueHex = function (t) {\n      this.hV = t;\n    }, this.getFreshValueHex = function () {\n      return this.hV;\n    }, void 0 !== t && (void 0 !== t.bigint ? this.setByBigInteger(t.bigint) : void 0 !== t.int ? this.setByInteger(t.int) :\n    \"number\" == typeof t ? this.setByInteger(t) : void 0 !== t.hex && this.setValueHex(t.hex));\n  }, tt.lang.extend(et.asn1.DERInteger, et.asn1.ASN1Object), et.asn1.DERBitString = function (t) {\n    if (void 0 !== t && void 0 !== t.obj) {\n      var e = et.asn1.ASN1Util.newObject(t.obj);\n      t.hex = \"00\" + e.getEncodedHex();\n    }\n    et.asn1.DERBitString.superclass.constructor.call(this), this.hT = \"03\", this.setHexValueIncludingUnusedBits =\n    function (t) {\n      this.hTLV = null, this.isModified = !0, this.hV = t;\n    }, this.setUnusedBitsAndHexValue = function (t, e) {\n      if (t < 0 || 7 < t) throw \"unused bits shall be from 0 to 7: u = \" + t;\n      var i = \"0\" + t;\n      this.hTLV = null, this.isModified = !0, this.hV = i + e;\n    }, this.setByBinaryString = function (t) {\n      var e = 8 - (t = t.replace(/0+$/, \"\")).length % 8;\n      8 == e && (e = 0);\n      for (var i = 0; i <= e; i++) {t += \"0\";}\n      var r = \"\";\n      for (i = 0; i < t.length - 1; i += 8) {\n        var n = t.substr(i, 8),\n        s = parseInt(n, 2).toString(16);\n        1 == s.length && (s = \"0\" + s), r += s;\n      }\n      this.hTLV = null, this.isModified = !0, this.hV = \"0\" + e + r;\n    }, this.setByBooleanArray = function (t) {\n      for (var e = \"\", i = 0; i < t.length; i++) {1 == t[i] ? e += \"1\" : e += \"0\";}\n      this.setByBinaryString(e);\n    }, this.newFalseArray = function (t) {\n      for (var e = new Array(t), i = 0; i < t; i++) {e[i] = !1;}\n      return e;\n    }, this.getFreshValueHex = function () {\n      return this.hV;\n    }, void 0 !== t && (\"string\" == typeof t && t.toLowerCase().match(/^[0-9a-f]+$/) ? this.setHexValueIncludingUnusedBits(\n    t) : void 0 !== t.hex ? this.setHexValueIncludingUnusedBits(t.hex) : void 0 !== t.bin ? this.setByBinaryString(t.\n    bin) : void 0 !== t.array && this.setByBooleanArray(t.array));\n  }, tt.lang.extend(et.asn1.DERBitString, et.asn1.ASN1Object), et.asn1.DEROctetString = function (t) {\n    if (void 0 !== t && void 0 !== t.obj) {\n      var e = et.asn1.ASN1Util.newObject(t.obj);\n      t.hex = e.getEncodedHex();\n    }\n    et.asn1.DEROctetString.superclass.constructor.call(this, t), this.hT = \"04\";\n  }, tt.lang.extend(et.asn1.DEROctetString, et.asn1.DERAbstractString), et.asn1.DERNull = function () {\n    et.asn1.DERNull.superclass.constructor.call(this), this.hT = \"05\", this.hTLV = \"0500\";\n  }, tt.lang.extend(et.asn1.DERNull, et.asn1.ASN1Object), et.asn1.DERObjectIdentifier = function (t) {\n    var h = function h(t) {\n      var e = t.toString(16);\n      return 1 == e.length && (e = \"0\" + e), e;\n    },\n    s = function s(t) {\n      var e = \"\",\n      i = new O(t, 10).toString(2),\n      r = 7 - i.length % 7;\n      7 == r && (r = 0);\n      for (var n = \"\", s = 0; s < r; s++) {n += \"0\";}\n      i = n + i;\n      for (s = 0; s < i.length - 1; s += 7) {\n        var o = i.substr(s, 7);\n        s != i.length - 7 && (o = \"1\" + o), e += h(parseInt(o, 2));\n      }\n      return e;\n    };\n    et.asn1.DERObjectIdentifier.superclass.constructor.call(this), this.hT = \"06\", this.setValueHex = function (t) {\n      this.hTLV = null, this.isModified = !0, this.s = null, this.hV = t;\n    }, this.setValueOidString = function (t) {\n      if (!t.match(/^[0-9.]+$/)) throw \"malformed oid string: \" + t;\n      var e = \"\",\n      i = t.split(\".\"),\n      r = 40 * parseInt(i[0]) + parseInt(i[1]);\n      e += h(r), i.splice(0, 2);\n      for (var n = 0; n < i.length; n++) {e += s(i[n]);}\n      this.hTLV = null, this.isModified = !0, this.s = null, this.hV = e;\n    }, this.setValueName = function (t) {\n      var e = et.asn1.x509.OID.name2oid(t);\n      if (\"\" === e) throw \"DERObjectIdentifier oidName undefined: \" + t;\n      this.setValueOidString(e);\n    }, this.getFreshValueHex = function () {\n      return this.hV;\n    }, void 0 !== t && (\"string\" == typeof t ? t.match(/^[0-2].[0-9.]+$/) ? this.setValueOidString(t) : this.setValueName(\n    t) : void 0 !== t.oid ? this.setValueOidString(t.oid) : void 0 !== t.hex ? this.setValueHex(t.hex) : void 0 !==\n    t.name && this.setValueName(t.name));\n  }, tt.lang.extend(et.asn1.DERObjectIdentifier, et.asn1.ASN1Object), et.asn1.DEREnumerated = function (t) {\n    et.asn1.DEREnumerated.superclass.constructor.call(this), this.hT = \"0a\", this.setByBigInteger = function (t) {\n      this.hTLV = null, this.isModified = !0, this.hV = et.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t);\n    }, this.setByInteger = function (t) {\n      var e = new O(String(t), 10);\n      this.setByBigInteger(e);\n    }, this.setValueHex = function (t) {\n      this.hV = t;\n    }, this.getFreshValueHex = function () {\n      return this.hV;\n    }, void 0 !== t && (void 0 !== t.int ? this.setByInteger(t.int) : \"number\" == typeof t ? this.setByInteger(t) :\n    void 0 !== t.hex && this.setValueHex(t.hex));\n  }, tt.lang.extend(et.asn1.DEREnumerated, et.asn1.ASN1Object), et.asn1.DERUTF8String = function (t) {\n    et.asn1.DERUTF8String.superclass.constructor.call(this, t), this.hT = \"0c\";\n  }, tt.lang.extend(et.asn1.DERUTF8String, et.asn1.DERAbstractString), et.asn1.DERNumericString = function (t) {\n    et.asn1.DERNumericString.superclass.constructor.call(this, t), this.hT = \"12\";\n  }, tt.lang.extend(et.asn1.DERNumericString, et.asn1.DERAbstractString), et.asn1.DERPrintableString = function (t) {\n    et.asn1.DERPrintableString.superclass.constructor.call(this, t), this.hT = \"13\";\n  }, tt.lang.extend(et.asn1.DERPrintableString, et.asn1.DERAbstractString), et.asn1.DERTeletexString = function (t) {\n    et.asn1.DERTeletexString.superclass.constructor.call(this, t), this.hT = \"14\";\n  }, tt.lang.extend(et.asn1.DERTeletexString, et.asn1.DERAbstractString), et.asn1.DERIA5String = function (t) {\n    et.asn1.DERIA5String.superclass.constructor.call(this, t), this.hT = \"16\";\n  }, tt.lang.extend(et.asn1.DERIA5String, et.asn1.DERAbstractString), et.asn1.DERUTCTime = function (t) {\n    et.asn1.DERUTCTime.superclass.constructor.call(this, t), this.hT = \"17\", this.setByDate = function (t) {\n      this.hTLV = null, this.isModified = !0, this.date = t, this.s = this.formatDate(this.date, \"utc\"), this.hV =\n      stohex(this.s);\n    }, this.getFreshValueHex = function () {\n      return void 0 === this.date && void 0 === this.s && (this.date = new Date(), this.s = this.formatDate(this.date,\n      \"utc\"), this.hV = stohex(this.s)), this.hV;\n    }, void 0 !== t && (void 0 !== t.str ? this.setString(t.str) : \"string\" == typeof t && t.match(/^[0-9]{12}Z$/) ?\n    this.setString(t) : void 0 !== t.hex ? this.setStringHex(t.hex) : void 0 !== t.date && this.setByDate(t.date));\n  }, tt.lang.extend(et.asn1.DERUTCTime, et.asn1.DERAbstractTime), et.asn1.DERGeneralizedTime = function (t) {\n    et.asn1.DERGeneralizedTime.superclass.constructor.call(this, t), this.hT = \"18\", this.withMillis = !1, this.setByDate =\n    function (t) {\n      this.hTLV = null, this.isModified = !0, this.date = t, this.s = this.formatDate(this.date, \"gen\", this.withMillis),\n      this.hV = stohex(this.s);\n    }, this.getFreshValueHex = function () {\n      return void 0 === this.date && void 0 === this.s && (this.date = new Date(), this.s = this.formatDate(this.date,\n      \"gen\", this.withMillis), this.hV = stohex(this.s)), this.hV;\n    }, void 0 !== t && (void 0 !== t.str ? this.setString(t.str) : \"string\" == typeof t && t.match(/^[0-9]{14}Z$/) ?\n    this.setString(t) : void 0 !== t.hex ? this.setStringHex(t.hex) : void 0 !== t.date && this.setByDate(t.date), !0 ===\n    t.millis && (this.withMillis = !0));\n  }, tt.lang.extend(et.asn1.DERGeneralizedTime, et.asn1.DERAbstractTime), et.asn1.DERSequence = function (t) {\n    et.asn1.DERSequence.superclass.constructor.call(this, t), this.hT = \"30\", this.getFreshValueHex = function () {\n      for (var t = \"\", e = 0; e < this.asn1Array.length; e++) {\n        t += this.asn1Array[e].getEncodedHex();\n      }\n      return this.hV = t, this.hV;\n    };\n  }, tt.lang.extend(et.asn1.DERSequence, et.asn1.DERAbstractStructured), et.asn1.DERSet = function (t) {\n    et.asn1.DERSet.superclass.constructor.call(this, t), this.hT = \"31\", this.sortFlag = !0, this.getFreshValueHex =\n    function () {\n      for (var t = new Array(), e = 0; e < this.asn1Array.length; e++) {\n        var i = this.asn1Array[e];\n        t.push(i.getEncodedHex());\n      }\n      return 1 == this.sortFlag && t.sort(), this.hV = t.join(\"\"), this.hV;\n    }, void 0 !== t && void 0 !== t.sortflag && 0 == t.sortflag && (this.sortFlag = !1);\n  }, tt.lang.extend(et.asn1.DERSet, et.asn1.DERAbstractStructured), et.asn1.DERTaggedObject = function (t) {\n    et.asn1.DERTaggedObject.superclass.constructor.call(this), this.hT = \"a0\", this.hV = \"\", this.isExplicit = !0, this.\n    asn1Object = null, this.setASN1Object = function (t, e, i) {\n      this.hT = e, this.isExplicit = t, this.asn1Object = i, this.isExplicit ? (this.hV = this.asn1Object.getEncodedHex(),\n      this.hTLV = null, this.isModified = !0) : (this.hV = null, this.hTLV = i.getEncodedHex(), this.hTLV = this.hTLV.\n      replace(/^../, e), this.isModified = !1);\n    }, this.getFreshValueHex = function () {\n      return this.hV;\n    }, void 0 !== t && (void 0 !== t.tag && (this.hT = t.tag), void 0 !== t.explicit && (this.isExplicit = t.explicit),\n    void 0 !== t.obj && (this.asn1Object = t.obj, this.setASN1Object(this.isExplicit, this.hT, this.asn1Object)));\n  }, tt.lang.extend(et.asn1.DERTaggedObject, et.asn1.ASN1Object);\n  var it = function (i) {\n    function r(t) {\n      var e = i.call(this) || this;\n      return t && (\"string\" == typeof t ? e.parseKey(t) : (r.hasPrivateKeyProperty(t) || r.hasPublicKeyProperty(t)) && e.\n      parsePropertiesFrom(t)), e;\n    }\n    return function (t, e) {\n      function i() {\n        this.constructor = t;\n      }\n      _p(t, e), t.prototype = null === e ? Object.create(e) : (i.prototype = e.prototype, new i());\n    }(r, i), r.prototype.parseKey = function (t) {\n      try {\n        var e = 0,\n        i = 0,\n        r = /^\\s*(?:[0-9A-Fa-f][0-9A-Fa-f]\\s*)+$/.test(t) ? d(t) : v.unarmor(t),\n        n = x.decode(r);\n        if (3 === n.sub.length && (n = n.sub[2].sub[0]), 9 === n.sub.length) {\n          e = n.sub[1].getHexStringValue(), this.n = q(e, 16), i = n.sub[2].getHexStringValue(), this.e = parseInt(i, 16);\n          var s = n.sub[3].getHexStringValue();\n          this.d = q(s, 16);\n          var o = n.sub[4].getHexStringValue();\n          this.p = q(o, 16);\n          var h = n.sub[5].getHexStringValue();\n          this.q = q(h, 16);\n          var a = n.sub[6].getHexStringValue();\n          this.dmp1 = q(a, 16);\n          var u = n.sub[7].getHexStringValue();\n          this.dmq1 = q(u, 16);\n          var c = n.sub[8].getHexStringValue();\n          this.coeff = q(c, 16);\n        } else {\n          if (2 !== n.sub.length) return !1;\n          var f = n.sub[1].sub[0];\n          e = f.sub[0].getHexStringValue(), this.n = q(e, 16), i = f.sub[1].getHexStringValue(), this.e = parseInt(i, 16);\n        }\n        return !0;\n      } catch (t) {\n        return !1;\n      }\n    }, r.prototype.getPrivateBaseKey = function () {\n      var t = {\n        array: [new et.asn1.DERInteger({\n          int: 0 }),\n        new et.asn1.DERInteger({\n          bigint: this.n }),\n        new et.asn1.DERInteger({\n          int: this.e }),\n        new et.asn1.DERInteger({\n          bigint: this.d }),\n        new et.asn1.DERInteger({\n          bigint: this.p }),\n        new et.asn1.DERInteger({\n          bigint: this.q }),\n        new et.asn1.DERInteger({\n          bigint: this.dmp1 }),\n        new et.asn1.DERInteger({\n          bigint: this.dmq1 }),\n        new et.asn1.DERInteger({\n          bigint: this.coeff })] };\n\n\n      return new et.asn1.DERSequence(t).getEncodedHex();\n    }, r.prototype.getPrivateBaseKeyB64 = function () {\n      return c(this.getPrivateBaseKey());\n    }, r.prototype.getPublicBaseKey = function () {\n      var t = new et.asn1.DERSequence({\n        array: [new et.asn1.DERObjectIdentifier({\n          oid: \"1.2.840.113549.1.1.1\" }),\n        new et.asn1.DERNull()] }),\n\n      e = new et.asn1.DERSequence({\n        array: [new et.asn1.DERInteger({\n          bigint: this.n }),\n        new et.asn1.DERInteger({\n          int: this.e })] }),\n\n\n      i = new et.asn1.DERBitString({\n        hex: \"00\" + e.getEncodedHex() });\n\n      return new et.asn1.DERSequence({\n        array: [t, i] }).\n      getEncodedHex();\n    }, r.prototype.getPublicBaseKeyB64 = function () {\n      return c(this.getPublicBaseKey());\n    }, r.wordwrap = function (t, e) {\n      if (!t) return t;\n      var i = \"(.{1,\" + (e = e || 64) + \"})( +|$\\n?)|(.{1,\" + e + \"})\";\n      return t.match(RegExp(i, \"g\")).join(\"\\n\");\n    }, r.prototype.getPrivateKey = function () {\n      var t = \"-----BEGIN RSA PRIVATE KEY-----\\n\";\n      return t += r.wordwrap(this.getPrivateBaseKeyB64()) + \"\\n\", t += \"-----END RSA PRIVATE KEY-----\";\n    }, r.prototype.getPublicKey = function () {\n      var t = \"-----BEGIN PUBLIC KEY-----\\n\";\n      return t += r.wordwrap(this.getPublicBaseKeyB64()) + \"\\n\", t += \"-----END PUBLIC KEY-----\";\n    }, r.hasPublicKeyProperty = function (t) {\n      return (t = t || {}).hasOwnProperty(\"n\") && t.hasOwnProperty(\"e\");\n    }, r.hasPrivateKeyProperty = function (t) {\n      return (t = t || {}).hasOwnProperty(\"n\") && t.hasOwnProperty(\"e\") && t.hasOwnProperty(\"d\") && t.hasOwnProperty(\n      \"p\") && t.hasOwnProperty(\"q\") && t.hasOwnProperty(\"dmp1\") && t.hasOwnProperty(\"dmq1\") && t.hasOwnProperty(\n      \"coeff\");\n    }, r.prototype.parsePropertiesFrom = function (t) {\n      this.n = t.n, this.e = t.e, t.hasOwnProperty(\"d\") && (this.d = t.d, this.p = t.p, this.q = t.q, this.dmp1 = t.dmp1,\n      this.dmq1 = t.dmq1, this.coeff = t.coeff);\n    }, r;\n  }(Q),\n  rt = function () {\n    function t(t) {\n      t = t || {}, this.default_key_size = parseInt(t.default_key_size, 10) || 1024, this.default_public_exponent = t.default_public_exponent ||\n      \"010001\", this.log = t.log || !1, this.key = null;\n    }\n    return t.prototype.setKey = function (t) {\n      this.log && this.key && console.warn(__f__(\"A key was already set, overriding existing.\", \" at common\\\\js\\\\jsencrypt.min.js:1803\")), this.key = new it(t);\n    }, t.prototype.setPrivateKey = function (t) {\n      this.setKey(t);\n    }, t.prototype.setPublicKey = function (t) {\n      this.setKey(t);\n    }, t.prototype.decrypt = function (t) {\n      try {\n        return this.getKey().decrypt(f(t));\n      } catch (t) {\n        return !1;\n      }\n    }, t.prototype.encrypt = function (t) {\n      try {\n        return c(this.getKey().encrypt(t));\n      } catch (t) {\n        return !1;\n      }\n    }, t.prototype.sign = function (t, e, i) {\n      try {\n        return c(this.getKey().sign(t, e, i));\n      } catch (t) {\n        return !1;\n      }\n    }, t.prototype.verify = function (t, e, i) {\n      try {\n        return this.getKey().verify(t, f(e), i);\n      } catch (t) {\n        return !1;\n      }\n    }, t.prototype.getKey = function (t) {\n      if (!this.key) {\n        if (this.key = new it(), t && \"[object Function]\" === {}.toString.call(t)) return void this.key.generateAsync(this.\n        default_key_size, this.default_public_exponent, t);\n        this.key.generate(this.default_key_size, this.default_public_exponent);\n      }\n      return this.key;\n    }, t.prototype.getPrivateKey = function () {\n      return this.getKey().getPrivateKey();\n    }, t.prototype.getPrivateKeyB64 = function () {\n      return this.getKey().getPrivateBaseKeyB64();\n    }, t.prototype.getPublicKey = function () {\n      return this.getKey().getPublicKey();\n    }, t.prototype.getPublicKeyB64 = function () {\n      return this.getKey().getPublicBaseKeyB64();\n    }, t.version = \"3.0.0-rc.1\", t;\n  }();\n  window2.JSEncrypt = rt, t.JSEncrypt = rt, t.default = rt, Object.defineProperty(t, \"__esModule\", {\n    value: !0 });\n\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tbW9uL2pzL2pzZW5jcnlwdC5taW4uanMiXSwibmFtZXMiOlsidCIsImUiLCJleHBvcnRzIiwibmF2aWdhdG9yMiIsImFwcE5hbWUiLCJ1c2VyQWdlbnQiLCJ3aW5kb3cyIiwiQVNOMSIsIkJhc2U2NCIsIkhleCIsImNyeXB0byIsImhyZWYiLCJhIiwiY2hhckF0IiwiaSIsInUiLCJyIiwibiIsInMiLCJvIiwiaCIsImMiLCJsZW5ndGgiLCJwYXJzZUludCIsInN1YnN0cmluZyIsImYiLCJpbmRleE9mIiwibCIsInAiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwiaGFzT3duUHJvcGVydHkiLCJnIiwiZCIsInRvTG93ZXJDYXNlIiwiRXJyb3IiLCJ2IiwiZGVjb2RlIiwiY3JlYXRlIiwicmUiLCJ1bmFybW9yIiwiZXhlYyIsIm0iLCJ5IiwiYnVmIiwicHJvdG90eXBlIiwibXVsQWRkIiwic3ViIiwicG9wIiwidG9TdHJpbmciLCJ2YWx1ZU9mIiwic2ltcGxpZnkiLCJiIiwiVCIsIlMiLCJFIiwidyIsIkQiLCJoZXhEaWdpdHMiLCJlbmMiLCJwb3MiLCJnZXQiLCJjaGFyQ29kZUF0IiwiaGV4Qnl0ZSIsImhleER1bXAiLCJpc0FTQ0lJIiwicGFyc2VTdHJpbmdJU08iLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJwYXJzZVN0cmluZ1VURiIsInBhcnNlU3RyaW5nQk1QIiwicGFyc2VUaW1lIiwicGFyc2VJbnRlZ2VyIiwicGFyc2VCaXRTdHJpbmciLCJwYXJzZU9jdGV0U3RyaW5nIiwicGFyc2VPSUQiLCJ4IiwiUiIsInN0cmVhbSIsImhlYWRlciIsInRhZyIsInR5cGVOYW1lIiwidGFnQ2xhc3MiLCJ0YWdOdW1iZXIiLCJjb250ZW50IiwicG9zQ29udGVudCIsIk1hdGgiLCJhYnMiLCJpc1VuaXZlcnNhbCIsInRvUHJldHR5U3RyaW5nIiwidGFnQ29uc3RydWN0ZWQiLCJwb3NTdGFydCIsInBvc0VuZCIsInRvSGV4U3RyaW5nIiwiZGVjb2RlTGVuZ3RoIiwiZ2V0SGV4U3RyaW5nVmFsdWUiLCJzdWJzdHIiLCJpc0VPQyIsIkIiLCJBIiwiTyIsImZyb21OdW1iZXIiLCJmcm9tU3RyaW5nIiwibmVnYXRlIiwidG9SYWRpeCIsIkRCIiwiTSIsIlpFUk8iLCJzdWJUbyIsImNvbXBhcmVUbyIsImJpdExlbmd0aCIsIlUiLCJETSIsIm1vZCIsImRpdlJlbVRvIiwibW9kUG93SW50IiwiaXNFdmVuIiwiSSIsIk4iLCJleHAiLCJjbG9uZSIsImNvcHlUbyIsImludFZhbHVlIiwiRFYiLCJieXRlVmFsdWUiLCJzaG9ydFZhbHVlIiwic2lnbnVtIiwidG9CeXRlQXJyYXkiLCJlcXVhbHMiLCJtaW4iLCJtYXgiLCJhbmQiLCJiaXR3aXNlVG8iLCJvciIsInhvciIsImFuZE5vdCIsIm5vdCIsInNoaWZ0TGVmdCIsInJTaGlmdFRvIiwibFNoaWZ0VG8iLCJzaGlmdFJpZ2h0IiwiZ2V0TG93ZXN0U2V0Qml0IiwiYml0Q291bnQiLCJ0ZXN0Qml0IiwiZmxvb3IiLCJzZXRCaXQiLCJjaGFuZ2VCaXQiLCJjbGVhckJpdCIsImZsaXBCaXQiLCJhZGQiLCJhZGRUbyIsInN1YnRyYWN0IiwibXVsdGlwbHkiLCJtdWx0aXBseVRvIiwiZGl2aWRlIiwicmVtYWluZGVyIiwiZGl2aWRlQW5kUmVtYWluZGVyIiwibW9kUG93IiwiRiIsIlAiLCJjb252ZXJ0Iiwic3FyVG8iLCJtdWxUbyIsInJldmVydCIsIm1vZEludmVyc2UiLCJPTkUiLCJwb3ciLCJWIiwiZ2NkIiwiaXNQcm9iYWJsZVByaW1lIiwibW9kSW50IiwibWlsbGVyUmFiaW4iLCJmcm9tSW50IiwiZnJvbVJhZGl4IiwiQyIsImNsYW1wIiwiZGxTaGlmdFRvIiwiZHJTaGlmdFRvIiwiYW0iLCJzcXVhcmVUbyIsIkYxIiwiRjIiLCJGViIsImludkRpZ2l0IiwiY2h1bmtTaXplIiwiTE4yIiwibG9nIiwiZE11bHRpcGx5IiwiZEFkZE9mZnNldCIsIm5leHRCeXRlcyIsIm11bHRpcGx5TG93ZXJUbyIsIm11bHRpcGx5VXBwZXJUbyIsInJhbmRvbSIsInNxdWFyZSIsImdjZGEiLCJzZXRUaW1lb3V0IiwiZnJvbU51bWJlckFzeW5jIiwicmVkdWNlIiwibXAiLCJtcGwiLCJtcGgiLCJ1bSIsIm10MiIsInIyIiwicTMiLCJtdSIsInEiLCJqIiwiTCIsIkgiLCJLIiwiaW5pdCIsIm5leHQiLCJrIiwiXyIsInoiLCJaIiwiRyIsImdldFJhbmRvbVZhbHVlcyIsIiQiLCJVaW50MzJBcnJheSIsIlkiLCJjb3VudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkZXRhY2hFdmVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsIkoiLCJYIiwiUSIsImRtcDEiLCJkbXExIiwiY29lZmYiLCJkb1B1YmxpYyIsImRvUHJpdmF0ZSIsInNldFB1YmxpYyIsImNvbnNvbGUiLCJlcnJvciIsImVuY3J5cHQiLCJzZXRQcml2YXRlIiwic2V0UHJpdmF0ZUV4IiwiZ2VuZXJhdGUiLCJkZWNyeXB0IiwiZ2VuZXJhdGVBc3luYyIsInNpZ24iLCJXIiwidmVyaWZ5IiwicmVwbGFjZSIsIm1kMiIsIm1kNSIsInNoYTEiLCJzaGEyMjQiLCJzaGEyNTYiLCJzaGEzODQiLCJzaGE1MTIiLCJyaXBlbWQxNjAiLCJ0dCIsImxhbmciLCJleHRlbmQiLCJjb25zdHJ1Y3RvciIsInN1cGVyY2xhc3MiLCJ0ZXN0IiwiZXQiLCJhc24xIiwiQVNOMVV0aWwiLCJpbnRlZ2VyVG9CeXRlSGV4IiwiYmlnSW50VG9NaW5Ud29zQ29tcGxlbWVudHNIZXgiLCJtYXRjaCIsImdldFBFTVN0cmluZ0Zyb21IZXgiLCJoZXh0b3BlbSIsIm5ld09iamVjdCIsIkRFUkJvb2xlYW4iLCJERVJJbnRlZ2VyIiwiREVSQml0U3RyaW5nIiwiREVST2N0ZXRTdHJpbmciLCJERVJOdWxsIiwiREVST2JqZWN0SWRlbnRpZmllciIsIkRFUkVudW1lcmF0ZWQiLCJERVJVVEY4U3RyaW5nIiwiREVSTnVtZXJpY1N0cmluZyIsIkRFUlByaW50YWJsZVN0cmluZyIsIkRFUlRlbGV0ZXhTdHJpbmciLCJERVJJQTVTdHJpbmciLCJERVJVVENUaW1lIiwiREVSR2VuZXJhbGl6ZWRUaW1lIiwiREVSU2VxdWVuY2UiLCJERVJTZXQiLCJERVJUYWdnZWRPYmplY3QiLCJrZXlzIiwicHVzaCIsImFycmF5IiwiY2FsbCIsImV4cGxpY2l0Iiwib2JqIiwianNvblRvQVNOMUhFWCIsImdldEVuY29kZWRIZXgiLCJvaWRIZXhUb0ludCIsInNsaWNlIiwib2lkSW50VG9IZXgiLCJzcGxpdCIsInNwbGljZSIsIkFTTjFPYmplY3QiLCJnZXRMZW5ndGhIZXhGcm9tVmFsdWUiLCJoViIsImhUTFYiLCJpc01vZGlmaWVkIiwiZ2V0RnJlc2hWYWx1ZUhleCIsImhMIiwiaFQiLCJnZXRWYWx1ZUhleCIsIkRFUkFic3RyYWN0U3RyaW5nIiwiZ2V0U3RyaW5nIiwic2V0U3RyaW5nIiwic3RvaGV4Iiwic2V0U3RyaW5nSGV4Iiwic3RyIiwiaGV4IiwiREVSQWJzdHJhY3RUaW1lIiwibG9jYWxEYXRlVG9VVEMiLCJ1dGMiLCJnZXRUaW1lIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJEYXRlIiwiZm9ybWF0RGF0ZSIsInplcm9QYWRkaW5nIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwiam9pbiIsInNldEJ5RGF0ZVZhbHVlIiwiVVRDIiwic2V0QnlEYXRlIiwiREVSQWJzdHJhY3RTdHJ1Y3R1cmVkIiwic2V0QnlBU04xT2JqZWN0QXJyYXkiLCJhc24xQXJyYXkiLCJhcHBlbmRBU04xT2JqZWN0Iiwic2V0QnlCaWdJbnRlZ2VyIiwic2V0QnlJbnRlZ2VyIiwic2V0VmFsdWVIZXgiLCJiaWdpbnQiLCJpbnQiLCJzZXRIZXhWYWx1ZUluY2x1ZGluZ1VudXNlZEJpdHMiLCJzZXRVbnVzZWRCaXRzQW5kSGV4VmFsdWUiLCJzZXRCeUJpbmFyeVN0cmluZyIsInNldEJ5Qm9vbGVhbkFycmF5IiwibmV3RmFsc2VBcnJheSIsImJpbiIsInNldFZhbHVlT2lkU3RyaW5nIiwic2V0VmFsdWVOYW1lIiwieDUwOSIsIk9JRCIsIm5hbWUyb2lkIiwib2lkIiwibmFtZSIsImRhdGUiLCJ3aXRoTWlsbGlzIiwibWlsbGlzIiwic29ydEZsYWciLCJzb3J0Iiwic29ydGZsYWciLCJpc0V4cGxpY2l0IiwiYXNuMU9iamVjdCIsInNldEFTTjFPYmplY3QiLCJpdCIsInBhcnNlS2V5IiwiaGFzUHJpdmF0ZUtleVByb3BlcnR5IiwiaGFzUHVibGljS2V5UHJvcGVydHkiLCJwYXJzZVByb3BlcnRpZXNGcm9tIiwiZ2V0UHJpdmF0ZUJhc2VLZXkiLCJnZXRQcml2YXRlQmFzZUtleUI2NCIsImdldFB1YmxpY0Jhc2VLZXkiLCJnZXRQdWJsaWNCYXNlS2V5QjY0Iiwid29yZHdyYXAiLCJSZWdFeHAiLCJnZXRQcml2YXRlS2V5IiwiZ2V0UHVibGljS2V5IiwicnQiLCJkZWZhdWx0X2tleV9zaXplIiwiZGVmYXVsdF9wdWJsaWNfZXhwb25lbnQiLCJrZXkiLCJzZXRLZXkiLCJ3YXJuIiwic2V0UHJpdmF0ZUtleSIsInNldFB1YmxpY0tleSIsImdldEtleSIsImdldFByaXZhdGVLZXlCNjQiLCJnZXRQdWJsaWNLZXlCNjQiLCJ2ZXJzaW9uIiwiSlNFbmNyeXB0IiwiZGVmYXVsdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiXSwibWFwcGluZ3MiOiI2Q0FBQSxDQUFFLFVBQVNBLENBQVQsRUFBWUMsQ0FBWixFQUFlO0FBQ2hCLFVBQTZEQSxDQUFDLENBQUNDLE9BQUQsQ0FBOUQsR0FBMEUsU0FBMUU7QUFFQSxDQUhDLFNBR00sVUFBU0YsQ0FBVCxFQUFZO0FBQ25CO0FBQ0E7QUFDQztBQUNBLE1BQUlHLFVBQVUsR0FBRztBQUNmQyxXQUFPLEVBQUUsVUFETTtBQUVmQyxhQUFTLEVBQUUsdUlBRkksRUFBakI7O0FBSUE7QUFDQSxNQUFJQyxPQUFPLEdBQUc7QUFDWkMsUUFBSSxFQUFFLElB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QUFLQyx1QkFBOUM7QUFDQTtBQUNELGFBQU8sS0FBS0MsR0FBWjtBQUNBLEtBckNNLEVBcUNKalksQ0FBQyxDQUFDK0MsU0FBRixDQUFZNlUsYUFBWixHQUE0QixZQUFXO0FBQ3pDLGFBQU8sS0FBS1UsTUFBTCxHQUFjVixhQUFkLEVBQVA7QUFDQSxLQXZDTSxFQXVDSjVYLENBQUMsQ0FBQytDLFNBQUYsQ0FBWXdWLGdCQUFaLEdBQStCLFlBQVc7QUFDNUMsYUFBTyxLQUFLRCxNQUFMLEdBQWNmLG9CQUFkLEVBQVA7QUFDQSxLQXpDTSxFQXlDSnZYLENBQUMsQ0FBQytDLFNBQUYsQ0FBWThVLFlBQVosR0FBMkIsWUFBVztBQUN4QyxhQUFPLEtBQUtTLE1BQUwsR0FBY1QsWUFBZCxFQUFQO0FBQ0EsS0EzQ00sRUEyQ0o3WCxDQUFDLENBQUMrQyxTQUFGLENBQVl5VixlQUFaLEdBQThCLFlBQVc7QUFDM0MsYUFBTyxLQUFLRixNQUFMLEdBQWNiLG1CQUFkLEVBQVA7QUFDQSxLQTdDTSxFQTZDSnpYLENBQUMsQ0FBQ3lZLE9BQUYsR0FBWSxZQTdDUixFQTZDc0J6WSxDQTdDN0I7QUE4Q0EsR0FuREksRUEzR047QUErSkFNLFNBQU8sQ0FBQ29ZLFNBQVIsR0FBb0JaLEVBQXBCLEVBQXdCOVgsQ0FBQyxDQUFDMFksU0FBRixHQUFjWixFQUF0QyxFQUEwQzlYLENBQUMsQ0FBQzJZLE9BQUYsR0FBWWIsRUFBdEQsRUFBMERqVyxNQUFNLENBQUMrVyxjQUFQLENBQXNCNVksQ0FBdEIsRUFBeUIsWUFBekIsRUFBdUM7QUFDaEc2WSxTQUFLLEVBQUUsQ0FBQyxDQUR3RixFQUF2QyxDQUExRDs7QUFHQSxDQTN6REMsQ0FBRixDIiwiZmlsZSI6IjM0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiISBmdW5jdGlvbih0LCBlKSB7XHJcblx0XCJvYmplY3RcIiA9PSB0eXBlb2YgZXhwb3J0cyAmJiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBtb2R1bGUgPyBlKGV4cG9ydHMpIDogXCJmdW5jdGlvblwiID09IHR5cGVvZiBkZWZpbmUgJiYgZGVmaW5lLmFtZCA/XHJcblx0XHRkZWZpbmUoW1wiZXhwb3J0c1wiXSwgZSkgOiBlKHQuSlNFbmNyeXB0ID0ge30pXHJcbn0odGhpcywgZnVuY3Rpb24odCkge1xyXG5cdFwidXNlIHN0cmljdFwiO1xyXG5cdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tIOi/memHjOW8gOWni+a3u+WKoC0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gIC8vIOeUqOadpeabv+aNoiBuYXZpZ2F0b3IyXHJcbiAgdmFyIG5hdmlnYXRvcjIgPSB7XHJcbiAgICBhcHBOYW1lOiAnTmV0c2NhcGUnLFxyXG4gICAgdXNlckFnZW50OiAnTW96aWxsYS81LjAgKGlQaG9uZTsgQ1BVIGlQaG9uZSBPUyA5XzEgbGlrZSBNYWMgT1MgWCkgQXBwbGVXZWJLaXQvNjAxLjEuNDYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzkuMCBNb2JpbGUvMTNCMTQzIFNhZmFyaS82MDEuMSdcclxuICB9O1xyXG4gIC8vICDnlKjmnaXmm7/mjaJ3aW5kb3cyXHJcbiAgdmFyIHdpbmRvdzIgPSB7XHJcbiAgICBBU04xOiBudWxsLFxyXG4gICAgQmFzZTY0OiBudWxsLFxyXG4gICAgSGV4OiBudWxsLFxyXG4gICAgY3J5cHRvOiBudWxsLFxyXG4gICAgaHJlZjogbnVsbFxyXG4gIH07XHJcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tIOi/memHjOe7k+adn+a3u+WKoC0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdHZhciBlID0gXCIwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpcIjtcclxuXHJcblx0ZnVuY3Rpb24gYSh0KSB7XHJcblx0XHRyZXR1cm4gZS5jaGFyQXQodClcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGkodCwgZSkge1xyXG5cdFx0cmV0dXJuIHQgJiBlXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiB1KHQsIGUpIHtcclxuXHRcdHJldHVybiB0IHwgZVxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gcih0LCBlKSB7XHJcblx0XHRyZXR1cm4gdCBeIGVcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIG4odCwgZSkge1xyXG5cdFx0cmV0dXJuIHQgJiB+ZVxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gcyh0KSB7XHJcblx0XHRpZiAoMCA9PSB0KSByZXR1cm4gLTE7XHJcblx0XHR2YXIgZSA9IDA7XHJcblx0XHRyZXR1cm4gMCA9PSAoNjU1MzUgJiB0KSAmJiAodCA+Pj0gMTYsIGUgKz0gMTYpLCAwID09ICgyNTUgJiB0KSAmJiAodCA+Pj0gOCwgZSArPSA4KSwgMCA9PSAoMTUgJiB0KSAmJiAodCA+Pj0gNCwgZSArPVxyXG5cdFx0XHQ0KSwgMCA9PSAoMyAmIHQpICYmICh0ID4+PSAyLCBlICs9IDIpLCAwID09ICgxICYgdCkgJiYgKytlLCBlXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBvKHQpIHtcclxuXHRcdGZvciAodmFyIGUgPSAwOyAwICE9IHQ7KSB0ICY9IHQgLSAxLCArK2U7XHJcblx0XHRyZXR1cm4gZVxyXG5cdH1cclxuXHR2YXIgaCA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiO1xyXG5cclxuXHRmdW5jdGlvbiBjKHQpIHtcclxuXHRcdHZhciBlLCBpLCByID0gXCJcIjtcclxuXHRcdGZvciAoZSA9IDA7IGUgKyAzIDw9IHQubGVuZ3RoOyBlICs9IDMpIGkgPSBwYXJzZUludCh0LnN1YnN0cmluZyhlLCBlICsgMyksIDE2KSwgciArPSBoLmNoYXJBdChpID4+IDYpICsgaC5jaGFyQXQoNjMgJlxyXG5cdFx0XHRpKTtcclxuXHRcdGZvciAoZSArIDEgPT0gdC5sZW5ndGggPyAoaSA9IHBhcnNlSW50KHQuc3Vic3RyaW5nKGUsIGUgKyAxKSwgMTYpLCByICs9IGguY2hhckF0KGkgPDwgMikpIDogZSArIDIgPT0gdC5sZW5ndGggJiYgKGkgPVxyXG5cdFx0XHRcdHBhcnNlSW50KHQuc3Vic3RyaW5nKGUsIGUgKyAyKSwgMTYpLCByICs9IGguY2hhckF0KGkgPj4gMikgKyBoLmNoYXJBdCgoMyAmIGkpIDw8IDQpKTsgMCA8ICgzICYgci5sZW5ndGgpOykgciArPVxyXG5cdFx0XHRcIj1cIjtcclxuXHRcdHJldHVybiByXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBmKHQpIHtcclxuXHRcdHZhciBlLCBpID0gXCJcIixcclxuXHRcdFx0ciA9IDAsXHJcblx0XHRcdG4gPSAwO1xyXG5cdFx0Zm9yIChlID0gMDsgZSA8IHQubGVuZ3RoICYmIFwiPVwiICE9IHQuY2hhckF0KGUpOyArK2UpIHtcclxuXHRcdFx0dmFyIHMgPSBoLmluZGV4T2YodC5jaGFyQXQoZSkpO1xyXG5cdFx0XHRzIDwgMCB8fCAoMCA9PSByID8gKGkgKz0gYShzID4+IDIpLCBuID0gMyAmIHMsIHIgPSAxKSA6IDEgPT0gciA/IChpICs9IGEobiA8PCAyIHwgcyA+PiA0KSwgbiA9IDE1ICYgcywgciA9IDIpIDogMiA9PVxyXG5cdFx0XHRcdHIgPyAoaSArPSBhKG4pLCBpICs9IGEocyA+PiAyKSwgbiA9IDMgJiBzLCByID0gMykgOiAoaSArPSBhKG4gPDwgMiB8IHMgPj4gNCksIGkgKz0gYSgxNSAmIHMpLCByID0gMCkpXHJcblx0XHR9XHJcblx0XHRyZXR1cm4gMSA9PSByICYmIChpICs9IGEobiA8PCAyKSksIGlcclxuXHR9XHJcblx0dmFyIGwsIHAgPSBmdW5jdGlvbih0LCBlKSB7XHJcblx0XHRyZXR1cm4gKHAgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwge1xyXG5cdFx0XHRcdF9fcHJvdG9fXzogW11cclxuXHRcdFx0fVxyXG5cdFx0XHRpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uKHQsIGUpIHtcclxuXHRcdFx0XHR0Ll9fcHJvdG9fXyA9IGVcclxuXHRcdFx0fSB8fCBmdW5jdGlvbih0LCBlKSB7XHJcblx0XHRcdFx0Zm9yICh2YXIgaSBpbiBlKSBlLmhhc093blByb3BlcnR5KGkpICYmICh0W2ldID0gZVtpXSlcclxuXHRcdFx0fSkodCwgZSlcclxuXHR9O1xyXG5cdHZhciBnLCBkID0gZnVuY3Rpb24odCkge1xyXG5cdFx0XHR2YXIgZTtcclxuXHRcdFx0aWYgKHZvaWQgMCA9PT0gbCkge1xyXG5cdFx0XHRcdHZhciBpID0gXCIwMTIzNDU2Nzg5QUJDREVGXCIsXHJcblx0XHRcdFx0XHRyID0gXCIgXFxmXFxuXFxyXFx0wqBcXHUyMDI4XFx1MjAyOVwiO1xyXG5cdFx0XHRcdGZvciAobCA9IHt9LCBlID0gMDsgZSA8IDE2OyArK2UpIGxbaS5jaGFyQXQoZSldID0gZTtcclxuXHRcdFx0XHRmb3IgKGkgPSBpLnRvTG93ZXJDYXNlKCksIGUgPSAxMDsgZSA8IDE2OyArK2UpIGxbaS5jaGFyQXQoZSldID0gZTtcclxuXHRcdFx0XHRmb3IgKGUgPSAwOyBlIDwgci5sZW5ndGg7ICsrZSkgbFtyLmNoYXJBdChlKV0gPSAtMVxyXG5cdFx0XHR9XHJcblx0XHRcdHZhciBuID0gW10sXHJcblx0XHRcdFx0cyA9IDAsXHJcblx0XHRcdFx0byA9IDA7XHJcblx0XHRcdGZvciAoZSA9IDA7IGUgPCB0Lmxlbmd0aDsgKytlKSB7XHJcblx0XHRcdFx0dmFyIGggPSB0LmNoYXJBdChlKTtcclxuXHRcdFx0XHRpZiAoXCI9XCIgPT0gaCkgYnJlYWs7XHJcblx0XHRcdFx0aWYgKC0xICE9IChoID0gbFtoXSkpIHtcclxuXHRcdFx0XHRcdGlmICh2b2lkIDAgPT09IGgpIHRocm93IG5ldyBFcnJvcihcIklsbGVnYWwgY2hhcmFjdGVyIGF0IG9mZnNldCBcIiArIGUpO1xyXG5cdFx0XHRcdFx0cyB8PSBoLCAyIDw9ICsrbyA/IChuW24ubGVuZ3RoXSA9IHMsIG8gPSBzID0gMCkgOiBzIDw8PSA0XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdGlmIChvKSB0aHJvdyBuZXcgRXJyb3IoXCJIZXggZW5jb2RpbmcgaW5jb21wbGV0ZTogNCBiaXRzIG1pc3NpbmdcIik7XHJcblx0XHRcdHJldHVybiBuXHJcblx0XHR9LFxyXG5cdFx0diA9IHtcclxuXHRcdFx0ZGVjb2RlOiBmdW5jdGlvbih0KSB7XHJcblx0XHRcdFx0dmFyIGU7XHJcblx0XHRcdFx0aWYgKHZvaWQgMCA9PT0gZykge1xyXG5cdFx0XHRcdFx0dmFyIGkgPSBcIj0gXFxmXFxuXFxyXFx0wqBcXHUyMDI4XFx1MjAyOVwiO1xyXG5cdFx0XHRcdFx0Zm9yIChnID0gT2JqZWN0LmNyZWF0ZShudWxsKSwgZSA9IDA7IGUgPCA2NDsgKytlKSBnW1xyXG5cdFx0XHRcdFx0XHRcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky9cIi5jaGFyQXQoZSldID0gZTtcclxuXHRcdFx0XHRcdGZvciAoZSA9IDA7IGUgPCBpLmxlbmd0aDsgKytlKSBnW2kuY2hhckF0KGUpXSA9IC0xXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHZhciByID0gW10sXHJcblx0XHRcdFx0XHRuID0gMCxcclxuXHRcdFx0XHRcdHMgPSAwO1xyXG5cdFx0XHRcdGZvciAoZSA9IDA7IGUgPCB0Lmxlbmd0aDsgKytlKSB7XHJcblx0XHRcdFx0XHR2YXIgbyA9IHQuY2hhckF0KGUpO1xyXG5cdFx0XHRcdFx0aWYgKFwiPVwiID09IG8pIGJyZWFrO1xyXG5cdFx0XHRcdFx0aWYgKC0xICE9IChvID0gZ1tvXSkpIHtcclxuXHRcdFx0XHRcdFx0aWYgKHZvaWQgMCA9PT0gbykgdGhyb3cgbmV3IEVycm9yKFwiSWxsZWdhbCBjaGFyYWN0ZXIgYXQgb2Zmc2V0IFwiICsgZSk7XHJcblx0XHRcdFx0XHRcdG4gfD0gbywgNCA8PSArK3MgPyAocltyLmxlbmd0aF0gPSBuID4+IDE2LCByW3IubGVuZ3RoXSA9IG4gPj4gOCAmIDI1NSwgcltyLmxlbmd0aF0gPSAyNTUgJiBuLCBzID0gbiA9IDApIDogbiA8PD1cclxuXHRcdFx0XHRcdFx0XHQ2XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHN3aXRjaCAocykge1xyXG5cdFx0XHRcdFx0Y2FzZSAxOlxyXG5cdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJCYXNlNjQgZW5jb2RpbmcgaW5jb21wbGV0ZTogYXQgbGVhc3QgMiBiaXRzIG1pc3NpbmdcIik7XHJcblx0XHRcdFx0XHRjYXNlIDI6XHJcblx0XHRcdFx0XHRcdHJbci5sZW5ndGhdID0gbiA+PiAxMDtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRjYXNlIDM6XHJcblx0XHRcdFx0XHRcdHJbci5sZW5ndGhdID0gbiA+PiAxNiwgcltyLmxlbmd0aF0gPSBuID4+IDggJiAyNTVcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHJcclxuXHRcdFx0fSxcclxuXHRcdFx0cmU6IC8tLS0tLUJFR0lOIFteLV0rLS0tLS0oW0EtWmEtejAtOStcXC89XFxzXSspLS0tLS1FTkQgW14tXSstLS0tLXxiZWdpbi1iYXNlNjRbXlxcbl0rXFxuKFtBLVphLXowLTkrXFwvPVxcc10rKT09PT0vLFxyXG5cdFx0XHR1bmFybW9yOiBmdW5jdGlvbih0KSB7XHJcblx0XHRcdFx0dmFyIGUgPSB2LnJlLmV4ZWModCk7XHJcblx0XHRcdFx0aWYgKGUpXHJcblx0XHRcdFx0XHRpZiAoZVsxXSkgdCA9IGVbMV07XHJcblx0XHRcdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRcdFx0aWYgKCFlWzJdKSB0aHJvdyBuZXcgRXJyb3IoXCJSZWdFeHAgb3V0IG9mIHN5bmNcIik7XHJcblx0XHRcdFx0XHRcdHQgPSBlWzJdXHJcblx0XHRcdFx0XHR9IHJldHVybiB2LmRlY29kZSh0KVxyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0bSA9IDFlMTMsXHJcblx0XHR5ID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdGZ1bmN0aW9uIHQodCkge1xyXG5cdFx0XHRcdHRoaXMuYnVmID0gWyt0IHx8IDBdXHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHQucHJvdG90eXBlLm11bEFkZCA9IGZ1bmN0aW9uKHQsIGUpIHtcclxuXHRcdFx0XHR2YXIgaSwgciwgbiA9IHRoaXMuYnVmLFxyXG5cdFx0XHRcdFx0cyA9IG4ubGVuZ3RoO1xyXG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBzOyArK2kpKHIgPSBuW2ldICogdCArIGUpIDwgbSA/IGUgPSAwIDogciAtPSAoZSA9IDAgfCByIC8gbSkgKiBtLCBuW2ldID0gcjtcclxuXHRcdFx0XHQwIDwgZSAmJiAobltpXSA9IGUpXHJcblx0XHRcdH0sIHQucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdFx0XHR2YXIgZSwgaSwgciA9IHRoaXMuYnVmLFxyXG5cdFx0XHRcdFx0biA9IHIubGVuZ3RoO1xyXG5cdFx0XHRcdGZvciAoZSA9IDA7IGUgPCBuOyArK2UpKGkgPSByW2VdIC0gdCkgPCAwID8gKGkgKz0gbSwgdCA9IDEpIDogdCA9IDAsIHJbZV0gPSBpO1xyXG5cdFx0XHRcdGZvciAoOyAwID09PSByW3IubGVuZ3RoIC0gMV07KSByLnBvcCgpXHJcblx0XHRcdH0sIHQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24odCkge1xyXG5cdFx0XHRcdGlmICgxMCAhPSAodCB8fCAxMCkpIHRocm93IG5ldyBFcnJvcihcIm9ubHkgYmFzZSAxMCBpcyBzdXBwb3J0ZWRcIik7XHJcblx0XHRcdFx0Zm9yICh2YXIgZSA9IHRoaXMuYnVmLCBpID0gZVtlLmxlbmd0aCAtIDFdLnRvU3RyaW5nKCksIHIgPSBlLmxlbmd0aCAtIDI7IDAgPD0gcjsgLS1yKSBpICs9IChtICsgZVtyXSkudG9TdHJpbmcoKS5zdWJzdHJpbmcoXHJcblx0XHRcdFx0XHQxKTtcclxuXHRcdFx0XHRyZXR1cm4gaVxyXG5cdFx0XHR9LCB0LnByb3RvdHlwZS52YWx1ZU9mID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0Zm9yICh2YXIgdCA9IHRoaXMuYnVmLCBlID0gMCwgaSA9IHQubGVuZ3RoIC0gMTsgMCA8PSBpOyAtLWkpIGUgPSBlICogbSArIHRbaV07XHJcblx0XHRcdFx0cmV0dXJuIGVcclxuXHRcdFx0fSwgdC5wcm90b3R5cGUuc2ltcGxpZnkgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHR2YXIgdCA9IHRoaXMuYnVmO1xyXG5cdFx0XHRcdHJldHVybiAxID09IHQubGVuZ3RoID8gdFswXSA6IHRoaXNcclxuXHRcdFx0fSwgdFxyXG5cdFx0fSgpLFxyXG5cdFx0YiA9IFwi4oCmXCIsXHJcblx0XHRUID1cclxuXHRcdC9eKFxcZFxcZCkoMFsxLTldfDFbMC0yXSkoMFsxLTldfFsxMl1cXGR8M1swMV0pKFswMV1cXGR8MlswLTNdKSg/OihbMC01XVxcZCkoPzooWzAtNV1cXGQpKD86Wy4sXShcXGR7MSwzfSkpPyk/KT8oWnxbLStdKD86WzBdXFxkfDFbMC0yXSkoWzAtNV1cXGQpPyk/JC8sXHJcblx0XHRTID1cclxuXHRcdC9eKFxcZFxcZFxcZFxcZCkoMFsxLTldfDFbMC0yXSkoMFsxLTldfFsxMl1cXGR8M1swMV0pKFswMV1cXGR8MlswLTNdKSg/OihbMC01XVxcZCkoPzooWzAtNV1cXGQpKD86Wy4sXShcXGR7MSwzfSkpPyk/KT8oWnxbLStdKD86WzBdXFxkfDFbMC0yXSkoWzAtNV1cXGQpPyk/JC87XHJcblxyXG5cdGZ1bmN0aW9uIEUodCwgZSkge1xyXG5cdFx0cmV0dXJuIHQubGVuZ3RoID4gZSAmJiAodCA9IHQuc3Vic3RyaW5nKDAsIGUpICsgYiksIHRcclxuXHR9XHJcblx0dmFyIHcsIEQgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0ZnVuY3Rpb24gaSh0LCBlKSB7XHJcblx0XHRcdFx0dGhpcy5oZXhEaWdpdHMgPSBcIjAxMjM0NTY3ODlBQkNERUZcIiwgdCBpbnN0YW5jZW9mIGkgPyAodGhpcy5lbmMgPSB0LmVuYywgdGhpcy5wb3MgPSB0LnBvcykgOiAodGhpcy5lbmMgPSB0LCB0aGlzLnBvcyA9XHJcblx0XHRcdFx0XHRlKVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBpLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbih0KSB7XHJcblx0XHRcdFx0aWYgKHZvaWQgMCA9PT0gdCAmJiAodCA9IHRoaXMucG9zKyspLCB0ID49IHRoaXMuZW5jLmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKFwiUmVxdWVzdGluZyBieXRlIG9mZnNldCBcIiArIHQgK1xyXG5cdFx0XHRcdFx0XCIgb24gYSBzdHJlYW0gb2YgbGVuZ3RoIFwiICsgdGhpcy5lbmMubGVuZ3RoKTtcclxuXHRcdFx0XHRyZXR1cm4gXCJzdHJpbmdcIiA9PSB0eXBlb2YgdGhpcy5lbmMgPyB0aGlzLmVuYy5jaGFyQ29kZUF0KHQpIDogdGhpcy5lbmNbdF1cclxuXHRcdFx0fSwgaS5wcm90b3R5cGUuaGV4Qnl0ZSA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5oZXhEaWdpdHMuY2hhckF0KHQgPj4gNCAmIDE1KSArIHRoaXMuaGV4RGlnaXRzLmNoYXJBdCgxNSAmIHQpXHJcblx0XHRcdH0sIGkucHJvdG90eXBlLmhleER1bXAgPSBmdW5jdGlvbih0LCBlLCBpKSB7XHJcblx0XHRcdFx0Zm9yICh2YXIgciA9IFwiXCIsIG4gPSB0OyBuIDwgZTsgKytuKVxyXG5cdFx0XHRcdFx0aWYgKHIgKz0gdGhpcy5oZXhCeXRlKHRoaXMuZ2V0KG4pKSwgITAgIT09IGkpIHN3aXRjaCAoMTUgJiBuKSB7XHJcblx0XHRcdFx0XHRcdGNhc2UgNzpcclxuXHRcdFx0XHRcdFx0XHRyICs9IFwiICBcIjtcclxuXHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdFx0Y2FzZSAxNTpcclxuXHRcdFx0XHRcdFx0XHRyICs9IFwiXFxuXCI7XHJcblx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0XHRcdFx0ciArPSBcIiBcIlxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiByXHJcblx0XHRcdH0sIGkucHJvdG90eXBlLmlzQVNDSUkgPSBmdW5jdGlvbih0LCBlKSB7XHJcblx0XHRcdFx0Zm9yICh2YXIgaSA9IHQ7IGkgPCBlOyArK2kpIHtcclxuXHRcdFx0XHRcdHZhciByID0gdGhpcy5nZXQoaSk7XHJcblx0XHRcdFx0XHRpZiAociA8IDMyIHx8IDE3NiA8IHIpIHJldHVybiAhMVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gITBcclxuXHRcdFx0fSwgaS5wcm90b3R5cGUucGFyc2VTdHJpbmdJU08gPSBmdW5jdGlvbih0LCBlKSB7XHJcblx0XHRcdFx0Zm9yICh2YXIgaSA9IFwiXCIsIHIgPSB0OyByIDwgZTsgKytyKSBpICs9IFN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy5nZXQocikpO1xyXG5cdFx0XHRcdHJldHVybiBpXHJcblx0XHRcdH0sIGkucHJvdG90eXBlLnBhcnNlU3RyaW5nVVRGID0gZnVuY3Rpb24odCwgZSkge1xyXG5cdFx0XHRcdGZvciAodmFyIGkgPSBcIlwiLCByID0gdDsgciA8IGU7KSB7XHJcblx0XHRcdFx0XHR2YXIgbiA9IHRoaXMuZ2V0KHIrKyk7XHJcblx0XHRcdFx0XHRpICs9IG4gPCAxMjggPyBTdHJpbmcuZnJvbUNoYXJDb2RlKG4pIDogMTkxIDwgbiAmJiBuIDwgMjI0ID8gU3RyaW5nLmZyb21DaGFyQ29kZSgoMzEgJiBuKSA8PCA2IHwgNjMgJiB0aGlzLmdldChyKyspKSA6XHJcblx0XHRcdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoKDE1ICYgbikgPDwgMTIgfCAoNjMgJiB0aGlzLmdldChyKyspKSA8PCA2IHwgNjMgJiB0aGlzLmdldChyKyspKVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gaVxyXG5cdFx0XHR9LCBpLnByb3RvdHlwZS5wYXJzZVN0cmluZ0JNUCA9IGZ1bmN0aW9uKHQsIGUpIHtcclxuXHRcdFx0XHRmb3IgKHZhciBpLCByLCBuID0gXCJcIiwgcyA9IHQ7IHMgPCBlOykgaSA9IHRoaXMuZ2V0KHMrKyksIHIgPSB0aGlzLmdldChzKyspLCBuICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoaSA8PCA4IHwgcik7XHJcblx0XHRcdFx0cmV0dXJuIG5cclxuXHRcdFx0fSwgaS5wcm90b3R5cGUucGFyc2VUaW1lID0gZnVuY3Rpb24odCwgZSwgaSkge1xyXG5cdFx0XHRcdHZhciByID0gdGhpcy5wYXJzZVN0cmluZ0lTTyh0LCBlKSxcclxuXHRcdFx0XHRcdG4gPSAoaSA/IFQgOiBTKS5leGVjKHIpO1xyXG5cdFx0XHRcdHJldHVybiBuID8gKGkgJiYgKG5bMV0gPSArblsxXSwgblsxXSArPSArblsxXSA8IDcwID8gMmUzIDogMTkwMCksIHIgPSBuWzFdICsgXCItXCIgKyBuWzJdICsgXCItXCIgKyBuWzNdICsgXCIgXCIgKyBuWzRdLFxyXG5cdFx0XHRcdFx0bls1XSAmJiAociArPSBcIjpcIiArIG5bNV0sIG5bNl0gJiYgKHIgKz0gXCI6XCIgKyBuWzZdLCBuWzddICYmIChyICs9IFwiLlwiICsgbls3XSkpKSwgbls4XSAmJiAociArPSBcIiBVVENcIiwgXCJaXCIgIT0gbltcclxuXHRcdFx0XHRcdFx0OF0gJiYgKHIgKz0gbls4XSwgbls5XSAmJiAociArPSBcIjpcIiArIG5bOV0pKSksIHIpIDogXCJVbnJlY29nbml6ZWQgdGltZTogXCIgKyByXHJcblx0XHRcdH0sIGkucHJvdG90eXBlLnBhcnNlSW50ZWdlciA9IGZ1bmN0aW9uKHQsIGUpIHtcclxuXHRcdFx0XHRmb3IgKHZhciBpLCByID0gdGhpcy5nZXQodCksIG4gPSAxMjcgPCByLCBzID0gbiA/IDI1NSA6IDAsIG8gPSBcIlwiOyByID09IHMgJiYgKyt0IDwgZTspIHIgPSB0aGlzLmdldCh0KTtcclxuXHRcdFx0XHRpZiAoMCA9PT0gKGkgPSBlIC0gdCkpIHJldHVybiBuID8gLTEgOiAwO1xyXG5cdFx0XHRcdGlmICg0IDwgaSkge1xyXG5cdFx0XHRcdFx0Zm9yIChvID0gciwgaSA8PD0gMzsgMCA9PSAoMTI4ICYgKCtvIF4gcykpOykgbyA9ICtvIDw8IDEsIC0taTtcclxuXHRcdFx0XHRcdG8gPSBcIihcIiArIGkgKyBcIiBiaXQpXFxuXCJcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0biAmJiAociAtPSAyNTYpO1xyXG5cdFx0XHRcdGZvciAodmFyIGggPSBuZXcgeShyKSwgYSA9IHQgKyAxOyBhIDwgZTsgKythKSBoLm11bEFkZCgyNTYsIHRoaXMuZ2V0KGEpKTtcclxuXHRcdFx0XHRyZXR1cm4gbyArIGgudG9TdHJpbmcoKVxyXG5cdFx0XHR9LCBpLnByb3RvdHlwZS5wYXJzZUJpdFN0cmluZyA9IGZ1bmN0aW9uKHQsIGUsIGkpIHtcclxuXHRcdFx0XHRmb3IgKHZhciByID0gdGhpcy5nZXQodCksIG4gPSBcIihcIiArICgoZSAtIHQgLSAxIDw8IDMpIC0gcikgKyBcIiBiaXQpXFxuXCIsIHMgPSBcIlwiLCBvID0gdCArIDE7IG8gPCBlOyArK28pIHtcclxuXHRcdFx0XHRcdGZvciAodmFyIGggPSB0aGlzLmdldChvKSwgYSA9IG8gPT0gZSAtIDEgPyByIDogMCwgdSA9IDc7IGEgPD0gdTsgLS11KSBzICs9IGggPj4gdSAmIDEgPyBcIjFcIiA6IFwiMFwiO1xyXG5cdFx0XHRcdFx0aWYgKHMubGVuZ3RoID4gaSkgcmV0dXJuIG4gKyBFKHMsIGkpXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiBuICsgc1xyXG5cdFx0XHR9LCBpLnByb3RvdHlwZS5wYXJzZU9jdGV0U3RyaW5nID0gZnVuY3Rpb24odCwgZSwgaSkge1xyXG5cdFx0XHRcdGlmICh0aGlzLmlzQVNDSUkodCwgZSkpIHJldHVybiBFKHRoaXMucGFyc2VTdHJpbmdJU08odCwgZSksIGkpO1xyXG5cdFx0XHRcdHZhciByID0gZSAtIHQsXHJcblx0XHRcdFx0XHRuID0gXCIoXCIgKyByICsgXCIgYnl0ZSlcXG5cIjtcclxuXHRcdFx0XHQoaSAvPSAyKSA8IHIgJiYgKGUgPSB0ICsgaSk7XHJcblx0XHRcdFx0Zm9yICh2YXIgcyA9IHQ7IHMgPCBlOyArK3MpIG4gKz0gdGhpcy5oZXhCeXRlKHRoaXMuZ2V0KHMpKTtcclxuXHRcdFx0XHRyZXR1cm4gaSA8IHIgJiYgKG4gKz0gYiksIG5cclxuXHRcdFx0fSwgaS5wcm90b3R5cGUucGFyc2VPSUQgPSBmdW5jdGlvbih0LCBlLCBpKSB7XHJcblx0XHRcdFx0Zm9yICh2YXIgciA9IFwiXCIsIG4gPSBuZXcgeSwgcyA9IDAsIG8gPSB0OyBvIDwgZTsgKytvKSB7XHJcblx0XHRcdFx0XHR2YXIgaCA9IHRoaXMuZ2V0KG8pO1xyXG5cdFx0XHRcdFx0aWYgKG4ubXVsQWRkKDEyOCwgMTI3ICYgaCksIHMgKz0gNywgISgxMjggJiBoKSkge1xyXG5cdFx0XHRcdFx0XHRpZiAoXCJcIiA9PT0gcilcclxuXHRcdFx0XHRcdFx0XHRpZiAoKG4gPSBuLnNpbXBsaWZ5KCkpIGluc3RhbmNlb2YgeSkgbi5zdWIoODApLCByID0gXCIyLlwiICsgbi50b1N0cmluZygpO1xyXG5cdFx0XHRcdFx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0dmFyIGEgPSBuIDwgODAgPyBuIDwgNDAgPyAwIDogMSA6IDI7XHJcblx0XHRcdFx0XHRcdFx0XHRyID0gYSArIFwiLlwiICsgKG4gLSA0MCAqIGEpXHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRlbHNlIHIgKz0gXCIuXCIgKyBuLnRvU3RyaW5nKCk7XHJcblx0XHRcdFx0XHRcdGlmIChyLmxlbmd0aCA+IGkpIHJldHVybiBFKHIsIGkpO1xyXG5cdFx0XHRcdFx0XHRuID0gbmV3IHksIHMgPSAwXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiAwIDwgcyAmJiAociArPSBcIi5pbmNvbXBsZXRlXCIpLCByXHJcblx0XHRcdH0sIGlcclxuXHRcdH0oKSxcclxuXHRcdHggPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0ZnVuY3Rpb24gYyh0LCBlLCBpLCByLCBuKSB7XHJcblx0XHRcdFx0aWYgKCEociBpbnN0YW5jZW9mIFIpKSB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHRhZyB2YWx1ZS5cIik7XHJcblx0XHRcdFx0dGhpcy5zdHJlYW0gPSB0LCB0aGlzLmhlYWRlciA9IGUsIHRoaXMubGVuZ3RoID0gaSwgdGhpcy50YWcgPSByLCB0aGlzLnN1YiA9IG5cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gYy5wcm90b3R5cGUudHlwZU5hbWUgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRzd2l0Y2ggKHRoaXMudGFnLnRhZ0NsYXNzKSB7XHJcblx0XHRcdFx0XHRjYXNlIDA6XHJcblx0XHRcdFx0XHRcdHN3aXRjaCAodGhpcy50YWcudGFnTnVtYmVyKSB7XHJcblx0XHRcdFx0XHRcdFx0Y2FzZSAwOlxyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIFwiRU9DXCI7XHJcblx0XHRcdFx0XHRcdFx0Y2FzZSAxOlxyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIFwiQk9PTEVBTlwiO1xyXG5cdFx0XHRcdFx0XHRcdGNhc2UgMjpcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBcIklOVEVHRVJcIjtcclxuXHRcdFx0XHRcdFx0XHRjYXNlIDM6XHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gXCJCSVRfU1RSSU5HXCI7XHJcblx0XHRcdFx0XHRcdFx0Y2FzZSA0OlxyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIFwiT0NURVRfU1RSSU5HXCI7XHJcblx0XHRcdFx0XHRcdFx0Y2FzZSA1OlxyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIFwiTlVMTFwiO1xyXG5cdFx0XHRcdFx0XHRcdGNhc2UgNjpcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBcIk9CSkVDVF9JREVOVElGSUVSXCI7XHJcblx0XHRcdFx0XHRcdFx0Y2FzZSA3OlxyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIFwiT2JqZWN0RGVzY3JpcHRvclwiO1xyXG5cdFx0XHRcdFx0XHRcdGNhc2UgODpcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBcIkVYVEVSTkFMXCI7XHJcblx0XHRcdFx0XHRcdFx0Y2FzZSA5OlxyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIFwiUkVBTFwiO1xyXG5cdFx0XHRcdFx0XHRcdGNhc2UgMTA6XHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gXCJFTlVNRVJBVEVEXCI7XHJcblx0XHRcdFx0XHRcdFx0Y2FzZSAxMTpcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBcIkVNQkVEREVEX1BEVlwiO1xyXG5cdFx0XHRcdFx0XHRcdGNhc2UgMTI6XHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gXCJVVEY4U3RyaW5nXCI7XHJcblx0XHRcdFx0XHRcdFx0Y2FzZSAxNjpcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBcIlNFUVVFTkNFXCI7XHJcblx0XHRcdFx0XHRcdFx0Y2FzZSAxNzpcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBcIlNFVFwiO1xyXG5cdFx0XHRcdFx0XHRcdGNhc2UgMTg6XHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gXCJOdW1lcmljU3RyaW5nXCI7XHJcblx0XHRcdFx0XHRcdFx0Y2FzZSAxOTpcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBcIlByaW50YWJsZVN0cmluZ1wiO1xyXG5cdFx0XHRcdFx0XHRcdGNhc2UgMjA6XHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gXCJUZWxldGV4U3RyaW5nXCI7XHJcblx0XHRcdFx0XHRcdFx0Y2FzZSAyMTpcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBcIlZpZGVvdGV4U3RyaW5nXCI7XHJcblx0XHRcdFx0XHRcdFx0Y2FzZSAyMjpcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBcIklBNVN0cmluZ1wiO1xyXG5cdFx0XHRcdFx0XHRcdGNhc2UgMjM6XHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gXCJVVENUaW1lXCI7XHJcblx0XHRcdFx0XHRcdFx0Y2FzZSAyNDpcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBcIkdlbmVyYWxpemVkVGltZVwiO1xyXG5cdFx0XHRcdFx0XHRcdGNhc2UgMjU6XHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gXCJHcmFwaGljU3RyaW5nXCI7XHJcblx0XHRcdFx0XHRcdFx0Y2FzZSAyNjpcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBcIlZpc2libGVTdHJpbmdcIjtcclxuXHRcdFx0XHRcdFx0XHRjYXNlIDI3OlxyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIFwiR2VuZXJhbFN0cmluZ1wiO1xyXG5cdFx0XHRcdFx0XHRcdGNhc2UgMjg6XHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gXCJVbml2ZXJzYWxTdHJpbmdcIjtcclxuXHRcdFx0XHRcdFx0XHRjYXNlIDMwOlxyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIFwiQk1QU3RyaW5nXCJcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gXCJVbml2ZXJzYWxfXCIgKyB0aGlzLnRhZy50YWdOdW1iZXIudG9TdHJpbmcoKTtcclxuXHRcdFx0XHRcdGNhc2UgMTpcclxuXHRcdFx0XHRcdFx0cmV0dXJuIFwiQXBwbGljYXRpb25fXCIgKyB0aGlzLnRhZy50YWdOdW1iZXIudG9TdHJpbmcoKTtcclxuXHRcdFx0XHRcdGNhc2UgMjpcclxuXHRcdFx0XHRcdFx0cmV0dXJuIFwiW1wiICsgdGhpcy50YWcudGFnTnVtYmVyLnRvU3RyaW5nKCkgKyBcIl1cIjtcclxuXHRcdFx0XHRcdGNhc2UgMzpcclxuXHRcdFx0XHRcdFx0cmV0dXJuIFwiUHJpdmF0ZV9cIiArIHRoaXMudGFnLnRhZ051bWJlci50b1N0cmluZygpXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCBjLnByb3RvdHlwZS5jb250ZW50ID0gZnVuY3Rpb24odCkge1xyXG5cdFx0XHRcdGlmICh2b2lkIDAgPT09IHRoaXMudGFnKSByZXR1cm4gbnVsbDtcclxuXHRcdFx0XHR2b2lkIDAgPT09IHQgJiYgKHQgPSAxIC8gMCk7XHJcblx0XHRcdFx0dmFyIGUgPSB0aGlzLnBvc0NvbnRlbnQoKSxcclxuXHRcdFx0XHRcdGkgPSBNYXRoLmFicyh0aGlzLmxlbmd0aCk7XHJcblx0XHRcdFx0aWYgKCF0aGlzLnRhZy5pc1VuaXZlcnNhbCgpKSByZXR1cm4gbnVsbCAhPT0gdGhpcy5zdWIgPyBcIihcIiArIHRoaXMuc3ViLmxlbmd0aCArIFwiIGVsZW0pXCIgOiB0aGlzLnN0cmVhbS5wYXJzZU9jdGV0U3RyaW5nKFxyXG5cdFx0XHRcdFx0ZSwgZSArIGksIHQpO1xyXG5cdFx0XHRcdHN3aXRjaCAodGhpcy50YWcudGFnTnVtYmVyKSB7XHJcblx0XHRcdFx0XHRjYXNlIDE6XHJcblx0XHRcdFx0XHRcdHJldHVybiAwID09PSB0aGlzLnN0cmVhbS5nZXQoZSkgPyBcImZhbHNlXCIgOiBcInRydWVcIjtcclxuXHRcdFx0XHRcdGNhc2UgMjpcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuc3RyZWFtLnBhcnNlSW50ZWdlcihlLCBlICsgaSk7XHJcblx0XHRcdFx0XHRjYXNlIDM6XHJcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLnN1YiA/IFwiKFwiICsgdGhpcy5zdWIubGVuZ3RoICsgXCIgZWxlbSlcIiA6IHRoaXMuc3RyZWFtLnBhcnNlQml0U3RyaW5nKGUsIGUgKyBpLCB0KTtcclxuXHRcdFx0XHRcdGNhc2UgNDpcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuc3ViID8gXCIoXCIgKyB0aGlzLnN1Yi5sZW5ndGggKyBcIiBlbGVtKVwiIDogdGhpcy5zdHJlYW0ucGFyc2VPY3RldFN0cmluZyhlLCBlICsgaSwgdCk7XHJcblx0XHRcdFx0XHRjYXNlIDY6XHJcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLnN0cmVhbS5wYXJzZU9JRChlLCBlICsgaSwgdCk7XHJcblx0XHRcdFx0XHRjYXNlIDE2OlxyXG5cdFx0XHRcdFx0Y2FzZSAxNzpcclxuXHRcdFx0XHRcdFx0cmV0dXJuIG51bGwgIT09IHRoaXMuc3ViID8gXCIoXCIgKyB0aGlzLnN1Yi5sZW5ndGggKyBcIiBlbGVtKVwiIDogXCIobm8gZWxlbSlcIjtcclxuXHRcdFx0XHRcdGNhc2UgMTI6XHJcblx0XHRcdFx0XHRcdHJldHVybiBFKHRoaXMuc3RyZWFtLnBhcnNlU3RyaW5nVVRGKGUsIGUgKyBpKSwgdCk7XHJcblx0XHRcdFx0XHRjYXNlIDE4OlxyXG5cdFx0XHRcdFx0Y2FzZSAxOTpcclxuXHRcdFx0XHRcdGNhc2UgMjA6XHJcblx0XHRcdFx0XHRjYXNlIDIxOlxyXG5cdFx0XHRcdFx0Y2FzZSAyMjpcclxuXHRcdFx0XHRcdGNhc2UgMjY6XHJcblx0XHRcdFx0XHRcdHJldHVybiBFKHRoaXMuc3RyZWFtLnBhcnNlU3RyaW5nSVNPKGUsIGUgKyBpKSwgdCk7XHJcblx0XHRcdFx0XHRjYXNlIDMwOlxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gRSh0aGlzLnN0cmVhbS5wYXJzZVN0cmluZ0JNUChlLCBlICsgaSksIHQpO1xyXG5cdFx0XHRcdFx0Y2FzZSAyMzpcclxuXHRcdFx0XHRcdGNhc2UgMjQ6XHJcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLnN0cmVhbS5wYXJzZVRpbWUoZSwgZSArIGksIDIzID09IHRoaXMudGFnLnRhZ051bWJlcilcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIG51bGxcclxuXHRcdFx0fSwgYy5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcy50eXBlTmFtZSgpICsgXCJAXCIgKyB0aGlzLnN0cmVhbS5wb3MgKyBcIltoZWFkZXI6XCIgKyB0aGlzLmhlYWRlciArIFwiLGxlbmd0aDpcIiArIHRoaXMubGVuZ3RoICsgXCIsc3ViOlwiICtcclxuXHRcdFx0XHRcdChudWxsID09PSB0aGlzLnN1YiA/IFwibnVsbFwiIDogdGhpcy5zdWIubGVuZ3RoKSArIFwiXVwiXHJcblx0XHRcdH0sIGMucHJvdG90eXBlLnRvUHJldHR5U3RyaW5nID0gZnVuY3Rpb24odCkge1xyXG5cdFx0XHRcdHZvaWQgMCA9PT0gdCAmJiAodCA9IFwiXCIpO1xyXG5cdFx0XHRcdHZhciBlID0gdCArIHRoaXMudHlwZU5hbWUoKSArIFwiIEBcIiArIHRoaXMuc3RyZWFtLnBvcztcclxuXHRcdFx0XHRpZiAoMCA8PSB0aGlzLmxlbmd0aCAmJiAoZSArPSBcIitcIiksIGUgKz0gdGhpcy5sZW5ndGgsIHRoaXMudGFnLnRhZ0NvbnN0cnVjdGVkID8gZSArPSBcIiAoY29uc3RydWN0ZWQpXCIgOiAhdGhpcy50YWdcclxuXHRcdFx0XHRcdC5pc1VuaXZlcnNhbCgpIHx8IDMgIT0gdGhpcy50YWcudGFnTnVtYmVyICYmIDQgIT0gdGhpcy50YWcudGFnTnVtYmVyIHx8IG51bGwgPT09IHRoaXMuc3ViIHx8IChlICs9XHJcblx0XHRcdFx0XHRcdFwiIChlbmNhcHN1bGF0ZXMpXCIpLCBlICs9IFwiXFxuXCIsIG51bGwgIT09IHRoaXMuc3ViKSB7XHJcblx0XHRcdFx0XHR0ICs9IFwiICBcIjtcclxuXHRcdFx0XHRcdGZvciAodmFyIGkgPSAwLCByID0gdGhpcy5zdWIubGVuZ3RoOyBpIDwgcjsgKytpKSBlICs9IHRoaXMuc3ViW2ldLnRvUHJldHR5U3RyaW5nKHQpXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiBlXHJcblx0XHRcdH0sIGMucHJvdG90eXBlLnBvc1N0YXJ0ID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMuc3RyZWFtLnBvc1xyXG5cdFx0XHR9LCBjLnByb3RvdHlwZS5wb3NDb250ZW50ID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMuc3RyZWFtLnBvcyArIHRoaXMuaGVhZGVyXHJcblx0XHRcdH0sIGMucHJvdG90eXBlLnBvc0VuZCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLnN0cmVhbS5wb3MgKyB0aGlzLmhlYWRlciArIE1hdGguYWJzKHRoaXMubGVuZ3RoKVxyXG5cdFx0XHR9LCBjLnByb3RvdHlwZS50b0hleFN0cmluZyA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLnN0cmVhbS5oZXhEdW1wKHRoaXMucG9zU3RhcnQoKSwgdGhpcy5wb3NFbmQoKSwgITApXHJcblx0XHRcdH0sIGMuZGVjb2RlTGVuZ3RoID0gZnVuY3Rpb24odCkge1xyXG5cdFx0XHRcdHZhciBlID0gdC5nZXQoKSxcclxuXHRcdFx0XHRcdGkgPSAxMjcgJiBlO1xyXG5cdFx0XHRcdGlmIChpID09IGUpIHJldHVybiBpO1xyXG5cdFx0XHRcdGlmICg2IDwgaSkgdGhyb3cgbmV3IEVycm9yKFwiTGVuZ3RoIG92ZXIgNDggYml0cyBub3Qgc3VwcG9ydGVkIGF0IHBvc2l0aW9uIFwiICsgKHQucG9zIC0gMSkpO1xyXG5cdFx0XHRcdGlmICgwID09PSBpKSByZXR1cm4gbnVsbDtcclxuXHRcdFx0XHRmb3IgKHZhciByID0gZSA9IDA7IHIgPCBpOyArK3IpIGUgPSAyNTYgKiBlICsgdC5nZXQoKTtcclxuXHRcdFx0XHRyZXR1cm4gZVxyXG5cdFx0XHR9LCBjLnByb3RvdHlwZS5nZXRIZXhTdHJpbmdWYWx1ZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHZhciB0ID0gdGhpcy50b0hleFN0cmluZygpLFxyXG5cdFx0XHRcdFx0ZSA9IDIgKiB0aGlzLmhlYWRlcixcclxuXHRcdFx0XHRcdGkgPSAyICogdGhpcy5sZW5ndGg7XHJcblx0XHRcdFx0cmV0dXJuIHQuc3Vic3RyKGUsIGkpXHJcblx0XHRcdH0sIGMuZGVjb2RlID0gZnVuY3Rpb24odCkge1xyXG5cdFx0XHRcdHZhciByO1xyXG5cdFx0XHRcdHIgPSB0IGluc3RhbmNlb2YgRCA/IHQgOiBuZXcgRCh0LCAwKTtcclxuXHRcdFx0XHR2YXIgZSA9IG5ldyBEKHIpLFxyXG5cdFx0XHRcdFx0aSA9IG5ldyBSKHIpLFxyXG5cdFx0XHRcdFx0biA9IGMuZGVjb2RlTGVuZ3RoKHIpLFxyXG5cdFx0XHRcdFx0cyA9IHIucG9zLFxyXG5cdFx0XHRcdFx0byA9IHMgLSBlLnBvcyxcclxuXHRcdFx0XHRcdGggPSBudWxsLFxyXG5cdFx0XHRcdFx0YSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHR2YXIgdCA9IFtdO1xyXG5cdFx0XHRcdFx0XHRpZiAobnVsbCAhPT0gbikge1xyXG5cdFx0XHRcdFx0XHRcdGZvciAodmFyIGUgPSBzICsgbjsgci5wb3MgPCBlOykgdFt0Lmxlbmd0aF0gPSBjLmRlY29kZShyKTtcclxuXHRcdFx0XHRcdFx0XHRpZiAoci5wb3MgIT0gZSkgdGhyb3cgbmV3IEVycm9yKFwiQ29udGVudCBzaXplIGlzIG5vdCBjb3JyZWN0IGZvciBjb250YWluZXIgc3RhcnRpbmcgYXQgb2Zmc2V0IFwiICsgcylcclxuXHRcdFx0XHRcdFx0fSBlbHNlIHRyeSB7XHJcblx0XHRcdFx0XHRcdFx0Zm9yICg7Oykge1xyXG5cdFx0XHRcdFx0XHRcdFx0dmFyIGkgPSBjLmRlY29kZShyKTtcclxuXHRcdFx0XHRcdFx0XHRcdGlmIChpLnRhZy5pc0VPQygpKSBicmVhaztcclxuXHRcdFx0XHRcdFx0XHRcdHRbdC5sZW5ndGhdID0gaVxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRuID0gcyAtIHIucG9zXHJcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKHQpIHtcclxuXHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJFeGNlcHRpb24gd2hpbGUgZGVjb2RpbmcgdW5kZWZpbmVkIGxlbmd0aCBjb250ZW50OiBcIiArIHQpXHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0cmV0dXJuIHRcclxuXHRcdFx0XHRcdH07XHJcblx0XHRcdFx0aWYgKGkudGFnQ29uc3RydWN0ZWQpIGggPSBhKCk7XHJcblx0XHRcdFx0ZWxzZSBpZiAoaS5pc1VuaXZlcnNhbCgpICYmICgzID09IGkudGFnTnVtYmVyIHx8IDQgPT0gaS50YWdOdW1iZXIpKSB0cnkge1xyXG5cdFx0XHRcdFx0aWYgKDMgPT0gaS50YWdOdW1iZXIgJiYgMCAhPSByLmdldCgpKSB0aHJvdyBuZXcgRXJyb3IoXCJCSVQgU1RSSU5HcyB3aXRoIHVudXNlZCBiaXRzIGNhbm5vdCBlbmNhcHN1bGF0ZS5cIik7XHJcblx0XHRcdFx0XHRoID0gYSgpO1xyXG5cdFx0XHRcdFx0Zm9yICh2YXIgdSA9IDA7IHUgPCBoLmxlbmd0aDsgKyt1KVxyXG5cdFx0XHRcdFx0XHRpZiAoaFt1XS50YWcuaXNFT0MoKSkgdGhyb3cgbmV3IEVycm9yKFwiRU9DIGlzIG5vdCBzdXBwb3NlZCB0byBiZSBhY3R1YWwgY29udGVudC5cIilcclxuXHRcdFx0XHR9IGNhdGNoICh0KSB7XHJcblx0XHRcdFx0XHRoID0gbnVsbFxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZiAobnVsbCA9PT0gaCkge1xyXG5cdFx0XHRcdFx0aWYgKG51bGwgPT09IG4pIHRocm93IG5ldyBFcnJvcihcIldlIGNhbid0IHNraXAgb3ZlciBhbiBpbnZhbGlkIHRhZyB3aXRoIHVuZGVmaW5lZCBsZW5ndGggYXQgb2Zmc2V0IFwiICsgcyk7XHJcblx0XHRcdFx0XHRyLnBvcyA9IHMgKyBNYXRoLmFicyhuKVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gbmV3IGMoZSwgbywgbiwgaSwgaClcclxuXHRcdFx0fSwgY1xyXG5cdFx0fSgpLFxyXG5cdFx0UiA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRmdW5jdGlvbiB0KHQpIHtcclxuXHRcdFx0XHR2YXIgZSA9IHQuZ2V0KCk7XHJcblx0XHRcdFx0aWYgKHRoaXMudGFnQ2xhc3MgPSBlID4+IDYsIHRoaXMudGFnQ29uc3RydWN0ZWQgPSAwICE9ICgzMiAmIGUpLCB0aGlzLnRhZ051bWJlciA9IDMxICYgZSwgMzEgPT0gdGhpcy50YWdOdW1iZXIpIHtcclxuXHRcdFx0XHRcdGZvciAodmFyIGkgPSBuZXcgeTsgZSA9IHQuZ2V0KCksIGkubXVsQWRkKDEyOCwgMTI3ICYgZSksIDEyOCAmIGU7KTtcclxuXHRcdFx0XHRcdHRoaXMudGFnTnVtYmVyID0gaS5zaW1wbGlmeSgpXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiB0LnByb3RvdHlwZS5pc1VuaXZlcnNhbCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiAwID09PSB0aGlzLnRhZ0NsYXNzXHJcblx0XHRcdH0sIHQucHJvdG90eXBlLmlzRU9DID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIDAgPT09IHRoaXMudGFnQ2xhc3MgJiYgMCA9PT0gdGhpcy50YWdOdW1iZXJcclxuXHRcdFx0fSwgdFxyXG5cdFx0fSgpLFxyXG5cdFx0QiA9IFsyLCAzLCA1LCA3LCAxMSwgMTMsIDE3LCAxOSwgMjMsIDI5LCAzMSwgMzcsIDQxLCA0MywgNDcsIDUzLCA1OSwgNjEsIDY3LCA3MSwgNzMsIDc5LCA4MywgODksIDk3LCAxMDEsIDEwMywgMTA3LFxyXG5cdFx0XHQxMDksIDExMywgMTI3LCAxMzEsIDEzNywgMTM5LCAxNDksIDE1MSwgMTU3LCAxNjMsIDE2NywgMTczLCAxNzksIDE4MSwgMTkxLCAxOTMsIDE5NywgMTk5LCAyMTEsIDIyMywgMjI3LCAyMjksIDIzMyxcclxuXHRcdFx0MjM5LCAyNDEsIDI1MSwgMjU3LCAyNjMsIDI2OSwgMjcxLCAyNzcsIDI4MSwgMjgzLCAyOTMsIDMwNywgMzExLCAzMTMsIDMxNywgMzMxLCAzMzcsIDM0NywgMzQ5LCAzNTMsIDM1OSwgMzY3LCAzNzMsXHJcblx0XHRcdDM3OSwgMzgzLCAzODksIDM5NywgNDAxLCA0MDksIDQxOSwgNDIxLCA0MzEsIDQzMywgNDM5LCA0NDMsIDQ0OSwgNDU3LCA0NjEsIDQ2MywgNDY3LCA0NzksIDQ4NywgNDkxLCA0OTksIDUwMywgNTA5LFxyXG5cdFx0XHQ1MjEsIDUyMywgNTQxLCA1NDcsIDU1NywgNTYzLCA1NjksIDU3MSwgNTc3LCA1ODcsIDU5MywgNTk5LCA2MDEsIDYwNywgNjEzLCA2MTcsIDYxOSwgNjMxLCA2NDEsIDY0MywgNjQ3LCA2NTMsIDY1OSxcclxuXHRcdFx0NjYxLCA2NzMsIDY3NywgNjgzLCA2OTEsIDcwMSwgNzA5LCA3MTksIDcyNywgNzMzLCA3MzksIDc0MywgNzUxLCA3NTcsIDc2MSwgNzY5LCA3NzMsIDc4NywgNzk3LCA4MDksIDgxMSwgODIxLCA4MjMsXHJcblx0XHRcdDgyNywgODI5LCA4MzksIDg1MywgODU3LCA4NTksIDg2MywgODc3LCA4ODEsIDg4MywgODg3LCA5MDcsIDkxMSwgOTE5LCA5MjksIDkzNywgOTQxLCA5NDcsIDk1MywgOTY3LCA5NzEsIDk3NywgOTgzLFxyXG5cdFx0XHQ5OTEsIDk5N1xyXG5cdFx0XSxcclxuXHRcdEEgPSAoMSA8PCAyNikgLyBCW0IubGVuZ3RoIC0gMV0sXHJcblx0XHRPID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdGZ1bmN0aW9uIGIodCwgZSwgaSkge1xyXG5cdFx0XHRcdG51bGwgIT0gdCAmJiAoXCJudW1iZXJcIiA9PSB0eXBlb2YgdCA/IHRoaXMuZnJvbU51bWJlcih0LCBlLCBpKSA6IG51bGwgPT0gZSAmJiBcInN0cmluZ1wiICE9IHR5cGVvZiB0ID8gdGhpcy5mcm9tU3RyaW5nKFxyXG5cdFx0XHRcdFx0dCwgMjU2KSA6IHRoaXMuZnJvbVN0cmluZyh0LCBlKSlcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gYi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbih0KSB7XHJcblx0XHRcdFx0aWYgKHRoaXMucyA8IDApIHJldHVybiBcIi1cIiArIHRoaXMubmVnYXRlKCkudG9TdHJpbmcodCk7XHJcblx0XHRcdFx0dmFyIGU7XHJcblx0XHRcdFx0aWYgKDE2ID09IHQpIGUgPSA0O1xyXG5cdFx0XHRcdGVsc2UgaWYgKDggPT0gdCkgZSA9IDM7XHJcblx0XHRcdFx0ZWxzZSBpZiAoMiA9PSB0KSBlID0gMTtcclxuXHRcdFx0XHRlbHNlIGlmICgzMiA9PSB0KSBlID0gNTtcclxuXHRcdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRcdGlmICg0ICE9IHQpIHJldHVybiB0aGlzLnRvUmFkaXgodCk7XHJcblx0XHRcdFx0XHRlID0gMlxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHR2YXIgaSwgciA9ICgxIDw8IGUpIC0gMSxcclxuXHRcdFx0XHRcdG4gPSAhMSxcclxuXHRcdFx0XHRcdHMgPSBcIlwiLFxyXG5cdFx0XHRcdFx0byA9IHRoaXMudCxcclxuXHRcdFx0XHRcdGggPSB0aGlzLkRCIC0gbyAqIHRoaXMuREIgJSBlO1xyXG5cdFx0XHRcdGlmICgwIDwgby0tKVxyXG5cdFx0XHRcdFx0Zm9yIChoIDwgdGhpcy5EQiAmJiAwIDwgKGkgPSB0aGlzW29dID4+IGgpICYmIChuID0gITAsIHMgPSBhKGkpKTsgMCA8PSBvOykgaCA8IGUgPyAoaSA9ICh0aGlzW29dICYgKDEgPDwgaCkgLSAxKSA8PFxyXG5cdFx0XHRcdFx0XHRcdGUgLSBoLCBpIHw9IHRoaXNbLS1vXSA+PiAoaCArPSB0aGlzLkRCIC0gZSkpIDogKGkgPSB0aGlzW29dID4+IChoIC09IGUpICYgciwgaCA8PSAwICYmIChoICs9IHRoaXMuREIsIC0tbykpLCAwIDxcclxuXHRcdFx0XHRcdFx0aSAmJiAobiA9ICEwKSwgbiAmJiAocyArPSBhKGkpKTtcclxuXHRcdFx0XHRyZXR1cm4gbiA/IHMgOiBcIjBcIlxyXG5cdFx0XHR9LCBiLnByb3RvdHlwZS5uZWdhdGUgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHR2YXIgdCA9IE0oKTtcclxuXHRcdFx0XHRyZXR1cm4gYi5aRVJPLnN1YlRvKHRoaXMsIHQpLCB0XHJcblx0XHRcdH0sIGIucHJvdG90eXBlLmFicyA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLnMgPCAwID8gdGhpcy5uZWdhdGUoKSA6IHRoaXNcclxuXHRcdFx0fSwgYi5wcm90b3R5cGUuY29tcGFyZVRvID0gZnVuY3Rpb24odCkge1xyXG5cdFx0XHRcdHZhciBlID0gdGhpcy5zIC0gdC5zO1xyXG5cdFx0XHRcdGlmICgwICE9IGUpIHJldHVybiBlO1xyXG5cdFx0XHRcdHZhciBpID0gdGhpcy50O1xyXG5cdFx0XHRcdGlmICgwICE9IChlID0gaSAtIHQudCkpIHJldHVybiB0aGlzLnMgPCAwID8gLWUgOiBlO1xyXG5cdFx0XHRcdGZvciAoOyAwIDw9IC0taTspXHJcblx0XHRcdFx0XHRpZiAoMCAhPSAoZSA9IHRoaXNbaV0gLSB0W2ldKSkgcmV0dXJuIGU7XHJcblx0XHRcdFx0cmV0dXJuIDBcclxuXHRcdFx0fSwgYi5wcm90b3R5cGUuYml0TGVuZ3RoID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMudCA8PSAwID8gMCA6IHRoaXMuREIgKiAodGhpcy50IC0gMSkgKyBVKHRoaXNbdGhpcy50IC0gMV0gXiB0aGlzLnMgJiB0aGlzLkRNKVxyXG5cdFx0XHR9LCBiLnByb3RvdHlwZS5tb2QgPSBmdW5jdGlvbih0KSB7XHJcblx0XHRcdFx0dmFyIGUgPSBNKCk7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMuYWJzKCkuZGl2UmVtVG8odCwgbnVsbCwgZSksIHRoaXMucyA8IDAgJiYgMCA8IGUuY29tcGFyZVRvKGIuWkVSTykgJiYgdC5zdWJUbyhlLCBlKSwgZVxyXG5cdFx0XHR9LCBiLnByb3RvdHlwZS5tb2RQb3dJbnQgPSBmdW5jdGlvbih0LCBlKSB7XHJcblx0XHRcdFx0dmFyIGk7XHJcblx0XHRcdFx0cmV0dXJuIGkgPSB0IDwgMjU2IHx8IGUuaXNFdmVuKCkgPyBuZXcgSShlKSA6IG5ldyBOKGUpLCB0aGlzLmV4cCh0LCBpKVxyXG5cdFx0XHR9LCBiLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHZhciB0ID0gTSgpO1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLmNvcHlUbyh0KSwgdFxyXG5cdFx0XHR9LCBiLnByb3RvdHlwZS5pbnRWYWx1ZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICh0aGlzLnMgPCAwKSB7XHJcblx0XHRcdFx0XHRpZiAoMSA9PSB0aGlzLnQpIHJldHVybiB0aGlzWzBdIC0gdGhpcy5EVjtcclxuXHRcdFx0XHRcdGlmICgwID09IHRoaXMudCkgcmV0dXJuIC0xXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdGlmICgxID09IHRoaXMudCkgcmV0dXJuIHRoaXNbMF07XHJcblx0XHRcdFx0XHRpZiAoMCA9PSB0aGlzLnQpIHJldHVybiAwXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiAodGhpc1sxXSAmICgxIDw8IDMyIC0gdGhpcy5EQikgLSAxKSA8PCB0aGlzLkRCIHwgdGhpc1swXVxyXG5cdFx0XHR9LCBiLnByb3RvdHlwZS5ieXRlVmFsdWUgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gMCA9PSB0aGlzLnQgPyB0aGlzLnMgOiB0aGlzWzBdIDw8IDI0ID4+IDI0XHJcblx0XHRcdH0sIGIucHJvdG90eXBlLnNob3J0VmFsdWUgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gMCA9PSB0aGlzLnQgPyB0aGlzLnMgOiB0aGlzWzBdIDw8IDE2ID4+IDE2XHJcblx0XHRcdH0sIGIucHJvdG90eXBlLnNpZ251bSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLnMgPCAwID8gLTEgOiB0aGlzLnQgPD0gMCB8fCAxID09IHRoaXMudCAmJiB0aGlzWzBdIDw9IDAgPyAwIDogMVxyXG5cdFx0XHR9LCBiLnByb3RvdHlwZS50b0J5dGVBcnJheSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHZhciB0ID0gdGhpcy50LFxyXG5cdFx0XHRcdFx0ZSA9IFtdO1xyXG5cdFx0XHRcdGVbMF0gPSB0aGlzLnM7XHJcblx0XHRcdFx0dmFyIGksIHIgPSB0aGlzLkRCIC0gdCAqIHRoaXMuREIgJSA4LFxyXG5cdFx0XHRcdFx0biA9IDA7XHJcblx0XHRcdFx0aWYgKDAgPCB0LS0pXHJcblx0XHRcdFx0XHRmb3IgKHIgPCB0aGlzLkRCICYmIChpID0gdGhpc1t0XSA+PiByKSAhPSAodGhpcy5zICYgdGhpcy5ETSkgPj4gciAmJiAoZVtuKytdID0gaSB8IHRoaXMucyA8PCB0aGlzLkRCIC0gcik7IDAgPD1cclxuXHRcdFx0XHRcdFx0dDspIHIgPCA4ID8gKGkgPSAodGhpc1t0XSAmICgxIDw8IHIpIC0gMSkgPDwgOCAtIHIsIGkgfD0gdGhpc1stLXRdID4+IChyICs9IHRoaXMuREIgLSA4KSkgOiAoaSA9IHRoaXNbdF0gPj4gKHIgLT1cclxuXHRcdFx0XHRcdFx0XHQ4KSAmIDI1NSwgciA8PSAwICYmIChyICs9IHRoaXMuREIsIC0tdCkpLCAwICE9ICgxMjggJiBpKSAmJiAoaSB8PSAtMjU2KSwgMCA9PSBuICYmICgxMjggJiB0aGlzLnMpICE9ICgxMjggJiBpKSAmJlxyXG5cdFx0XHRcdFx0XHQrK24sICgwIDwgbiB8fCBpICE9IHRoaXMucykgJiYgKGVbbisrXSA9IGkpO1xyXG5cdFx0XHRcdHJldHVybiBlXHJcblx0XHRcdH0sIGIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdFx0XHRyZXR1cm4gMCA9PSB0aGlzLmNvbXBhcmVUbyh0KVxyXG5cdFx0XHR9LCBiLnByb3RvdHlwZS5taW4gPSBmdW5jdGlvbih0KSB7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29tcGFyZVRvKHQpIDwgMCA/IHRoaXMgOiB0XHJcblx0XHRcdH0sIGIucHJvdG90eXBlLm1heCA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdFx0XHRyZXR1cm4gMCA8IHRoaXMuY29tcGFyZVRvKHQpID8gdGhpcyA6IHRcclxuXHRcdFx0fSwgYi5wcm90b3R5cGUuYW5kID0gZnVuY3Rpb24odCkge1xyXG5cdFx0XHRcdHZhciBlID0gTSgpO1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLmJpdHdpc2VUbyh0LCBpLCBlKSwgZVxyXG5cdFx0XHR9LCBiLnByb3RvdHlwZS5vciA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdFx0XHR2YXIgZSA9IE0oKTtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5iaXR3aXNlVG8odCwgdSwgZSksIGVcclxuXHRcdFx0fSwgYi5wcm90b3R5cGUueG9yID0gZnVuY3Rpb24odCkge1xyXG5cdFx0XHRcdHZhciBlID0gTSgpO1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLmJpdHdpc2VUbyh0LCByLCBlKSwgZVxyXG5cdFx0XHR9LCBiLnByb3RvdHlwZS5hbmROb3QgPSBmdW5jdGlvbih0KSB7XHJcblx0XHRcdFx0dmFyIGUgPSBNKCk7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMuYml0d2lzZVRvKHQsIG4sIGUpLCBlXHJcblx0XHRcdH0sIGIucHJvdG90eXBlLm5vdCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGZvciAodmFyIHQgPSBNKCksIGUgPSAwOyBlIDwgdGhpcy50OyArK2UpIHRbZV0gPSB0aGlzLkRNICYgfnRoaXNbZV07XHJcblx0XHRcdFx0cmV0dXJuIHQudCA9IHRoaXMudCwgdC5zID0gfnRoaXMucywgdFxyXG5cdFx0XHR9LCBiLnByb3RvdHlwZS5zaGlmdExlZnQgPSBmdW5jdGlvbih0KSB7XHJcblx0XHRcdFx0dmFyIGUgPSBNKCk7XHJcblx0XHRcdFx0cmV0dXJuIHQgPCAwID8gdGhpcy5yU2hpZnRUbygtdCwgZSkgOiB0aGlzLmxTaGlmdFRvKHQsIGUpLCBlXHJcblx0XHRcdH0sIGIucHJvdG90eXBlLnNoaWZ0UmlnaHQgPSBmdW5jdGlvbih0KSB7XHJcblx0XHRcdFx0dmFyIGUgPSBNKCk7XHJcblx0XHRcdFx0cmV0dXJuIHQgPCAwID8gdGhpcy5sU2hpZnRUbygtdCwgZSkgOiB0aGlzLnJTaGlmdFRvKHQsIGUpLCBlXHJcblx0XHRcdH0sIGIucHJvdG90eXBlLmdldExvd2VzdFNldEJpdCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGZvciAodmFyIHQgPSAwOyB0IDwgdGhpcy50OyArK3QpXHJcblx0XHRcdFx0XHRpZiAoMCAhPSB0aGlzW3RdKSByZXR1cm4gdCAqIHRoaXMuREIgKyBzKHRoaXNbdF0pO1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLnMgPCAwID8gdGhpcy50ICogdGhpcy5EQiA6IC0xXHJcblx0XHRcdH0sIGIucHJvdG90eXBlLmJpdENvdW50ID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0Zm9yICh2YXIgdCA9IDAsIGUgPSB0aGlzLnMgJiB0aGlzLkRNLCBpID0gMDsgaSA8IHRoaXMudDsgKytpKSB0ICs9IG8odGhpc1tpXSBeIGUpO1xyXG5cdFx0XHRcdHJldHVybiB0XHJcblx0XHRcdH0sIGIucHJvdG90eXBlLnRlc3RCaXQgPSBmdW5jdGlvbih0KSB7XHJcblx0XHRcdFx0dmFyIGUgPSBNYXRoLmZsb29yKHQgLyB0aGlzLkRCKTtcclxuXHRcdFx0XHRyZXR1cm4gZSA+PSB0aGlzLnQgPyAwICE9IHRoaXMucyA6IDAgIT0gKHRoaXNbZV0gJiAxIDw8IHQgJSB0aGlzLkRCKVxyXG5cdFx0XHR9LCBiLnByb3RvdHlwZS5zZXRCaXQgPSBmdW5jdGlvbih0KSB7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMuY2hhbmdlQml0KHQsIHUpXHJcblx0XHRcdH0sIGIucHJvdG90eXBlLmNsZWFyQml0ID0gZnVuY3Rpb24odCkge1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLmNoYW5nZUJpdCh0LCBuKVxyXG5cdFx0XHR9LCBiLnByb3RvdHlwZS5mbGlwQml0ID0gZnVuY3Rpb24odCkge1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLmNoYW5nZUJpdCh0LCByKVxyXG5cdFx0XHR9LCBiLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbih0KSB7XHJcblx0XHRcdFx0dmFyIGUgPSBNKCk7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMuYWRkVG8odCwgZSksIGVcclxuXHRcdFx0fSwgYi5wcm90b3R5cGUuc3VidHJhY3QgPSBmdW5jdGlvbih0KSB7XHJcblx0XHRcdFx0dmFyIGUgPSBNKCk7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMuc3ViVG8odCwgZSksIGVcclxuXHRcdFx0fSwgYi5wcm90b3R5cGUubXVsdGlwbHkgPSBmdW5jdGlvbih0KSB7XHJcblx0XHRcdFx0dmFyIGUgPSBNKCk7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlUbyh0LCBlKSwgZVxyXG5cdFx0XHR9LCBiLnByb3RvdHlwZS5kaXZpZGUgPSBmdW5jdGlvbih0KSB7XHJcblx0XHRcdFx0dmFyIGUgPSBNKCk7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMuZGl2UmVtVG8odCwgZSwgbnVsbCksIGVcclxuXHRcdFx0fSwgYi5wcm90b3R5cGUucmVtYWluZGVyID0gZnVuY3Rpb24odCkge1xyXG5cdFx0XHRcdHZhciBlID0gTSgpO1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLmRpdlJlbVRvKHQsIG51bGwsIGUpLCBlXHJcblx0XHRcdH0sIGIucHJvdG90eXBlLmRpdmlkZUFuZFJlbWFpbmRlciA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdFx0XHR2YXIgZSA9IE0oKSxcclxuXHRcdFx0XHRcdGkgPSBNKCk7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMuZGl2UmVtVG8odCwgZSwgaSksIFtlLCBpXVxyXG5cdFx0XHR9LCBiLnByb3RvdHlwZS5tb2RQb3cgPSBmdW5jdGlvbih0LCBlKSB7XHJcblx0XHRcdFx0dmFyIGksIHIsIG4gPSB0LmJpdExlbmd0aCgpLFxyXG5cdFx0XHRcdFx0cyA9IEYoMSk7XHJcblx0XHRcdFx0aWYgKG4gPD0gMCkgcmV0dXJuIHM7XHJcblx0XHRcdFx0aSA9IG4gPCAxOCA/IDEgOiBuIDwgNDggPyAzIDogbiA8IDE0NCA/IDQgOiBuIDwgNzY4ID8gNSA6IDYsIHIgPSBuIDwgOCA/IG5ldyBJKGUpIDogZS5pc0V2ZW4oKSA/IG5ldyBQKGUpIDogbmV3IE4oXHJcblx0XHRcdFx0XHRlKTtcclxuXHRcdFx0XHR2YXIgbyA9IFtdLFxyXG5cdFx0XHRcdFx0aCA9IDMsXHJcblx0XHRcdFx0XHRhID0gaSAtIDEsXHJcblx0XHRcdFx0XHR1ID0gKDEgPDwgaSkgLSAxO1xyXG5cdFx0XHRcdGlmIChvWzFdID0gci5jb252ZXJ0KHRoaXMpLCAxIDwgaSkge1xyXG5cdFx0XHRcdFx0dmFyIGMgPSBNKCk7XHJcblx0XHRcdFx0XHRmb3IgKHIuc3FyVG8ob1sxXSwgYyk7IGggPD0gdTspIG9baF0gPSBNKCksIHIubXVsVG8oYywgb1toIC0gMl0sIG9baF0pLCBoICs9IDJcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0dmFyIGYsIGwsIHAgPSB0LnQgLSAxLFxyXG5cdFx0XHRcdFx0ZyA9ICEwLFxyXG5cdFx0XHRcdFx0ZCA9IE0oKTtcclxuXHRcdFx0XHRmb3IgKG4gPSBVKHRbcF0pIC0gMTsgMCA8PSBwOykge1xyXG5cdFx0XHRcdFx0Zm9yIChhIDw9IG4gPyBmID0gdFtwXSA+PiBuIC0gYSAmIHUgOiAoZiA9ICh0W3BdICYgKDEgPDwgbiArIDEpIC0gMSkgPDwgYSAtIG4sIDAgPCBwICYmIChmIHw9IHRbcCAtIDFdID4+IHRoaXMuREIgK1xyXG5cdFx0XHRcdFx0XHRcdG4gLSBhKSksIGggPSBpOyAwID09ICgxICYgZik7KSBmID4+PSAxLCAtLWg7XHJcblx0XHRcdFx0XHRpZiAoKG4gLT0gaCkgPCAwICYmIChuICs9IHRoaXMuREIsIC0tcCksIGcpIG9bZl0uY29weVRvKHMpLCBnID0gITE7XHJcblx0XHRcdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRcdFx0Zm9yICg7IDEgPCBoOykgci5zcXJUbyhzLCBkKSwgci5zcXJUbyhkLCBzKSwgaCAtPSAyO1xyXG5cdFx0XHRcdFx0XHQwIDwgaCA/IHIuc3FyVG8ocywgZCkgOiAobCA9IHMsIHMgPSBkLCBkID0gbCksIHIubXVsVG8oZCwgb1tmXSwgcylcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGZvciAoOyAwIDw9IHAgJiYgMCA9PSAodFtwXSAmIDEgPDwgbik7KSByLnNxclRvKHMsIGQpLCBsID0gcywgcyA9IGQsIGQgPSBsLCAtLW4gPCAwICYmIChuID0gdGhpcy5EQiAtIDEsIC0tcClcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHIucmV2ZXJ0KHMpXHJcblx0XHRcdH0sIGIucHJvdG90eXBlLm1vZEludmVyc2UgPSBmdW5jdGlvbih0KSB7XHJcblx0XHRcdFx0dmFyIGUgPSB0LmlzRXZlbigpO1xyXG5cdFx0XHRcdGlmICh0aGlzLmlzRXZlbigpICYmIGUgfHwgMCA9PSB0LnNpZ251bSgpKSByZXR1cm4gYi5aRVJPO1xyXG5cdFx0XHRcdGZvciAodmFyIGkgPSB0LmNsb25lKCksIHIgPSB0aGlzLmNsb25lKCksIG4gPSBGKDEpLCBzID0gRigwKSwgbyA9IEYoMCksIGggPSBGKDEpOyAwICE9IGkuc2lnbnVtKCk7KSB7XHJcblx0XHRcdFx0XHRmb3IgKDsgaS5pc0V2ZW4oKTspIGkuclNoaWZ0VG8oMSwgaSksIGUgPyAobi5pc0V2ZW4oKSAmJiBzLmlzRXZlbigpIHx8IChuLmFkZFRvKHRoaXMsIG4pLCBzLnN1YlRvKHQsIHMpKSwgbi5yU2hpZnRUbyhcclxuXHRcdFx0XHRcdFx0MSwgbikpIDogcy5pc0V2ZW4oKSB8fCBzLnN1YlRvKHQsIHMpLCBzLnJTaGlmdFRvKDEsIHMpO1xyXG5cdFx0XHRcdFx0Zm9yICg7IHIuaXNFdmVuKCk7KSByLnJTaGlmdFRvKDEsIHIpLCBlID8gKG8uaXNFdmVuKCkgJiYgaC5pc0V2ZW4oKSB8fCAoby5hZGRUbyh0aGlzLCBvKSwgaC5zdWJUbyh0LCBoKSksIG8uclNoaWZ0VG8oXHJcblx0XHRcdFx0XHRcdDEsIG8pKSA6IGguaXNFdmVuKCkgfHwgaC5zdWJUbyh0LCBoKSwgaC5yU2hpZnRUbygxLCBoKTtcclxuXHRcdFx0XHRcdDAgPD0gaS5jb21wYXJlVG8ocikgPyAoaS5zdWJUbyhyLCBpKSwgZSAmJiBuLnN1YlRvKG8sIG4pLCBzLnN1YlRvKGgsIHMpKSA6IChyLnN1YlRvKGksIHIpLCBlICYmIG8uc3ViVG8obiwgbyksIGhcclxuXHRcdFx0XHRcdFx0LnN1YlRvKHMsIGgpKVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gMCAhPSByLmNvbXBhcmVUbyhiLk9ORSkgPyBiLlpFUk8gOiAwIDw9IGguY29tcGFyZVRvKHQpID8gaC5zdWJ0cmFjdCh0KSA6IGguc2lnbnVtKCkgPCAwID8gKGguYWRkVG8odCwgaCksXHJcblx0XHRcdFx0XHRoLnNpZ251bSgpIDwgMCA/IGguYWRkKHQpIDogaCkgOiBoXHJcblx0XHRcdH0sIGIucHJvdG90eXBlLnBvdyA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5leHAodCwgbmV3IFYpXHJcblx0XHRcdH0sIGIucHJvdG90eXBlLmdjZCA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdFx0XHR2YXIgZSA9IHRoaXMucyA8IDAgPyB0aGlzLm5lZ2F0ZSgpIDogdGhpcy5jbG9uZSgpLFxyXG5cdFx0XHRcdFx0aSA9IHQucyA8IDAgPyB0Lm5lZ2F0ZSgpIDogdC5jbG9uZSgpO1xyXG5cdFx0XHRcdGlmIChlLmNvbXBhcmVUbyhpKSA8IDApIHtcclxuXHRcdFx0XHRcdHZhciByID0gZTtcclxuXHRcdFx0XHRcdGUgPSBpLCBpID0gclxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHR2YXIgbiA9IGUuZ2V0TG93ZXN0U2V0Qml0KCksXHJcblx0XHRcdFx0XHRzID0gaS5nZXRMb3dlc3RTZXRCaXQoKTtcclxuXHRcdFx0XHRpZiAocyA8IDApIHJldHVybiBlO1xyXG5cdFx0XHRcdGZvciAobiA8IHMgJiYgKHMgPSBuKSwgMCA8IHMgJiYgKGUuclNoaWZ0VG8ocywgZSksIGkuclNoaWZ0VG8ocywgaSkpOyAwIDwgZS5zaWdudW0oKTspIDAgPCAobiA9IGUuZ2V0TG93ZXN0U2V0Qml0KCkpICYmXHJcblx0XHRcdFx0XHRlLnJTaGlmdFRvKG4sIGUpLCAwIDwgKG4gPSBpLmdldExvd2VzdFNldEJpdCgpKSAmJiBpLnJTaGlmdFRvKG4sIGkpLCAwIDw9IGUuY29tcGFyZVRvKGkpID8gKGUuc3ViVG8oaSwgZSksIGUuclNoaWZ0VG8oXHJcblx0XHRcdFx0XHRcdDEsIGUpKSA6IChpLnN1YlRvKGUsIGkpLCBpLnJTaGlmdFRvKDEsIGkpKTtcclxuXHRcdFx0XHRyZXR1cm4gMCA8IHMgJiYgaS5sU2hpZnRUbyhzLCBpKSwgaVxyXG5cdFx0XHR9LCBiLnByb3RvdHlwZS5pc1Byb2JhYmxlUHJpbWUgPSBmdW5jdGlvbih0KSB7XHJcblx0XHRcdFx0dmFyIGUsIGkgPSB0aGlzLmFicygpO1xyXG5cdFx0XHRcdGlmICgxID09IGkudCAmJiBpWzBdIDw9IEJbQi5sZW5ndGggLSAxXSkge1xyXG5cdFx0XHRcdFx0Zm9yIChlID0gMDsgZSA8IEIubGVuZ3RoOyArK2UpXHJcblx0XHRcdFx0XHRcdGlmIChpWzBdID09IEJbZV0pIHJldHVybiAhMDtcclxuXHRcdFx0XHRcdHJldHVybiAhMVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZiAoaS5pc0V2ZW4oKSkgcmV0dXJuICExO1xyXG5cdFx0XHRcdGZvciAoZSA9IDE7IGUgPCBCLmxlbmd0aDspIHtcclxuXHRcdFx0XHRcdGZvciAodmFyIHIgPSBCW2VdLCBuID0gZSArIDE7IG4gPCBCLmxlbmd0aCAmJiByIDwgQTspIHIgKj0gQltuKytdO1xyXG5cdFx0XHRcdFx0Zm9yIChyID0gaS5tb2RJbnQocik7IGUgPCBuOylcclxuXHRcdFx0XHRcdFx0aWYgKHIgJSBCW2UrK10gPT0gMCkgcmV0dXJuICExXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiBpLm1pbGxlclJhYmluKHQpXHJcblx0XHRcdH0sIGIucHJvdG90eXBlLmNvcHlUbyA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdFx0XHRmb3IgKHZhciBlID0gdGhpcy50IC0gMTsgMCA8PSBlOyAtLWUpIHRbZV0gPSB0aGlzW2VdO1xyXG5cdFx0XHRcdHQudCA9IHRoaXMudCwgdC5zID0gdGhpcy5zXHJcblx0XHRcdH0sIGIucHJvdG90eXBlLmZyb21JbnQgPSBmdW5jdGlvbih0KSB7XHJcblx0XHRcdFx0dGhpcy50ID0gMSwgdGhpcy5zID0gdCA8IDAgPyAtMSA6IDAsIDAgPCB0ID8gdGhpc1swXSA9IHQgOiB0IDwgLTEgPyB0aGlzWzBdID0gdCArIHRoaXMuRFYgOiB0aGlzLnQgPSAwXHJcblx0XHRcdH0sIGIucHJvdG90eXBlLmZyb21TdHJpbmcgPSBmdW5jdGlvbih0LCBlKSB7XHJcblx0XHRcdFx0dmFyIGk7XHJcblx0XHRcdFx0aWYgKDE2ID09IGUpIGkgPSA0O1xyXG5cdFx0XHRcdGVsc2UgaWYgKDggPT0gZSkgaSA9IDM7XHJcblx0XHRcdFx0ZWxzZSBpZiAoMjU2ID09IGUpIGkgPSA4O1xyXG5cdFx0XHRcdGVsc2UgaWYgKDIgPT0gZSkgaSA9IDE7XHJcblx0XHRcdFx0ZWxzZSBpZiAoMzIgPT0gZSkgaSA9IDU7XHJcblx0XHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0XHRpZiAoNCAhPSBlKSByZXR1cm4gdm9pZCB0aGlzLmZyb21SYWRpeCh0LCBlKTtcclxuXHRcdFx0XHRcdGkgPSAyXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHRoaXMudCA9IDAsIHRoaXMucyA9IDA7XHJcblx0XHRcdFx0Zm9yICh2YXIgciA9IHQubGVuZ3RoLCBuID0gITEsIHMgPSAwOyAwIDw9IC0tcjspIHtcclxuXHRcdFx0XHRcdHZhciBvID0gOCA9PSBpID8gMjU1ICYgK3Rbcl0gOiBDKHQsIHIpO1xyXG5cdFx0XHRcdFx0byA8IDAgPyBcIi1cIiA9PSB0LmNoYXJBdChyKSAmJiAobiA9ICEwKSA6IChuID0gITEsIDAgPT0gcyA/IHRoaXNbdGhpcy50KytdID0gbyA6IHMgKyBpID4gdGhpcy5EQiA/ICh0aGlzW3RoaXMudCAtXHJcblx0XHRcdFx0XHRcdDFdIHw9IChvICYgKDEgPDwgdGhpcy5EQiAtIHMpIC0gMSkgPDwgcywgdGhpc1t0aGlzLnQrK10gPSBvID4+IHRoaXMuREIgLSBzKSA6IHRoaXNbdGhpcy50IC0gMV0gfD0gbyA8PCBzLCAocyArPVxyXG5cdFx0XHRcdFx0XHRpKSA+PSB0aGlzLkRCICYmIChzIC09IHRoaXMuREIpKVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHQ4ID09IGkgJiYgMCAhPSAoMTI4ICYgK3RbMF0pICYmICh0aGlzLnMgPSAtMSwgMCA8IHMgJiYgKHRoaXNbdGhpcy50IC0gMV0gfD0gKDEgPDwgdGhpcy5EQiAtIHMpIC0gMSA8PCBzKSksIHRoaXMuY2xhbXAoKSxcclxuXHRcdFx0XHRcdG4gJiYgYi5aRVJPLnN1YlRvKHRoaXMsIHRoaXMpXHJcblx0XHRcdH0sIGIucHJvdG90eXBlLmNsYW1wID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0Zm9yICh2YXIgdCA9IHRoaXMucyAmIHRoaXMuRE07IDAgPCB0aGlzLnQgJiYgdGhpc1t0aGlzLnQgLSAxXSA9PSB0OykgLS10aGlzLnRcclxuXHRcdFx0fSwgYi5wcm90b3R5cGUuZGxTaGlmdFRvID0gZnVuY3Rpb24odCwgZSkge1xyXG5cdFx0XHRcdHZhciBpO1xyXG5cdFx0XHRcdGZvciAoaSA9IHRoaXMudCAtIDE7IDAgPD0gaTsgLS1pKSBlW2kgKyB0XSA9IHRoaXNbaV07XHJcblx0XHRcdFx0Zm9yIChpID0gdCAtIDE7IDAgPD0gaTsgLS1pKSBlW2ldID0gMDtcclxuXHRcdFx0XHRlLnQgPSB0aGlzLnQgKyB0LCBlLnMgPSB0aGlzLnNcclxuXHRcdFx0fSwgYi5wcm90b3R5cGUuZHJTaGlmdFRvID0gZnVuY3Rpb24odCwgZSkge1xyXG5cdFx0XHRcdGZvciAodmFyIGkgPSB0OyBpIDwgdGhpcy50OyArK2kpIGVbaSAtIHRdID0gdGhpc1tpXTtcclxuXHRcdFx0XHRlLnQgPSBNYXRoLm1heCh0aGlzLnQgLSB0LCAwKSwgZS5zID0gdGhpcy5zXHJcblx0XHRcdH0sIGIucHJvdG90eXBlLmxTaGlmdFRvID0gZnVuY3Rpb24odCwgZSkge1xyXG5cdFx0XHRcdGZvciAodmFyIGkgPSB0ICUgdGhpcy5EQiwgciA9IHRoaXMuREIgLSBpLCBuID0gKDEgPDwgcikgLSAxLCBzID0gTWF0aC5mbG9vcih0IC8gdGhpcy5EQiksIG8gPSB0aGlzLnMgPDwgaSAmIHRoaXMuRE0sXHJcblx0XHRcdFx0XHRcdGggPSB0aGlzLnQgLSAxOyAwIDw9IGg7IC0taCkgZVtoICsgcyArIDFdID0gdGhpc1toXSA+PiByIHwgbywgbyA9ICh0aGlzW2hdICYgbikgPDwgaTtcclxuXHRcdFx0XHRmb3IgKGggPSBzIC0gMTsgMCA8PSBoOyAtLWgpIGVbaF0gPSAwO1xyXG5cdFx0XHRcdGVbc10gPSBvLCBlLnQgPSB0aGlzLnQgKyBzICsgMSwgZS5zID0gdGhpcy5zLCBlLmNsYW1wKClcclxuXHRcdFx0fSwgYi5wcm90b3R5cGUuclNoaWZ0VG8gPSBmdW5jdGlvbih0LCBlKSB7XHJcblx0XHRcdFx0ZS5zID0gdGhpcy5zO1xyXG5cdFx0XHRcdHZhciBpID0gTWF0aC5mbG9vcih0IC8gdGhpcy5EQik7XHJcblx0XHRcdFx0aWYgKGkgPj0gdGhpcy50KSBlLnQgPSAwO1xyXG5cdFx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdFx0dmFyIHIgPSB0ICUgdGhpcy5EQixcclxuXHRcdFx0XHRcdFx0biA9IHRoaXMuREIgLSByLFxyXG5cdFx0XHRcdFx0XHRzID0gKDEgPDwgcikgLSAxO1xyXG5cdFx0XHRcdFx0ZVswXSA9IHRoaXNbaV0gPj4gcjtcclxuXHRcdFx0XHRcdGZvciAodmFyIG8gPSBpICsgMTsgbyA8IHRoaXMudDsgKytvKSBlW28gLSBpIC0gMV0gfD0gKHRoaXNbb10gJiBzKSA8PCBuLCBlW28gLSBpXSA9IHRoaXNbb10gPj4gcjtcclxuXHRcdFx0XHRcdDAgPCByICYmIChlW3RoaXMudCAtIGkgLSAxXSB8PSAodGhpcy5zICYgcykgPDwgbiksIGUudCA9IHRoaXMudCAtIGksIGUuY2xhbXAoKVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgYi5wcm90b3R5cGUuc3ViVG8gPSBmdW5jdGlvbih0LCBlKSB7XHJcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDAsIHIgPSAwLCBuID0gTWF0aC5taW4odC50LCB0aGlzLnQpOyBpIDwgbjspIHIgKz0gdGhpc1tpXSAtIHRbaV0sIGVbaSsrXSA9IHIgJiB0aGlzLkRNLCByID4+PSB0aGlzLkRCO1xyXG5cdFx0XHRcdGlmICh0LnQgPCB0aGlzLnQpIHtcclxuXHRcdFx0XHRcdGZvciAociAtPSB0LnM7IGkgPCB0aGlzLnQ7KSByICs9IHRoaXNbaV0sIGVbaSsrXSA9IHIgJiB0aGlzLkRNLCByID4+PSB0aGlzLkRCO1xyXG5cdFx0XHRcdFx0ciArPSB0aGlzLnNcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0Zm9yIChyICs9IHRoaXMuczsgaSA8IHQudDspIHIgLT0gdFtpXSwgZVtpKytdID0gciAmIHRoaXMuRE0sIHIgPj49IHRoaXMuREI7XHJcblx0XHRcdFx0XHRyIC09IHQuc1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlLnMgPSByIDwgMCA/IC0xIDogMCwgciA8IC0xID8gZVtpKytdID0gdGhpcy5EViArIHIgOiAwIDwgciAmJiAoZVtpKytdID0gciksIGUudCA9IGksIGUuY2xhbXAoKVxyXG5cdFx0XHR9LCBiLnByb3RvdHlwZS5tdWx0aXBseVRvID0gZnVuY3Rpb24odCwgZSkge1xyXG5cdFx0XHRcdHZhciBpID0gdGhpcy5hYnMoKSxcclxuXHRcdFx0XHRcdHIgPSB0LmFicygpLFxyXG5cdFx0XHRcdFx0biA9IGkudDtcclxuXHRcdFx0XHRmb3IgKGUudCA9IG4gKyByLnQ7IDAgPD0gLS1uOykgZVtuXSA9IDA7XHJcblx0XHRcdFx0Zm9yIChuID0gMDsgbiA8IHIudDsgKytuKSBlW24gKyBpLnRdID0gaS5hbSgwLCByW25dLCBlLCBuLCAwLCBpLnQpO1xyXG5cdFx0XHRcdGUucyA9IDAsIGUuY2xhbXAoKSwgdGhpcy5zICE9IHQucyAmJiBiLlpFUk8uc3ViVG8oZSwgZSlcclxuXHRcdFx0fSwgYi5wcm90b3R5cGUuc3F1YXJlVG8gPSBmdW5jdGlvbih0KSB7XHJcblx0XHRcdFx0Zm9yICh2YXIgZSA9IHRoaXMuYWJzKCksIGkgPSB0LnQgPSAyICogZS50OyAwIDw9IC0taTspIHRbaV0gPSAwO1xyXG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBlLnQgLSAxOyArK2kpIHtcclxuXHRcdFx0XHRcdHZhciByID0gZS5hbShpLCBlW2ldLCB0LCAyICogaSwgMCwgMSk7XHJcblx0XHRcdFx0XHQodFtpICsgZS50XSArPSBlLmFtKGkgKyAxLCAyICogZVtpXSwgdCwgMiAqIGkgKyAxLCByLCBlLnQgLSBpIC0gMSkpID49IGUuRFYgJiYgKHRbaSArIGUudF0gLT0gZS5EViwgdFtpICsgZS50ICtcclxuXHRcdFx0XHRcdFx0MV0gPSAxKVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHQwIDwgdC50ICYmICh0W3QudCAtIDFdICs9IGUuYW0oaSwgZVtpXSwgdCwgMiAqIGksIDAsIDEpKSwgdC5zID0gMCwgdC5jbGFtcCgpXHJcblx0XHRcdH0sIGIucHJvdG90eXBlLmRpdlJlbVRvID0gZnVuY3Rpb24odCwgZSwgaSkge1xyXG5cdFx0XHRcdHZhciByID0gdC5hYnMoKTtcclxuXHRcdFx0XHRpZiAoIShyLnQgPD0gMCkpIHtcclxuXHRcdFx0XHRcdHZhciBuID0gdGhpcy5hYnMoKTtcclxuXHRcdFx0XHRcdGlmIChuLnQgPCByLnQpIHJldHVybiBudWxsICE9IGUgJiYgZS5mcm9tSW50KDApLCB2b2lkKG51bGwgIT0gaSAmJiB0aGlzLmNvcHlUbyhpKSk7XHJcblx0XHRcdFx0XHRudWxsID09IGkgJiYgKGkgPSBNKCkpO1xyXG5cdFx0XHRcdFx0dmFyIHMgPSBNKCksXHJcblx0XHRcdFx0XHRcdG8gPSB0aGlzLnMsXHJcblx0XHRcdFx0XHRcdGggPSB0LnMsXHJcblx0XHRcdFx0XHRcdGEgPSB0aGlzLkRCIC0gVShyW3IudCAtIDFdKTtcclxuXHRcdFx0XHRcdDAgPCBhID8gKHIubFNoaWZ0VG8oYSwgcyksIG4ubFNoaWZ0VG8oYSwgaSkpIDogKHIuY29weVRvKHMpLCBuLmNvcHlUbyhpKSk7XHJcblx0XHRcdFx0XHR2YXIgdSA9IHMudCxcclxuXHRcdFx0XHRcdFx0YyA9IHNbdSAtIDFdO1xyXG5cdFx0XHRcdFx0aWYgKDAgIT0gYykge1xyXG5cdFx0XHRcdFx0XHR2YXIgZiA9IGMgKiAoMSA8PCB0aGlzLkYxKSArICgxIDwgdSA/IHNbdSAtIDJdID4+IHRoaXMuRjIgOiAwKSxcclxuXHRcdFx0XHRcdFx0XHRsID0gdGhpcy5GViAvIGYsXHJcblx0XHRcdFx0XHRcdFx0cCA9ICgxIDw8IHRoaXMuRjEpIC8gZixcclxuXHRcdFx0XHRcdFx0XHRnID0gMSA8PCB0aGlzLkYyLFxyXG5cdFx0XHRcdFx0XHRcdGQgPSBpLnQsXHJcblx0XHRcdFx0XHRcdFx0diA9IGQgLSB1LFxyXG5cdFx0XHRcdFx0XHRcdG0gPSBudWxsID09IGUgPyBNKCkgOiBlO1xyXG5cdFx0XHRcdFx0XHRmb3IgKHMuZGxTaGlmdFRvKHYsIG0pLCAwIDw9IGkuY29tcGFyZVRvKG0pICYmIChpW2kudCsrXSA9IDEsIGkuc3ViVG8obSwgaSkpLCBiLk9ORS5kbFNoaWZ0VG8odSwgbSksIG0uc3ViVG8ocyxcclxuXHRcdFx0XHRcdFx0XHRcdHMpOyBzLnQgPCB1Oykgc1tzLnQrK10gPSAwO1xyXG5cdFx0XHRcdFx0XHRmb3IgKDsgMCA8PSAtLXY7KSB7XHJcblx0XHRcdFx0XHRcdFx0dmFyIHkgPSBpWy0tZF0gPT0gYyA/IHRoaXMuRE0gOiBNYXRoLmZsb29yKGlbZF0gKiBsICsgKGlbZCAtIDFdICsgZykgKiBwKTtcclxuXHRcdFx0XHRcdFx0XHRpZiAoKGlbZF0gKz0gcy5hbSgwLCB5LCBpLCB2LCAwLCB1KSkgPCB5KVxyXG5cdFx0XHRcdFx0XHRcdFx0Zm9yIChzLmRsU2hpZnRUbyh2LCBtKSwgaS5zdWJUbyhtLCBpKTsgaVtkXSA8IC0teTspIGkuc3ViVG8obSwgaSlcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRudWxsICE9IGUgJiYgKGkuZHJTaGlmdFRvKHUsIGUpLCBvICE9IGggJiYgYi5aRVJPLnN1YlRvKGUsIGUpKSwgaS50ID0gdSwgaS5jbGFtcCgpLCAwIDwgYSAmJiBpLnJTaGlmdFRvKGEsIGkpLFxyXG5cdFx0XHRcdFx0XHRcdG8gPCAwICYmIGIuWkVSTy5zdWJUbyhpLCBpKVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgYi5wcm90b3R5cGUuaW52RGlnaXQgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZiAodGhpcy50IDwgMSkgcmV0dXJuIDA7XHJcblx0XHRcdFx0dmFyIHQgPSB0aGlzWzBdO1xyXG5cdFx0XHRcdGlmICgwID09ICgxICYgdCkpIHJldHVybiAwO1xyXG5cdFx0XHRcdHZhciBlID0gMyAmIHQ7XHJcblx0XHRcdFx0cmV0dXJuIDAgPCAoZSA9IChlID0gKGUgPSAoZSA9IGUgKiAoMiAtICgxNSAmIHQpICogZSkgJiAxNSkgKiAoMiAtICgyNTUgJiB0KSAqIGUpICYgMjU1KSAqICgyIC0gKCg2NTUzNSAmIHQpICogZSAmXHJcblx0XHRcdFx0XHQ2NTUzNSkpICYgNjU1MzUpICogKDIgLSB0ICogZSAlIHRoaXMuRFYpICUgdGhpcy5EVikgPyB0aGlzLkRWIC0gZSA6IC1lXHJcblx0XHRcdH0sIGIucHJvdG90eXBlLmlzRXZlbiA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiAwID09ICgwIDwgdGhpcy50ID8gMSAmIHRoaXNbMF0gOiB0aGlzLnMpXHJcblx0XHRcdH0sIGIucHJvdG90eXBlLmV4cCA9IGZ1bmN0aW9uKHQsIGUpIHtcclxuXHRcdFx0XHRpZiAoNDI5NDk2NzI5NSA8IHQgfHwgdCA8IDEpIHJldHVybiBiLk9ORTtcclxuXHRcdFx0XHR2YXIgaSA9IE0oKSxcclxuXHRcdFx0XHRcdHIgPSBNKCksXHJcblx0XHRcdFx0XHRuID0gZS5jb252ZXJ0KHRoaXMpLFxyXG5cdFx0XHRcdFx0cyA9IFUodCkgLSAxO1xyXG5cdFx0XHRcdGZvciAobi5jb3B5VG8oaSk7IDAgPD0gLS1zOylcclxuXHRcdFx0XHRcdGlmIChlLnNxclRvKGksIHIpLCAwIDwgKHQgJiAxIDw8IHMpKSBlLm11bFRvKHIsIG4sIGkpO1xyXG5cdFx0XHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0XHRcdHZhciBvID0gaTtcclxuXHRcdFx0XHRcdFx0aSA9IHIsIHIgPSBvXHJcblx0XHRcdFx0XHR9IHJldHVybiBlLnJldmVydChpKVxyXG5cdFx0XHR9LCBiLnByb3RvdHlwZS5jaHVua1NpemUgPSBmdW5jdGlvbih0KSB7XHJcblx0XHRcdFx0cmV0dXJuIE1hdGguZmxvb3IoTWF0aC5MTjIgKiB0aGlzLkRCIC8gTWF0aC5sb2codCkpXHJcblx0XHRcdH0sIGIucHJvdG90eXBlLnRvUmFkaXggPSBmdW5jdGlvbih0KSB7XHJcblx0XHRcdFx0aWYgKG51bGwgPT0gdCAmJiAodCA9IDEwKSwgMCA9PSB0aGlzLnNpZ251bSgpIHx8IHQgPCAyIHx8IDM2IDwgdCkgcmV0dXJuIFwiMFwiO1xyXG5cdFx0XHRcdHZhciBlID0gdGhpcy5jaHVua1NpemUodCksXHJcblx0XHRcdFx0XHRpID0gTWF0aC5wb3codCwgZSksXHJcblx0XHRcdFx0XHRyID0gRihpKSxcclxuXHRcdFx0XHRcdG4gPSBNKCksXHJcblx0XHRcdFx0XHRzID0gTSgpLFxyXG5cdFx0XHRcdFx0byA9IFwiXCI7XHJcblx0XHRcdFx0Zm9yICh0aGlzLmRpdlJlbVRvKHIsIG4sIHMpOyAwIDwgbi5zaWdudW0oKTspIG8gPSAoaSArIHMuaW50VmFsdWUoKSkudG9TdHJpbmcodCkuc3Vic3RyKDEpICsgbywgbi5kaXZSZW1UbyhyLCBuLFxyXG5cdFx0XHRcdFx0cyk7XHJcblx0XHRcdFx0cmV0dXJuIHMuaW50VmFsdWUoKS50b1N0cmluZyh0KSArIG9cclxuXHRcdFx0fSwgYi5wcm90b3R5cGUuZnJvbVJhZGl4ID0gZnVuY3Rpb24odCwgZSkge1xyXG5cdFx0XHRcdHRoaXMuZnJvbUludCgwKSwgbnVsbCA9PSBlICYmIChlID0gMTApO1xyXG5cdFx0XHRcdGZvciAodmFyIGkgPSB0aGlzLmNodW5rU2l6ZShlKSwgciA9IE1hdGgucG93KGUsIGkpLCBuID0gITEsIHMgPSAwLCBvID0gMCwgaCA9IDA7IGggPCB0Lmxlbmd0aDsgKytoKSB7XHJcblx0XHRcdFx0XHR2YXIgYSA9IEModCwgaCk7XHJcblx0XHRcdFx0XHRhIDwgMCA/IFwiLVwiID09IHQuY2hhckF0KGgpICYmIDAgPT0gdGhpcy5zaWdudW0oKSAmJiAobiA9ICEwKSA6IChvID0gZSAqIG8gKyBhLCArK3MgPj0gaSAmJiAodGhpcy5kTXVsdGlwbHkociksXHJcblx0XHRcdFx0XHRcdHRoaXMuZEFkZE9mZnNldChvLCAwKSwgbyA9IHMgPSAwKSlcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0MCA8IHMgJiYgKHRoaXMuZE11bHRpcGx5KE1hdGgucG93KGUsIHMpKSwgdGhpcy5kQWRkT2Zmc2V0KG8sIDApKSwgbiAmJiBiLlpFUk8uc3ViVG8odGhpcywgdGhpcylcclxuXHRcdFx0fSwgYi5wcm90b3R5cGUuZnJvbU51bWJlciA9IGZ1bmN0aW9uKHQsIGUsIGkpIHtcclxuXHRcdFx0XHRpZiAoXCJudW1iZXJcIiA9PSB0eXBlb2YgZSlcclxuXHRcdFx0XHRcdGlmICh0IDwgMikgdGhpcy5mcm9tSW50KDEpO1xyXG5cdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHRmb3IgKHRoaXMuZnJvbU51bWJlcih0LCBpKSwgdGhpcy50ZXN0Qml0KHQgLSAxKSB8fCB0aGlzLmJpdHdpc2VUbyhiLk9ORS5zaGlmdExlZnQodCAtIDEpLCB1LCB0aGlzKSwgdGhpcy5pc0V2ZW4oKSAmJlxyXG5cdFx0XHRcdFx0XHRcdHRoaXMuZEFkZE9mZnNldCgxLCAwKTsgIXRoaXMuaXNQcm9iYWJsZVByaW1lKGUpOykgdGhpcy5kQWRkT2Zmc2V0KDIsIDApLCB0aGlzLmJpdExlbmd0aCgpID4gdCAmJiB0aGlzLnN1YlRvKGIuT05FXHJcblx0XHRcdFx0XHRcdFx0LnNoaWZ0TGVmdCh0IC0gMSksIHRoaXMpO1xyXG5cdFx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdFx0dmFyIHIgPSBbXSxcclxuXHRcdFx0XHRcdFx0biA9IDcgJiB0O1xyXG5cdFx0XHRcdFx0ci5sZW5ndGggPSAxICsgKHQgPj4gMyksIGUubmV4dEJ5dGVzKHIpLCAwIDwgbiA/IHJbMF0gJj0gKDEgPDwgbikgLSAxIDogclswXSA9IDAsIHRoaXMuZnJvbVN0cmluZyhyLCAyNTYpXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCBiLnByb3RvdHlwZS5iaXR3aXNlVG8gPSBmdW5jdGlvbih0LCBlLCBpKSB7XHJcblx0XHRcdFx0dmFyIHIsIG4sIHMgPSBNYXRoLm1pbih0LnQsIHRoaXMudCk7XHJcblx0XHRcdFx0Zm9yIChyID0gMDsgciA8IHM7ICsrcikgaVtyXSA9IGUodGhpc1tyXSwgdFtyXSk7XHJcblx0XHRcdFx0aWYgKHQudCA8IHRoaXMudCkge1xyXG5cdFx0XHRcdFx0Zm9yIChuID0gdC5zICYgdGhpcy5ETSwgciA9IHM7IHIgPCB0aGlzLnQ7ICsrcikgaVtyXSA9IGUodGhpc1tyXSwgbik7XHJcblx0XHRcdFx0XHRpLnQgPSB0aGlzLnRcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0Zm9yIChuID0gdGhpcy5zICYgdGhpcy5ETSwgciA9IHM7IHIgPCB0LnQ7ICsrcikgaVtyXSA9IGUobiwgdFtyXSk7XHJcblx0XHRcdFx0XHRpLnQgPSB0LnRcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aS5zID0gZSh0aGlzLnMsIHQucyksIGkuY2xhbXAoKVxyXG5cdFx0XHR9LCBiLnByb3RvdHlwZS5jaGFuZ2VCaXQgPSBmdW5jdGlvbih0LCBlKSB7XHJcblx0XHRcdFx0dmFyIGkgPSBiLk9ORS5zaGlmdExlZnQodCk7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMuYml0d2lzZVRvKGksIGUsIGkpLCBpXHJcblx0XHRcdH0sIGIucHJvdG90eXBlLmFkZFRvID0gZnVuY3Rpb24odCwgZSkge1xyXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwLCByID0gMCwgbiA9IE1hdGgubWluKHQudCwgdGhpcy50KTsgaSA8IG47KSByICs9IHRoaXNbaV0gKyB0W2ldLCBlW2krK10gPSByICYgdGhpcy5ETSwgciA+Pj0gdGhpcy5EQjtcclxuXHRcdFx0XHRpZiAodC50IDwgdGhpcy50KSB7XHJcblx0XHRcdFx0XHRmb3IgKHIgKz0gdC5zOyBpIDwgdGhpcy50OykgciArPSB0aGlzW2ldLCBlW2krK10gPSByICYgdGhpcy5ETSwgciA+Pj0gdGhpcy5EQjtcclxuXHRcdFx0XHRcdHIgKz0gdGhpcy5zXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdGZvciAociArPSB0aGlzLnM7IGkgPCB0LnQ7KSByICs9IHRbaV0sIGVbaSsrXSA9IHIgJiB0aGlzLkRNLCByID4+PSB0aGlzLkRCO1xyXG5cdFx0XHRcdFx0ciArPSB0LnNcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZS5zID0gciA8IDAgPyAtMSA6IDAsIDAgPCByID8gZVtpKytdID0gciA6IHIgPCAtMSAmJiAoZVtpKytdID0gdGhpcy5EViArIHIpLCBlLnQgPSBpLCBlLmNsYW1wKClcclxuXHRcdFx0fSwgYi5wcm90b3R5cGUuZE11bHRpcGx5ID0gZnVuY3Rpb24odCkge1xyXG5cdFx0XHRcdHRoaXNbdGhpcy50XSA9IHRoaXMuYW0oMCwgdCAtIDEsIHRoaXMsIDAsIDAsIHRoaXMudCksICsrdGhpcy50LCB0aGlzLmNsYW1wKClcclxuXHRcdFx0fSwgYi5wcm90b3R5cGUuZEFkZE9mZnNldCA9IGZ1bmN0aW9uKHQsIGUpIHtcclxuXHRcdFx0XHRpZiAoMCAhPSB0KSB7XHJcblx0XHRcdFx0XHRmb3IgKDsgdGhpcy50IDw9IGU7KSB0aGlzW3RoaXMudCsrXSA9IDA7XHJcblx0XHRcdFx0XHRmb3IgKHRoaXNbZV0gKz0gdDsgdGhpc1tlXSA+PSB0aGlzLkRWOykgdGhpc1tlXSAtPSB0aGlzLkRWLCArK2UgPj0gdGhpcy50ICYmICh0aGlzW3RoaXMudCsrXSA9IDApLCArK3RoaXNbZV1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIGIucHJvdG90eXBlLm11bHRpcGx5TG93ZXJUbyA9IGZ1bmN0aW9uKHQsIGUsIGkpIHtcclxuXHRcdFx0XHR2YXIgciA9IE1hdGgubWluKHRoaXMudCArIHQudCwgZSk7XHJcblx0XHRcdFx0Zm9yIChpLnMgPSAwLCBpLnQgPSByOyAwIDwgcjspIGlbLS1yXSA9IDA7XHJcblx0XHRcdFx0Zm9yICh2YXIgbiA9IGkudCAtIHRoaXMudDsgciA8IG47ICsrcikgaVtyICsgdGhpcy50XSA9IHRoaXMuYW0oMCwgdFtyXSwgaSwgciwgMCwgdGhpcy50KTtcclxuXHRcdFx0XHRmb3IgKG4gPSBNYXRoLm1pbih0LnQsIGUpOyByIDwgbjsgKytyKSB0aGlzLmFtKDAsIHRbcl0sIGksIHIsIDAsIGUgLSByKTtcclxuXHRcdFx0XHRpLmNsYW1wKClcclxuXHRcdFx0fSwgYi5wcm90b3R5cGUubXVsdGlwbHlVcHBlclRvID0gZnVuY3Rpb24odCwgZSwgaSkge1xyXG5cdFx0XHRcdC0tZTtcclxuXHRcdFx0XHR2YXIgciA9IGkudCA9IHRoaXMudCArIHQudCAtIGU7XHJcblx0XHRcdFx0Zm9yIChpLnMgPSAwOyAwIDw9IC0tcjspIGlbcl0gPSAwO1xyXG5cdFx0XHRcdGZvciAociA9IE1hdGgubWF4KGUgLSB0aGlzLnQsIDApOyByIDwgdC50OyArK3IpIGlbdGhpcy50ICsgciAtIGVdID0gdGhpcy5hbShlIC0gciwgdFtyXSwgaSwgMCwgMCwgdGhpcy50ICsgciAtIGUpO1xyXG5cdFx0XHRcdGkuY2xhbXAoKSwgaS5kclNoaWZ0VG8oMSwgaSlcclxuXHRcdFx0fSwgYi5wcm90b3R5cGUubW9kSW50ID0gZnVuY3Rpb24odCkge1xyXG5cdFx0XHRcdGlmICh0IDw9IDApIHJldHVybiAwO1xyXG5cdFx0XHRcdHZhciBlID0gdGhpcy5EViAlIHQsXHJcblx0XHRcdFx0XHRpID0gdGhpcy5zIDwgMCA/IHQgLSAxIDogMDtcclxuXHRcdFx0XHRpZiAoMCA8IHRoaXMudClcclxuXHRcdFx0XHRcdGlmICgwID09IGUpIGkgPSB0aGlzWzBdICUgdDtcclxuXHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdFx0Zm9yICh2YXIgciA9IHRoaXMudCAtIDE7IDAgPD0gcjsgLS1yKSBpID0gKGUgKiBpICsgdGhpc1tyXSkgJSB0O1xyXG5cdFx0XHRcdHJldHVybiBpXHJcblx0XHRcdH0sIGIucHJvdG90eXBlLm1pbGxlclJhYmluID0gZnVuY3Rpb24odCkge1xyXG5cdFx0XHRcdHZhciBlID0gdGhpcy5zdWJ0cmFjdChiLk9ORSksXHJcblx0XHRcdFx0XHRpID0gZS5nZXRMb3dlc3RTZXRCaXQoKTtcclxuXHRcdFx0XHRpZiAoaSA8PSAwKSByZXR1cm4gITE7XHJcblx0XHRcdFx0dmFyIHIgPSBlLnNoaWZ0UmlnaHQoaSk7XHJcblx0XHRcdFx0Qi5sZW5ndGggPCAodCA9IHQgKyAxID4+IDEpICYmICh0ID0gQi5sZW5ndGgpO1xyXG5cdFx0XHRcdGZvciAodmFyIG4gPSBNKCksIHMgPSAwOyBzIDwgdDsgKytzKSB7XHJcblx0XHRcdFx0XHRuLmZyb21JbnQoQltNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBCLmxlbmd0aCldKTtcclxuXHRcdFx0XHRcdHZhciBvID0gbi5tb2RQb3cociwgdGhpcyk7XHJcblx0XHRcdFx0XHRpZiAoMCAhPSBvLmNvbXBhcmVUbyhiLk9ORSkgJiYgMCAhPSBvLmNvbXBhcmVUbyhlKSkge1xyXG5cdFx0XHRcdFx0XHRmb3IgKHZhciBoID0gMTsgaCsrIDwgaSAmJiAwICE9IG8uY29tcGFyZVRvKGUpOylcclxuXHRcdFx0XHRcdFx0XHRpZiAoMCA9PSAobyA9IG8ubW9kUG93SW50KDIsIHRoaXMpKS5jb21wYXJlVG8oYi5PTkUpKSByZXR1cm4gITE7XHJcblx0XHRcdFx0XHRcdGlmICgwICE9IG8uY29tcGFyZVRvKGUpKSByZXR1cm4gITFcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuICEwXHJcblx0XHRcdH0sIGIucHJvdG90eXBlLnNxdWFyZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHZhciB0ID0gTSgpO1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLnNxdWFyZVRvKHQpLCB0XHJcblx0XHRcdH0sIGIucHJvdG90eXBlLmdjZGEgPSBmdW5jdGlvbih0LCBlKSB7XHJcblx0XHRcdFx0dmFyIGkgPSB0aGlzLnMgPCAwID8gdGhpcy5uZWdhdGUoKSA6IHRoaXMuY2xvbmUoKSxcclxuXHRcdFx0XHRcdHIgPSB0LnMgPCAwID8gdC5uZWdhdGUoKSA6IHQuY2xvbmUoKTtcclxuXHRcdFx0XHRpZiAoaS5jb21wYXJlVG8ocikgPCAwKSB7XHJcblx0XHRcdFx0XHR2YXIgbiA9IGk7XHJcblx0XHRcdFx0XHRpID0gciwgciA9IG5cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0dmFyIHMgPSBpLmdldExvd2VzdFNldEJpdCgpLFxyXG5cdFx0XHRcdFx0byA9IHIuZ2V0TG93ZXN0U2V0Qml0KCk7XHJcblx0XHRcdFx0aWYgKG8gPCAwKSBlKGkpO1xyXG5cdFx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdFx0cyA8IG8gJiYgKG8gPSBzKSwgMCA8IG8gJiYgKGkuclNoaWZ0VG8obywgaSksIHIuclNoaWZ0VG8obywgcikpO1xyXG5cdFx0XHRcdFx0dmFyIGggPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0MCA8IChzID0gaS5nZXRMb3dlc3RTZXRCaXQoKSkgJiYgaS5yU2hpZnRUbyhzLCBpKSwgMCA8IChzID0gci5nZXRMb3dlc3RTZXRCaXQoKSkgJiYgci5yU2hpZnRUbyhzLCByKSwgMCA8PSBpLmNvbXBhcmVUbyhcclxuXHRcdFx0XHRcdFx0XHRcdHIpID8gKGkuc3ViVG8ociwgaSksIGkuclNoaWZ0VG8oMSwgaSkpIDogKHIuc3ViVG8oaSwgciksIHIuclNoaWZ0VG8oMSwgcikpLCAwIDwgaS5zaWdudW0oKSA/IHNldFRpbWVvdXQoaCwgMCkgOlxyXG5cdFx0XHRcdFx0XHRcdCgwIDwgbyAmJiByLmxTaGlmdFRvKG8sIHIpLCBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0ZShyKVxyXG5cdFx0XHRcdFx0XHRcdH0sIDApKVxyXG5cdFx0XHRcdFx0fTtcclxuXHRcdFx0XHRcdHNldFRpbWVvdXQoaCwgMTApXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCBiLnByb3RvdHlwZS5mcm9tTnVtYmVyQXN5bmMgPSBmdW5jdGlvbih0LCBlLCBpLCByKSB7XHJcblx0XHRcdFx0aWYgKFwibnVtYmVyXCIgPT0gdHlwZW9mIGUpXHJcblx0XHRcdFx0XHRpZiAodCA8IDIpIHRoaXMuZnJvbUludCgxKTtcclxuXHRcdFx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdFx0XHR0aGlzLmZyb21OdW1iZXIodCwgaSksIHRoaXMudGVzdEJpdCh0IC0gMSkgfHwgdGhpcy5iaXR3aXNlVG8oYi5PTkUuc2hpZnRMZWZ0KHQgLSAxKSwgdSwgdGhpcyksIHRoaXMuaXNFdmVuKCkgJiZcclxuXHRcdFx0XHRcdFx0XHR0aGlzLmRBZGRPZmZzZXQoMSwgMCk7XHJcblx0XHRcdFx0XHRcdHZhciBuID0gdGhpcyxcclxuXHRcdFx0XHRcdFx0XHRzID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRuLmRBZGRPZmZzZXQoMiwgMCksIG4uYml0TGVuZ3RoKCkgPiB0ICYmIG4uc3ViVG8oYi5PTkUuc2hpZnRMZWZ0KHQgLSAxKSwgbiksIG4uaXNQcm9iYWJsZVByaW1lKGUpID9cclxuXHRcdFx0XHRcdFx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyKClcclxuXHRcdFx0XHRcdFx0XHRcdFx0fSwgMCkgOiBzZXRUaW1lb3V0KHMsIDApXHJcblx0XHRcdFx0XHRcdFx0fTtcclxuXHRcdFx0XHRcdFx0c2V0VGltZW91dChzLCAwKVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdFx0dmFyIG8gPSBbXSxcclxuXHRcdFx0XHRcdFx0aCA9IDcgJiB0O1xyXG5cdFx0XHRcdFx0by5sZW5ndGggPSAxICsgKHQgPj4gMyksIGUubmV4dEJ5dGVzKG8pLCAwIDwgaCA/IG9bMF0gJj0gKDEgPDwgaCkgLSAxIDogb1swXSA9IDAsIHRoaXMuZnJvbVN0cmluZyhvLCAyNTYpXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCBiXHJcblx0XHR9KCksXHJcblx0XHRWID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdGZ1bmN0aW9uIHQoKSB7fVxyXG5cdFx0XHRyZXR1cm4gdC5wcm90b3R5cGUuY29udmVydCA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdFx0XHRyZXR1cm4gdFxyXG5cdFx0XHR9LCB0LnByb3RvdHlwZS5yZXZlcnQgPSBmdW5jdGlvbih0KSB7XHJcblx0XHRcdFx0cmV0dXJuIHRcclxuXHRcdFx0fSwgdC5wcm90b3R5cGUubXVsVG8gPSBmdW5jdGlvbih0LCBlLCBpKSB7XHJcblx0XHRcdFx0dC5tdWx0aXBseVRvKGUsIGkpXHJcblx0XHRcdH0sIHQucHJvdG90eXBlLnNxclRvID0gZnVuY3Rpb24odCwgZSkge1xyXG5cdFx0XHRcdHQuc3F1YXJlVG8oZSlcclxuXHRcdFx0fSwgdFxyXG5cdFx0fSgpLFxyXG5cdFx0SSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRmdW5jdGlvbiB0KHQpIHtcclxuXHRcdFx0XHR0aGlzLm0gPSB0XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHQucHJvdG90eXBlLmNvbnZlcnQgPSBmdW5jdGlvbih0KSB7XHJcblx0XHRcdFx0cmV0dXJuIHQucyA8IDAgfHwgMCA8PSB0LmNvbXBhcmVUbyh0aGlzLm0pID8gdC5tb2QodGhpcy5tKSA6IHRcclxuXHRcdFx0fSwgdC5wcm90b3R5cGUucmV2ZXJ0ID0gZnVuY3Rpb24odCkge1xyXG5cdFx0XHRcdHJldHVybiB0XHJcblx0XHRcdH0sIHQucHJvdG90eXBlLnJlZHVjZSA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdFx0XHR0LmRpdlJlbVRvKHRoaXMubSwgbnVsbCwgdClcclxuXHRcdFx0fSwgdC5wcm90b3R5cGUubXVsVG8gPSBmdW5jdGlvbih0LCBlLCBpKSB7XHJcblx0XHRcdFx0dC5tdWx0aXBseVRvKGUsIGkpLCB0aGlzLnJlZHVjZShpKVxyXG5cdFx0XHR9LCB0LnByb3RvdHlwZS5zcXJUbyA9IGZ1bmN0aW9uKHQsIGUpIHtcclxuXHRcdFx0XHR0LnNxdWFyZVRvKGUpLCB0aGlzLnJlZHVjZShlKVxyXG5cdFx0XHR9LCB0XHJcblx0XHR9KCksXHJcblx0XHROID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdGZ1bmN0aW9uIHQodCkge1xyXG5cdFx0XHRcdHRoaXMubSA9IHQsIHRoaXMubXAgPSB0LmludkRpZ2l0KCksIHRoaXMubXBsID0gMzI3NjcgJiB0aGlzLm1wLCB0aGlzLm1waCA9IHRoaXMubXAgPj4gMTUsIHRoaXMudW0gPSAoMSA8PCB0LkRCIC1cclxuXHRcdFx0XHRcdDE1KSAtIDEsIHRoaXMubXQyID0gMiAqIHQudFxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiB0LnByb3RvdHlwZS5jb252ZXJ0ID0gZnVuY3Rpb24odCkge1xyXG5cdFx0XHRcdHZhciBlID0gTSgpO1xyXG5cdFx0XHRcdHJldHVybiB0LmFicygpLmRsU2hpZnRUbyh0aGlzLm0udCwgZSksIGUuZGl2UmVtVG8odGhpcy5tLCBudWxsLCBlKSwgdC5zIDwgMCAmJiAwIDwgZS5jb21wYXJlVG8oTy5aRVJPKSAmJiB0aGlzLm0uc3ViVG8oXHJcblx0XHRcdFx0XHRlLCBlKSwgZVxyXG5cdFx0XHR9LCB0LnByb3RvdHlwZS5yZXZlcnQgPSBmdW5jdGlvbih0KSB7XHJcblx0XHRcdFx0dmFyIGUgPSBNKCk7XHJcblx0XHRcdFx0cmV0dXJuIHQuY29weVRvKGUpLCB0aGlzLnJlZHVjZShlKSwgZVxyXG5cdFx0XHR9LCB0LnByb3RvdHlwZS5yZWR1Y2UgPSBmdW5jdGlvbih0KSB7XHJcblx0XHRcdFx0Zm9yICg7IHQudCA8PSB0aGlzLm10MjspIHRbdC50KytdID0gMDtcclxuXHRcdFx0XHRmb3IgKHZhciBlID0gMDsgZSA8IHRoaXMubS50OyArK2UpIHtcclxuXHRcdFx0XHRcdHZhciBpID0gMzI3NjcgJiB0W2VdLFxyXG5cdFx0XHRcdFx0XHRyID0gaSAqIHRoaXMubXBsICsgKChpICogdGhpcy5tcGggKyAodFtlXSA+PiAxNSkgKiB0aGlzLm1wbCAmIHRoaXMudW0pIDw8IDE1KSAmIHQuRE07XHJcblx0XHRcdFx0XHRmb3IgKHRbaSA9IGUgKyB0aGlzLm0udF0gKz0gdGhpcy5tLmFtKDAsIHIsIHQsIGUsIDAsIHRoaXMubS50KTsgdFtpXSA+PSB0LkRWOykgdFtpXSAtPSB0LkRWLCB0WysraV0rK1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHR0LmNsYW1wKCksIHQuZHJTaGlmdFRvKHRoaXMubS50LCB0KSwgMCA8PSB0LmNvbXBhcmVUbyh0aGlzLm0pICYmIHQuc3ViVG8odGhpcy5tLCB0KVxyXG5cdFx0XHR9LCB0LnByb3RvdHlwZS5tdWxUbyA9IGZ1bmN0aW9uKHQsIGUsIGkpIHtcclxuXHRcdFx0XHR0Lm11bHRpcGx5VG8oZSwgaSksIHRoaXMucmVkdWNlKGkpXHJcblx0XHRcdH0sIHQucHJvdG90eXBlLnNxclRvID0gZnVuY3Rpb24odCwgZSkge1xyXG5cdFx0XHRcdHQuc3F1YXJlVG8oZSksIHRoaXMucmVkdWNlKGUpXHJcblx0XHRcdH0sIHRcclxuXHRcdH0oKSxcclxuXHRcdFAgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0ZnVuY3Rpb24gdCh0KSB7XHJcblx0XHRcdFx0dGhpcy5tID0gdCwgdGhpcy5yMiA9IE0oKSwgdGhpcy5xMyA9IE0oKSwgTy5PTkUuZGxTaGlmdFRvKDIgKiB0LnQsIHRoaXMucjIpLCB0aGlzLm11ID0gdGhpcy5yMi5kaXZpZGUodClcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gdC5wcm90b3R5cGUuY29udmVydCA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdFx0XHRpZiAodC5zIDwgMCB8fCB0LnQgPiAyICogdGhpcy5tLnQpIHJldHVybiB0Lm1vZCh0aGlzLm0pO1xyXG5cdFx0XHRcdGlmICh0LmNvbXBhcmVUbyh0aGlzLm0pIDwgMCkgcmV0dXJuIHQ7XHJcblx0XHRcdFx0dmFyIGUgPSBNKCk7XHJcblx0XHRcdFx0cmV0dXJuIHQuY29weVRvKGUpLCB0aGlzLnJlZHVjZShlKSwgZVxyXG5cdFx0XHR9LCB0LnByb3RvdHlwZS5yZXZlcnQgPSBmdW5jdGlvbih0KSB7XHJcblx0XHRcdFx0cmV0dXJuIHRcclxuXHRcdFx0fSwgdC5wcm90b3R5cGUucmVkdWNlID0gZnVuY3Rpb24odCkge1xyXG5cdFx0XHRcdGZvciAodC5kclNoaWZ0VG8odGhpcy5tLnQgLSAxLCB0aGlzLnIyKSwgdC50ID4gdGhpcy5tLnQgKyAxICYmICh0LnQgPSB0aGlzLm0udCArIDEsIHQuY2xhbXAoKSksIHRoaXMubXUubXVsdGlwbHlVcHBlclRvKFxyXG5cdFx0XHRcdFx0XHR0aGlzLnIyLCB0aGlzLm0udCArIDEsIHRoaXMucTMpLCB0aGlzLm0ubXVsdGlwbHlMb3dlclRvKHRoaXMucTMsIHRoaXMubS50ICsgMSwgdGhpcy5yMik7IHQuY29tcGFyZVRvKHRoaXMucjIpIDxcclxuXHRcdFx0XHRcdDA7KSB0LmRBZGRPZmZzZXQoMSwgdGhpcy5tLnQgKyAxKTtcclxuXHRcdFx0XHRmb3IgKHQuc3ViVG8odGhpcy5yMiwgdCk7IDAgPD0gdC5jb21wYXJlVG8odGhpcy5tKTspIHQuc3ViVG8odGhpcy5tLCB0KVxyXG5cdFx0XHR9LCB0LnByb3RvdHlwZS5tdWxUbyA9IGZ1bmN0aW9uKHQsIGUsIGkpIHtcclxuXHRcdFx0XHR0Lm11bHRpcGx5VG8oZSwgaSksIHRoaXMucmVkdWNlKGkpXHJcblx0XHRcdH0sIHQucHJvdG90eXBlLnNxclRvID0gZnVuY3Rpb24odCwgZSkge1xyXG5cdFx0XHRcdHQuc3F1YXJlVG8oZSksIHRoaXMucmVkdWNlKGUpXHJcblx0XHRcdH0sIHRcclxuXHRcdH0oKTtcclxuXHJcblx0ZnVuY3Rpb24gTSgpIHtcclxuXHRcdHJldHVybiBuZXcgTyhudWxsKVxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gcSh0LCBlKSB7XHJcblx0XHRyZXR1cm4gbmV3IE8odCwgZSlcclxuXHR9XHJcblx0XCJNaWNyb3NvZnQgSW50ZXJuZXQgRXhwbG9yZXJcIiA9PSBuYXZpZ2F0b3IyLmFwcE5hbWUgPyAoTy5wcm90b3R5cGUuYW0gPSBmdW5jdGlvbih0LCBlLCBpLCByLCBuLCBzKSB7XHJcblx0XHRmb3IgKHZhciBvID0gMzI3NjcgJiBlLCBoID0gZSA+PiAxNTsgMCA8PSAtLXM7KSB7XHJcblx0XHRcdHZhciBhID0gMzI3NjcgJiB0aGlzW3RdLFxyXG5cdFx0XHRcdHUgPSB0aGlzW3QrK10gPj4gMTUsXHJcblx0XHRcdFx0YyA9IGggKiBhICsgdSAqIG87XHJcblx0XHRcdG4gPSAoKGEgPSBvICogYSArICgoMzI3NjcgJiBjKSA8PCAxNSkgKyBpW3JdICsgKDEwNzM3NDE4MjMgJiBuKSkgPj4+IDMwKSArIChjID4+PiAxNSkgKyBoICogdSArIChuID4+PiAzMCksIGlbcisrXSA9XHJcblx0XHRcdFx0MTA3Mzc0MTgyMyAmIGFcclxuXHRcdH1cclxuXHRcdHJldHVybiBuXHJcblx0fSwgdyA9IDMwKSA6IFwiTmV0c2NhcGVcIiAhPSBuYXZpZ2F0b3IyLmFwcE5hbWUgPyAoTy5wcm90b3R5cGUuYW0gPSBmdW5jdGlvbih0LCBlLCBpLCByLCBuLCBzKSB7XHJcblx0XHRmb3IgKDsgMCA8PSAtLXM7KSB7XHJcblx0XHRcdHZhciBvID0gZSAqIHRoaXNbdCsrXSArIGlbcl0gKyBuO1xyXG5cdFx0XHRuID0gTWF0aC5mbG9vcihvIC8gNjcxMDg4NjQpLCBpW3IrK10gPSA2NzEwODg2MyAmIG9cclxuXHRcdH1cclxuXHRcdHJldHVybiBuXHJcblx0fSwgdyA9IDI2KSA6IChPLnByb3RvdHlwZS5hbSA9IGZ1bmN0aW9uKHQsIGUsIGksIHIsIG4sIHMpIHtcclxuXHRcdGZvciAodmFyIG8gPSAxNjM4MyAmIGUsIGggPSBlID4+IDE0OyAwIDw9IC0tczspIHtcclxuXHRcdFx0dmFyIGEgPSAxNjM4MyAmIHRoaXNbdF0sXHJcblx0XHRcdFx0dSA9IHRoaXNbdCsrXSA+PiAxNCxcclxuXHRcdFx0XHRjID0gaCAqIGEgKyB1ICogbztcclxuXHRcdFx0biA9ICgoYSA9IG8gKiBhICsgKCgxNjM4MyAmIGMpIDw8IDE0KSArIGlbcl0gKyBuKSA+PiAyOCkgKyAoYyA+PiAxNCkgKyBoICogdSwgaVtyKytdID0gMjY4NDM1NDU1ICYgYVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIG5cclxuXHR9LCB3ID0gMjgpLCBPLnByb3RvdHlwZS5EQiA9IHcsIE8ucHJvdG90eXBlLkRNID0gKDEgPDwgdykgLSAxLCBPLnByb3RvdHlwZS5EViA9IDEgPDwgdztcclxuXHRPLnByb3RvdHlwZS5GViA9IE1hdGgucG93KDIsIDUyKSwgTy5wcm90b3R5cGUuRjEgPSA1MiAtIHcsIE8ucHJvdG90eXBlLkYyID0gMiAqIHcgLSA1MjtcclxuXHR2YXIgaiwgTCwgSCA9IFtdO1xyXG5cdGZvciAoaiA9IFwiMFwiLmNoYXJDb2RlQXQoMCksIEwgPSAwOyBMIDw9IDk7ICsrTCkgSFtqKytdID0gTDtcclxuXHRmb3IgKGogPSBcImFcIi5jaGFyQ29kZUF0KDApLCBMID0gMTA7IEwgPCAzNjsgKytMKSBIW2orK10gPSBMO1xyXG5cdGZvciAoaiA9IFwiQVwiLmNoYXJDb2RlQXQoMCksIEwgPSAxMDsgTCA8IDM2OyArK0wpIEhbaisrXSA9IEw7XHJcblxyXG5cdGZ1bmN0aW9uIEModCwgZSkge1xyXG5cdFx0dmFyIGkgPSBIW3QuY2hhckNvZGVBdChlKV07XHJcblx0XHRyZXR1cm4gbnVsbCA9PSBpID8gLTEgOiBpXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBGKHQpIHtcclxuXHRcdHZhciBlID0gTSgpO1xyXG5cdFx0cmV0dXJuIGUuZnJvbUludCh0KSwgZVxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gVSh0KSB7XHJcblx0XHR2YXIgZSwgaSA9IDE7XHJcblx0XHRyZXR1cm4gMCAhPSAoZSA9IHQgPj4+IDE2KSAmJiAodCA9IGUsIGkgKz0gMTYpLCAwICE9IChlID0gdCA+PiA4KSAmJiAodCA9IGUsIGkgKz0gOCksIDAgIT0gKGUgPSB0ID4+IDQpICYmICh0ID0gZSwgaSArPVxyXG5cdFx0XHQ0KSwgMCAhPSAoZSA9IHQgPj4gMikgJiYgKHQgPSBlLCBpICs9IDIpLCAwICE9IChlID0gdCA+PiAxKSAmJiAodCA9IGUsIGkgKz0gMSksIGlcclxuXHR9XHJcblx0Ty5aRVJPID0gRigwKSwgTy5PTkUgPSBGKDEpO1xyXG5cdHZhciBLID0gZnVuY3Rpb24oKSB7XHJcblx0XHRmdW5jdGlvbiB0KCkge1xyXG5cdFx0XHR0aGlzLmkgPSAwLCB0aGlzLmogPSAwLCB0aGlzLlMgPSBbXVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHQucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbih0KSB7XHJcblx0XHRcdHZhciBlLCBpLCByO1xyXG5cdFx0XHRmb3IgKGUgPSAwOyBlIDwgMjU2OyArK2UpIHRoaXMuU1tlXSA9IGU7XHJcblx0XHRcdGZvciAoZSA9IGkgPSAwOyBlIDwgMjU2OyArK2UpIGkgPSBpICsgdGhpcy5TW2VdICsgdFtlICUgdC5sZW5ndGhdICYgMjU1LCByID0gdGhpcy5TW2VdLCB0aGlzLlNbZV0gPSB0aGlzLlNbaV0sXHJcblx0XHRcdFx0dGhpcy5TW2ldID0gcjtcclxuXHRcdFx0dGhpcy5pID0gMCwgdGhpcy5qID0gMFxyXG5cdFx0fSwgdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgdDtcclxuXHRcdFx0cmV0dXJuIHRoaXMuaSA9IHRoaXMuaSArIDEgJiAyNTUsIHRoaXMuaiA9IHRoaXMuaiArIHRoaXMuU1t0aGlzLmldICYgMjU1LCB0ID0gdGhpcy5TW3RoaXMuaV0sIHRoaXMuU1t0aGlzLmldID1cclxuXHRcdFx0XHR0aGlzLlNbdGhpcy5qXSwgdGhpcy5TW3RoaXMual0gPSB0LCB0aGlzLlNbdCArIHRoaXMuU1t0aGlzLmldICYgMjU1XVxyXG5cdFx0fSwgdFxyXG5cdH0oKTtcclxuXHR2YXIgaywgXywgeiA9IDI1NixcclxuXHRcdFogPSBudWxsO1xyXG5cdGlmIChudWxsID09IFopIHtcclxuXHRcdFogPSBbXTtcclxuXHRcdHZhciBHID0gdm9pZChfID0gMCk7XHJcblx0XHRpZiAod2luZG93Mi5jcnlwdG8gJiYgd2luZG93Mi5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XHJcblx0XHRcdHZhciAkID0gbmV3IFVpbnQzMkFycmF5KDI1Nik7XHJcblx0XHRcdGZvciAod2luZG93Mi5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKCQpLCBHID0gMDsgRyA8ICQubGVuZ3RoOyArK0cpIFpbXysrXSA9IDI1NSAmICRbR11cclxuXHRcdH1cclxuXHRcdHZhciBZID0gZnVuY3Rpb24odCkge1xyXG5cdFx0XHRpZiAodGhpcy5jb3VudCA9IHRoaXMuY291bnQgfHwgMCwgMjU2IDw9IHRoaXMuY291bnQgfHwgeiA8PSBfKSB3aW5kb3cyLnJlbW92ZUV2ZW50TGlzdGVuZXIgPyB3aW5kb3cyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXHJcblx0XHRcdFx0XCJtb3VzZW1vdmVcIiwgWSwgITEpIDogd2luZG93Mi5kZXRhY2hFdmVudCAmJiB3aW5kb3cyLmRldGFjaEV2ZW50KFwib25tb3VzZW1vdmVcIiwgWSk7XHJcblx0XHRcdGVsc2UgdHJ5IHtcclxuXHRcdFx0XHR2YXIgZSA9IHQueCArIHQueTtcclxuXHRcdFx0XHRaW18rK10gPSAyNTUgJiBlLCB0aGlzLmNvdW50ICs9IDFcclxuXHRcdFx0fSBjYXRjaCAodCkge31cclxuXHRcdH07XHJcblx0XHR3aW5kb3cyLmFkZEV2ZW50TGlzdGVuZXIgPyB3aW5kb3cyLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgWSwgITEpIDogd2luZG93Mi5hdHRhY2hFdmVudCAmJiB3aW5kb3cyLmF0dGFjaEV2ZW50KFxyXG5cdFx0XHRcIm9ubW91c2Vtb3ZlXCIsIFkpXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBKKCkge1xyXG5cdFx0aWYgKG51bGwgPT0gaykge1xyXG5cdFx0XHRmb3IgKGsgPSBuZXcgSzsgXyA8IHo7KSB7XHJcblx0XHRcdFx0dmFyIHQgPSBNYXRoLmZsb29yKDY1NTM2ICogTWF0aC5yYW5kb20oKSk7XHJcblx0XHRcdFx0WltfKytdID0gMjU1ICYgdFxyXG5cdFx0XHR9XHJcblx0XHRcdGZvciAoay5pbml0KFopLCBfID0gMDsgXyA8IFoubGVuZ3RoOyArK18pIFpbX10gPSAwO1xyXG5cdFx0XHRfID0gMFxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGsubmV4dCgpXHJcblx0fVxyXG5cdHZhciBYID0gZnVuY3Rpb24oKSB7XHJcblx0XHRmdW5jdGlvbiB0KCkge31cclxuXHRcdHJldHVybiB0LnByb3RvdHlwZS5uZXh0Qnl0ZXMgPSBmdW5jdGlvbih0KSB7XHJcblx0XHRcdGZvciAodmFyIGUgPSAwOyBlIDwgdC5sZW5ndGg7ICsrZSkgdFtlXSA9IEooKVxyXG5cdFx0fSwgdFxyXG5cdH0oKTtcclxuXHR2YXIgUSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0ZnVuY3Rpb24gdCgpIHtcclxuXHRcdFx0dGhpcy5uID0gbnVsbCwgdGhpcy5lID0gMCwgdGhpcy5kID0gbnVsbCwgdGhpcy5wID0gbnVsbCwgdGhpcy5xID0gbnVsbCwgdGhpcy5kbXAxID0gbnVsbCwgdGhpcy5kbXExID0gbnVsbCwgdGhpcy5jb2VmZiA9XHJcblx0XHRcdFx0bnVsbFxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHQucHJvdG90eXBlLmRvUHVibGljID0gZnVuY3Rpb24odCkge1xyXG5cdFx0XHRyZXR1cm4gdC5tb2RQb3dJbnQodGhpcy5lLCB0aGlzLm4pXHJcblx0XHR9LCB0LnByb3RvdHlwZS5kb1ByaXZhdGUgPSBmdW5jdGlvbih0KSB7XHJcblx0XHRcdGlmIChudWxsID09IHRoaXMucCB8fCBudWxsID09IHRoaXMucSkgcmV0dXJuIHQubW9kUG93KHRoaXMuZCwgdGhpcy5uKTtcclxuXHRcdFx0Zm9yICh2YXIgZSA9IHQubW9kKHRoaXMucCkubW9kUG93KHRoaXMuZG1wMSwgdGhpcy5wKSwgaSA9IHQubW9kKHRoaXMucSkubW9kUG93KHRoaXMuZG1xMSwgdGhpcy5xKTsgZS5jb21wYXJlVG8oaSkgPFxyXG5cdFx0XHRcdDA7KSBlID0gZS5hZGQodGhpcy5wKTtcclxuXHRcdFx0cmV0dXJuIGUuc3VidHJhY3QoaSkubXVsdGlwbHkodGhpcy5jb2VmZikubW9kKHRoaXMucCkubXVsdGlwbHkodGhpcy5xKS5hZGQoaSlcclxuXHRcdH0sIHQucHJvdG90eXBlLnNldFB1YmxpYyA9IGZ1bmN0aW9uKHQsIGUpIHtcclxuXHRcdFx0bnVsbCAhPSB0ICYmIG51bGwgIT0gZSAmJiAwIDwgdC5sZW5ndGggJiYgMCA8IGUubGVuZ3RoID8gKHRoaXMubiA9IHEodCwgMTYpLCB0aGlzLmUgPSBwYXJzZUludChlLCAxNikpIDogY29uc29sZS5lcnJvcihcclxuXHRcdFx0XHRcIkludmFsaWQgUlNBIHB1YmxpYyBrZXlcIilcclxuXHRcdH0sIHQucHJvdG90eXBlLmVuY3J5cHQgPSBmdW5jdGlvbih0KSB7XHJcblx0XHRcdHZhciBlID0gZnVuY3Rpb24odCwgZSkge1xyXG5cdFx0XHRcdGlmIChlIDwgdC5sZW5ndGggKyAxMSkgcmV0dXJuIGNvbnNvbGUuZXJyb3IoXCJNZXNzYWdlIHRvbyBsb25nIGZvciBSU0FcIiksIG51bGw7XHJcblx0XHRcdFx0Zm9yICh2YXIgaSA9IFtdLCByID0gdC5sZW5ndGggLSAxOyAwIDw9IHIgJiYgMCA8IGU7KSB7XHJcblx0XHRcdFx0XHR2YXIgbiA9IHQuY2hhckNvZGVBdChyLS0pO1xyXG5cdFx0XHRcdFx0biA8IDEyOCA/IGlbLS1lXSA9IG4gOiAxMjcgPCBuICYmIG4gPCAyMDQ4ID8gKGlbLS1lXSA9IDYzICYgbiB8IDEyOCwgaVstLWVdID0gbiA+PiA2IHwgMTkyKSA6IChpWy0tZV0gPSA2MyAmIG4gfFxyXG5cdFx0XHRcdFx0XHQxMjgsIGlbLS1lXSA9IG4gPj4gNiAmIDYzIHwgMTI4LCBpWy0tZV0gPSBuID4+IDEyIHwgMjI0KVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpWy0tZV0gPSAwO1xyXG5cdFx0XHRcdGZvciAodmFyIHMgPSBuZXcgWCwgbyA9IFtdOyAyIDwgZTspIHtcclxuXHRcdFx0XHRcdGZvciAob1swXSA9IDA7IDAgPT0gb1swXTspIHMubmV4dEJ5dGVzKG8pO1xyXG5cdFx0XHRcdFx0aVstLWVdID0gb1swXVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gaVstLWVdID0gMiwgaVstLWVdID0gMCwgbmV3IE8oaSlcclxuXHRcdFx0fSh0LCB0aGlzLm4uYml0TGVuZ3RoKCkgKyA3ID4+IDMpO1xyXG5cdFx0XHRpZiAobnVsbCA9PSBlKSByZXR1cm4gbnVsbDtcclxuXHRcdFx0dmFyIGkgPSB0aGlzLmRvUHVibGljKGUpO1xyXG5cdFx0XHRpZiAobnVsbCA9PSBpKSByZXR1cm4gbnVsbDtcclxuXHRcdFx0dmFyIHIgPSBpLnRvU3RyaW5nKDE2KTtcclxuXHRcdFx0cmV0dXJuIDAgPT0gKDEgJiByLmxlbmd0aCkgPyByIDogXCIwXCIgKyByXHJcblx0XHR9LCB0LnByb3RvdHlwZS5zZXRQcml2YXRlID0gZnVuY3Rpb24odCwgZSwgaSkge1xyXG5cdFx0XHRudWxsICE9IHQgJiYgbnVsbCAhPSBlICYmIDAgPCB0Lmxlbmd0aCAmJiAwIDwgZS5sZW5ndGggPyAodGhpcy5uID0gcSh0LCAxNiksIHRoaXMuZSA9IHBhcnNlSW50KGUsIDE2KSwgdGhpcy5kID0gcShcclxuXHRcdFx0XHRpLCAxNikpIDogY29uc29sZS5lcnJvcihcIkludmFsaWQgUlNBIHByaXZhdGUga2V5XCIpXHJcblx0XHR9LCB0LnByb3RvdHlwZS5zZXRQcml2YXRlRXggPSBmdW5jdGlvbih0LCBlLCBpLCByLCBuLCBzLCBvLCBoKSB7XHJcblx0XHRcdG51bGwgIT0gdCAmJiBudWxsICE9IGUgJiYgMCA8IHQubGVuZ3RoICYmIDAgPCBlLmxlbmd0aCA/ICh0aGlzLm4gPSBxKHQsIDE2KSwgdGhpcy5lID0gcGFyc2VJbnQoZSwgMTYpLCB0aGlzLmQgPSBxKFxyXG5cdFx0XHRcdFx0aSwgMTYpLCB0aGlzLnAgPSBxKHIsIDE2KSwgdGhpcy5xID0gcShuLCAxNiksIHRoaXMuZG1wMSA9IHEocywgMTYpLCB0aGlzLmRtcTEgPSBxKG8sIDE2KSwgdGhpcy5jb2VmZiA9IHEoaCwgMTYpKSA6XHJcblx0XHRcdFx0Y29uc29sZS5lcnJvcihcIkludmFsaWQgUlNBIHByaXZhdGUga2V5XCIpXHJcblx0XHR9LCB0LnByb3RvdHlwZS5nZW5lcmF0ZSA9IGZ1bmN0aW9uKHQsIGUpIHtcclxuXHRcdFx0dmFyIGkgPSBuZXcgWCxcclxuXHRcdFx0XHRyID0gdCA+PiAxO1xyXG5cdFx0XHR0aGlzLmUgPSBwYXJzZUludChlLCAxNik7XHJcblx0XHRcdGZvciAodmFyIG4gPSBuZXcgTyhlLCAxNik7Oykge1xyXG5cdFx0XHRcdGZvciAoOyB0aGlzLnAgPSBuZXcgTyh0IC0gciwgMSwgaSksIDAgIT0gdGhpcy5wLnN1YnRyYWN0KE8uT05FKS5nY2QobikuY29tcGFyZVRvKE8uT05FKSB8fCAhdGhpcy5wLmlzUHJvYmFibGVQcmltZShcclxuXHRcdFx0XHRcdFx0MTApOyk7XHJcblx0XHRcdFx0Zm9yICg7IHRoaXMucSA9IG5ldyBPKHIsIDEsIGkpLCAwICE9IHRoaXMucS5zdWJ0cmFjdChPLk9ORSkuZ2NkKG4pLmNvbXBhcmVUbyhPLk9ORSkgfHwgIXRoaXMucS5pc1Byb2JhYmxlUHJpbWUoXHJcblx0XHRcdFx0XHRcdDEwKTspO1xyXG5cdFx0XHRcdGlmICh0aGlzLnAuY29tcGFyZVRvKHRoaXMucSkgPD0gMCkge1xyXG5cdFx0XHRcdFx0dmFyIHMgPSB0aGlzLnA7XHJcblx0XHRcdFx0XHR0aGlzLnAgPSB0aGlzLnEsIHRoaXMucSA9IHNcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0dmFyIG8gPSB0aGlzLnAuc3VidHJhY3QoTy5PTkUpLFxyXG5cdFx0XHRcdFx0aCA9IHRoaXMucS5zdWJ0cmFjdChPLk9ORSksXHJcblx0XHRcdFx0XHRhID0gby5tdWx0aXBseShoKTtcclxuXHRcdFx0XHRpZiAoMCA9PSBhLmdjZChuKS5jb21wYXJlVG8oTy5PTkUpKSB7XHJcblx0XHRcdFx0XHR0aGlzLm4gPSB0aGlzLnAubXVsdGlwbHkodGhpcy5xKSwgdGhpcy5kID0gbi5tb2RJbnZlcnNlKGEpLCB0aGlzLmRtcDEgPSB0aGlzLmQubW9kKG8pLCB0aGlzLmRtcTEgPSB0aGlzLmQubW9kKGgpLFxyXG5cdFx0XHRcdFx0XHR0aGlzLmNvZWZmID0gdGhpcy5xLm1vZEludmVyc2UodGhpcy5wKTtcclxuXHRcdFx0XHRcdGJyZWFrXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9LCB0LnByb3RvdHlwZS5kZWNyeXB0ID0gZnVuY3Rpb24odCkge1xyXG5cdFx0XHR2YXIgZSA9IHEodCwgMTYpLFxyXG5cdFx0XHRcdGkgPSB0aGlzLmRvUHJpdmF0ZShlKTtcclxuXHRcdFx0cmV0dXJuIG51bGwgPT0gaSA/IG51bGwgOiBmdW5jdGlvbih0LCBlKSB7XHJcblx0XHRcdFx0dmFyIGkgPSB0LnRvQnl0ZUFycmF5KCksXHJcblx0XHRcdFx0XHRyID0gMDtcclxuXHRcdFx0XHRmb3IgKDsgciA8IGkubGVuZ3RoICYmIDAgPT0gaVtyXTspICsrcjtcclxuXHRcdFx0XHRpZiAoaS5sZW5ndGggLSByICE9IGUgLSAxIHx8IDIgIT0gaVtyXSkgcmV0dXJuIG51bGw7XHJcblx0XHRcdFx0KytyO1xyXG5cdFx0XHRcdGZvciAoOyAwICE9IGlbcl07KVxyXG5cdFx0XHRcdFx0aWYgKCsrciA+PSBpLmxlbmd0aCkgcmV0dXJuIG51bGw7XHJcblx0XHRcdFx0dmFyIG4gPSBcIlwiO1xyXG5cdFx0XHRcdGZvciAoOyArK3IgPCBpLmxlbmd0aDspIHtcclxuXHRcdFx0XHRcdHZhciBzID0gMjU1ICYgaVtyXTtcclxuXHRcdFx0XHRcdHMgPCAxMjggPyBuICs9IFN0cmluZy5mcm9tQ2hhckNvZGUocykgOiAxOTEgPCBzICYmIHMgPCAyMjQgPyAobiArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCgzMSAmIHMpIDw8IDYgfCA2MyAmIGlbXHJcblx0XHRcdFx0XHRcdHIgKyAxXSksICsrcikgOiAobiArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCgxNSAmIHMpIDw8IDEyIHwgKDYzICYgaVtyICsgMV0pIDw8IDYgfCA2MyAmIGlbciArIDJdKSwgciArPSAyKVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gblxyXG5cdFx0XHR9KGksIHRoaXMubi5iaXRMZW5ndGgoKSArIDcgPj4gMylcclxuXHRcdH0sIHQucHJvdG90eXBlLmdlbmVyYXRlQXN5bmMgPSBmdW5jdGlvbih0LCBlLCBuKSB7XHJcblx0XHRcdHZhciBzID0gbmV3IFgsXHJcblx0XHRcdFx0byA9IHQgPj4gMTtcclxuXHRcdFx0dGhpcy5lID0gcGFyc2VJbnQoZSwgMTYpO1xyXG5cdFx0XHR2YXIgaCA9IG5ldyBPKGUsIDE2KSxcclxuXHRcdFx0XHRhID0gdGhpcyxcclxuXHRcdFx0XHR1ID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHR2YXIgZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRcdGlmIChhLnAuY29tcGFyZVRvKGEucSkgPD0gMCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0dmFyIHQgPSBhLnA7XHJcblx0XHRcdFx0XHRcdFx0XHRhLnAgPSBhLnEsIGEucSA9IHRcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0dmFyIGUgPSBhLnAuc3VidHJhY3QoTy5PTkUpLFxyXG5cdFx0XHRcdFx0XHRcdFx0aSA9IGEucS5zdWJ0cmFjdChPLk9ORSksXHJcblx0XHRcdFx0XHRcdFx0XHRyID0gZS5tdWx0aXBseShpKTtcclxuXHRcdFx0XHRcdFx0XHQwID09IHIuZ2NkKGgpLmNvbXBhcmVUbyhPLk9ORSkgPyAoYS5uID0gYS5wLm11bHRpcGx5KGEucSksIGEuZCA9IGgubW9kSW52ZXJzZShyKSwgYS5kbXAxID0gYS5kLm1vZChlKSwgYS5kbXExID1cclxuXHRcdFx0XHRcdFx0XHRcdGEuZC5tb2QoaSksIGEuY29lZmYgPSBhLnEubW9kSW52ZXJzZShhLnApLCBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRuKClcclxuXHRcdFx0XHRcdFx0XHRcdH0sIDApKSA6IHNldFRpbWVvdXQodSwgMClcclxuXHRcdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdFx0aSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRcdGEucSA9IE0oKSwgYS5xLmZyb21OdW1iZXJBc3luYyhvLCAxLCBzLCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0XHRcdGEucS5zdWJ0cmFjdChPLk9ORSkuZ2NkYShoLCBmdW5jdGlvbih0KSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdDAgPT0gdC5jb21wYXJlVG8oTy5PTkUpICYmIGEucS5pc1Byb2JhYmxlUHJpbWUoMTApID8gc2V0VGltZW91dChlLCAwKSA6IHNldFRpbWVvdXQoaSwgMClcclxuXHRcdFx0XHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0XHRcdFx0fSlcclxuXHRcdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdFx0ciA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRcdGEucCA9IE0oKSwgYS5wLmZyb21OdW1iZXJBc3luYyh0IC0gbywgMSwgcywgZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRhLnAuc3VidHJhY3QoTy5PTkUpLmdjZGEoaCwgZnVuY3Rpb24odCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHQwID09IHQuY29tcGFyZVRvKE8uT05FKSAmJiBhLnAuaXNQcm9iYWJsZVByaW1lKDEwKSA/IHNldFRpbWVvdXQoaSwgMCkgOiBzZXRUaW1lb3V0KHIsIDApXHJcblx0XHRcdFx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0XHRcdH07XHJcblx0XHRcdFx0XHRzZXRUaW1lb3V0KHIsIDApXHJcblx0XHRcdFx0fTtcclxuXHRcdFx0c2V0VGltZW91dCh1LCAwKVxyXG5cdFx0fSwgdC5wcm90b3R5cGUuc2lnbiA9IGZ1bmN0aW9uKHQsIGUsIGkpIHtcclxuXHRcdFx0dmFyIHIgPSBmdW5jdGlvbih0LCBlKSB7XHJcblx0XHRcdFx0aWYgKGUgPCB0Lmxlbmd0aCArIDIyKSByZXR1cm4gY29uc29sZS5lcnJvcihcIk1lc3NhZ2UgdG9vIGxvbmcgZm9yIFJTQVwiKSwgbnVsbDtcclxuXHRcdFx0XHRmb3IgKHZhciBpID0gZSAtIHQubGVuZ3RoIC0gNiwgciA9IFwiXCIsIG4gPSAwOyBuIDwgaTsgbiArPSAyKSByICs9IFwiZmZcIjtcclxuXHRcdFx0XHRyZXR1cm4gcShcIjAwMDFcIiArIHIgKyBcIjAwXCIgKyB0LCAxNilcclxuXHRcdFx0fSgoV1tpXSB8fCBcIlwiKSArIGUodCkudG9TdHJpbmcoKSwgdGhpcy5uLmJpdExlbmd0aCgpIC8gNCk7XHJcblx0XHRcdGlmIChudWxsID09IHIpIHJldHVybiBudWxsO1xyXG5cdFx0XHR2YXIgbiA9IHRoaXMuZG9Qcml2YXRlKHIpO1xyXG5cdFx0XHRpZiAobnVsbCA9PSBuKSByZXR1cm4gbnVsbDtcclxuXHRcdFx0dmFyIHMgPSBuLnRvU3RyaW5nKDE2KTtcclxuXHRcdFx0cmV0dXJuIDAgPT0gKDEgJiBzLmxlbmd0aCkgPyBzIDogXCIwXCIgKyBzXHJcblx0XHR9LCB0LnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbih0LCBlLCBpKSB7XHJcblx0XHRcdHZhciByID0gcShlLCAxNiksXHJcblx0XHRcdFx0biA9IHRoaXMuZG9QdWJsaWMocik7XHJcblx0XHRcdHJldHVybiBudWxsID09IG4gPyBudWxsIDogZnVuY3Rpb24odCkge1xyXG5cdFx0XHRcdGZvciAodmFyIGUgaW4gVylcclxuXHRcdFx0XHRcdGlmIChXLmhhc093blByb3BlcnR5KGUpKSB7XHJcblx0XHRcdFx0XHRcdHZhciBpID0gV1tlXSxcclxuXHRcdFx0XHRcdFx0XHRyID0gaS5sZW5ndGg7XHJcblx0XHRcdFx0XHRcdGlmICh0LnN1YnN0cigwLCByKSA9PSBpKSByZXR1cm4gdC5zdWJzdHIocilcclxuXHRcdFx0XHRcdH0gcmV0dXJuIHRcclxuXHRcdFx0fShuLnRvU3RyaW5nKDE2KS5yZXBsYWNlKC9eMWYrMDAvLCBcIlwiKSkgPT0gaSh0KS50b1N0cmluZygpXHJcblx0XHR9LCB0XHJcblx0fSgpO1xyXG5cdHZhciBXID0ge1xyXG5cdFx0bWQyOiBcIjMwMjAzMDBjMDYwODJhODY0ODg2ZjcwZDAyMDIwNTAwMDQxMFwiLFxyXG5cdFx0bWQ1OiBcIjMwMjAzMDBjMDYwODJhODY0ODg2ZjcwZDAyMDUwNTAwMDQxMFwiLFxyXG5cdFx0c2hhMTogXCIzMDIxMzAwOTA2MDUyYjBlMDMwMjFhMDUwMDA0MTRcIixcclxuXHRcdHNoYTIyNDogXCIzMDJkMzAwZDA2MDk2MDg2NDgwMTY1MDMwNDAyMDQwNTAwMDQxY1wiLFxyXG5cdFx0c2hhMjU2OiBcIjMwMzEzMDBkMDYwOTYwODY0ODAxNjUwMzA0MDIwMTA1MDAwNDIwXCIsXHJcblx0XHRzaGEzODQ6IFwiMzA0MTMwMGQwNjA5NjA4NjQ4MDE2NTAzMDQwMjAyMDUwMDA0MzBcIixcclxuXHRcdHNoYTUxMjogXCIzMDUxMzAwZDA2MDk2MDg2NDgwMTY1MDMwNDAyMDMwNTAwMDQ0MFwiLFxyXG5cdFx0cmlwZW1kMTYwOiBcIjMwMjEzMDA5MDYwNTJiMjQwMzAyMDEwNTAwMDQxNFwiXHJcblx0fTtcclxuXHR2YXIgdHQgPSB7fTtcclxuXHR0dC5sYW5nID0ge1xyXG5cdFx0ZXh0ZW5kOiBmdW5jdGlvbih0LCBlLCBpKSB7XHJcblx0XHRcdGlmICghZSB8fCAhdCkgdGhyb3cgbmV3IEVycm9yKFwiWUFIT08ubGFuZy5leHRlbmQgZmFpbGVkLCBwbGVhc2UgY2hlY2sgdGhhdCBhbGwgZGVwZW5kZW5jaWVzIGFyZSBpbmNsdWRlZC5cIik7XHJcblx0XHRcdHZhciByID0gZnVuY3Rpb24oKSB7fTtcclxuXHRcdFx0aWYgKHIucHJvdG90eXBlID0gZS5wcm90b3R5cGUsIHQucHJvdG90eXBlID0gbmV3IHIsICh0LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHQpLnN1cGVyY2xhc3MgPSBlLnByb3RvdHlwZSwgZS5wcm90b3R5cGVcclxuXHRcdFx0XHQuY29uc3RydWN0b3IgPT0gT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3RvciAmJiAoZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBlKSwgaSkge1xyXG5cdFx0XHRcdHZhciBuO1xyXG5cdFx0XHRcdGZvciAobiBpbiBpKSB0LnByb3RvdHlwZVtuXSA9IGlbbl07XHJcblx0XHRcdFx0dmFyIHMgPSBmdW5jdGlvbigpIHt9LFxyXG5cdFx0XHRcdFx0byA9IFtcInRvU3RyaW5nXCIsIFwidmFsdWVPZlwiXTtcclxuXHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0L01TSUUvLnRlc3QobmF2aWdhdG9yMi51c2VyQWdlbnQpICYmIChzID0gZnVuY3Rpb24odCwgZSkge1xyXG5cdFx0XHRcdFx0XHRmb3IgKG4gPSAwOyBuIDwgby5sZW5ndGg7IG4gKz0gMSkge1xyXG5cdFx0XHRcdFx0XHRcdHZhciBpID0gb1tuXSxcclxuXHRcdFx0XHRcdFx0XHRcdHIgPSBlW2ldO1xyXG5cdFx0XHRcdFx0XHRcdFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgciAmJiByICE9IE9iamVjdC5wcm90b3R5cGVbaV0gJiYgKHRbaV0gPSByKVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdH0gY2F0Y2ggKHQpIHt9XHJcblx0XHRcdFx0cyh0LnByb3RvdHlwZSwgaSlcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcblx0dmFyIGV0ID0ge307XHJcblx0dm9pZCAwICE9PSBldC5hc24xICYmIGV0LmFzbjEgfHwgKGV0LmFzbjEgPSB7fSksIGV0LmFzbjEuQVNOMVV0aWwgPSBuZXcgZnVuY3Rpb24oKSB7XHJcblx0XHR0aGlzLmludGVnZXJUb0J5dGVIZXggPSBmdW5jdGlvbih0KSB7XHJcblx0XHRcdHZhciBlID0gdC50b1N0cmluZygxNik7XHJcblx0XHRcdHJldHVybiBlLmxlbmd0aCAlIDIgPT0gMSAmJiAoZSA9IFwiMFwiICsgZSksIGVcclxuXHRcdH0sIHRoaXMuYmlnSW50VG9NaW5Ud29zQ29tcGxlbWVudHNIZXggPSBmdW5jdGlvbih0KSB7XHJcblx0XHRcdHZhciBlID0gdC50b1N0cmluZygxNik7XHJcblx0XHRcdGlmIChcIi1cIiAhPSBlLnN1YnN0cigwLCAxKSkgZS5sZW5ndGggJSAyID09IDEgPyBlID0gXCIwXCIgKyBlIDogZS5tYXRjaCgvXlswLTddLykgfHwgKGUgPSBcIjAwXCIgKyBlKTtcclxuXHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0dmFyIGkgPSBlLnN1YnN0cigxKS5sZW5ndGg7XHJcblx0XHRcdFx0aSAlIDIgPT0gMSA/IGkgKz0gMSA6IGUubWF0Y2goL15bMC03XS8pIHx8IChpICs9IDIpO1xyXG5cdFx0XHRcdGZvciAodmFyIHIgPSBcIlwiLCBuID0gMDsgbiA8IGk7IG4rKykgciArPSBcImZcIjtcclxuXHRcdFx0XHRlID0gbmV3IE8ociwgMTYpLnhvcih0KS5hZGQoTy5PTkUpLnRvU3RyaW5nKDE2KS5yZXBsYWNlKC9eLS8sIFwiXCIpXHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIGVcclxuXHRcdH0sIHRoaXMuZ2V0UEVNU3RyaW5nRnJvbUhleCA9IGZ1bmN0aW9uKHQsIGUpIHtcclxuXHRcdFx0cmV0dXJuIGhleHRvcGVtKHQsIGUpXHJcblx0XHR9LCB0aGlzLm5ld09iamVjdCA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdFx0dmFyIGUgPSBldC5hc24xLFxyXG5cdFx0XHRcdGkgPSBlLkRFUkJvb2xlYW4sXHJcblx0XHRcdFx0ciA9IGUuREVSSW50ZWdlcixcclxuXHRcdFx0XHRuID0gZS5ERVJCaXRTdHJpbmcsXHJcblx0XHRcdFx0cyA9IGUuREVST2N0ZXRTdHJpbmcsXHJcblx0XHRcdFx0byA9IGUuREVSTnVsbCxcclxuXHRcdFx0XHRoID0gZS5ERVJPYmplY3RJZGVudGlmaWVyLFxyXG5cdFx0XHRcdGEgPSBlLkRFUkVudW1lcmF0ZWQsXHJcblx0XHRcdFx0dSA9IGUuREVSVVRGOFN0cmluZyxcclxuXHRcdFx0XHRjID0gZS5ERVJOdW1lcmljU3RyaW5nLFxyXG5cdFx0XHRcdGYgPSBlLkRFUlByaW50YWJsZVN0cmluZyxcclxuXHRcdFx0XHRsID0gZS5ERVJUZWxldGV4U3RyaW5nLFxyXG5cdFx0XHRcdHAgPSBlLkRFUklBNVN0cmluZyxcclxuXHRcdFx0XHRnID0gZS5ERVJVVENUaW1lLFxyXG5cdFx0XHRcdGQgPSBlLkRFUkdlbmVyYWxpemVkVGltZSxcclxuXHRcdFx0XHR2ID0gZS5ERVJTZXF1ZW5jZSxcclxuXHRcdFx0XHRtID0gZS5ERVJTZXQsXHJcblx0XHRcdFx0eSA9IGUuREVSVGFnZ2VkT2JqZWN0LFxyXG5cdFx0XHRcdGIgPSBlLkFTTjFVdGlsLm5ld09iamVjdCxcclxuXHRcdFx0XHRUID0gT2JqZWN0LmtleXModCk7XHJcblx0XHRcdGlmICgxICE9IFQubGVuZ3RoKSB0aHJvdyBcImtleSBvZiBwYXJhbSBzaGFsbCBiZSBvbmx5IG9uZS5cIjtcclxuXHRcdFx0dmFyIFMgPSBUWzBdO1xyXG5cdFx0XHRpZiAoLTEgPT1cclxuXHRcdFx0XHRcIjpib29sOmludDpiaXRzdHI6b2N0c3RyOm51bGw6b2lkOmVudW06dXRmOHN0cjpudW1zdHI6cHJuc3RyOnRlbHN0cjppYTVzdHI6dXRjdGltZTpnZW50aW1lOnNlcTpzZXQ6dGFnOlwiLmluZGV4T2YoXHJcblx0XHRcdFx0XHRcIjpcIiArIFMgKyBcIjpcIikpIHRocm93IFwidW5kZWZpbmVkIGtleTogXCIgKyBTO1xyXG5cdFx0XHRpZiAoXCJib29sXCIgPT0gUykgcmV0dXJuIG5ldyBpKHRbU10pO1xyXG5cdFx0XHRpZiAoXCJpbnRcIiA9PSBTKSByZXR1cm4gbmV3IHIodFtTXSk7XHJcblx0XHRcdGlmIChcImJpdHN0clwiID09IFMpIHJldHVybiBuZXcgbih0W1NdKTtcclxuXHRcdFx0aWYgKFwib2N0c3RyXCIgPT0gUykgcmV0dXJuIG5ldyBzKHRbU10pO1xyXG5cdFx0XHRpZiAoXCJudWxsXCIgPT0gUykgcmV0dXJuIG5ldyBvKHRbU10pO1xyXG5cdFx0XHRpZiAoXCJvaWRcIiA9PSBTKSByZXR1cm4gbmV3IGgodFtTXSk7XHJcblx0XHRcdGlmIChcImVudW1cIiA9PSBTKSByZXR1cm4gbmV3IGEodFtTXSk7XHJcblx0XHRcdGlmIChcInV0ZjhzdHJcIiA9PSBTKSByZXR1cm4gbmV3IHUodFtTXSk7XHJcblx0XHRcdGlmIChcIm51bXN0clwiID09IFMpIHJldHVybiBuZXcgYyh0W1NdKTtcclxuXHRcdFx0aWYgKFwicHJuc3RyXCIgPT0gUykgcmV0dXJuIG5ldyBmKHRbU10pO1xyXG5cdFx0XHRpZiAoXCJ0ZWxzdHJcIiA9PSBTKSByZXR1cm4gbmV3IGwodFtTXSk7XHJcblx0XHRcdGlmIChcImlhNXN0clwiID09IFMpIHJldHVybiBuZXcgcCh0W1NdKTtcclxuXHRcdFx0aWYgKFwidXRjdGltZVwiID09IFMpIHJldHVybiBuZXcgZyh0W1NdKTtcclxuXHRcdFx0aWYgKFwiZ2VudGltZVwiID09IFMpIHJldHVybiBuZXcgZCh0W1NdKTtcclxuXHRcdFx0aWYgKFwic2VxXCIgPT0gUykge1xyXG5cdFx0XHRcdGZvciAodmFyIEUgPSB0W1NdLCB3ID0gW10sIEQgPSAwOyBEIDwgRS5sZW5ndGg7IEQrKykge1xyXG5cdFx0XHRcdFx0dmFyIHggPSBiKEVbRF0pO1xyXG5cdFx0XHRcdFx0dy5wdXNoKHgpXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiBuZXcgdih7XHJcblx0XHRcdFx0XHRhcnJheTogd1xyXG5cdFx0XHRcdH0pXHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKFwic2V0XCIgPT0gUykge1xyXG5cdFx0XHRcdGZvciAoRSA9IHRbU10sIHcgPSBbXSwgRCA9IDA7IEQgPCBFLmxlbmd0aDsgRCsrKSB7XHJcblx0XHRcdFx0XHR4ID0gYihFW0RdKTtcclxuXHRcdFx0XHRcdHcucHVzaCh4KVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gbmV3IG0oe1xyXG5cdFx0XHRcdFx0YXJyYXk6IHdcclxuXHRcdFx0XHR9KVxyXG5cdFx0XHR9XHJcblx0XHRcdGlmIChcInRhZ1wiID09IFMpIHtcclxuXHRcdFx0XHR2YXIgUiA9IHRbU107XHJcblx0XHRcdFx0aWYgKFwiW29iamVjdCBBcnJheV1cIiA9PT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFIpICYmIDMgPT0gUi5sZW5ndGgpIHtcclxuXHRcdFx0XHRcdHZhciBCID0gYihSWzJdKTtcclxuXHRcdFx0XHRcdHJldHVybiBuZXcgeSh7XHJcblx0XHRcdFx0XHRcdHRhZzogUlswXSxcclxuXHRcdFx0XHRcdFx0ZXhwbGljaXQ6IFJbMV0sXHJcblx0XHRcdFx0XHRcdG9iajogQlxyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0dmFyIEEgPSB7fTtcclxuXHRcdFx0XHRpZiAodm9pZCAwICE9PSBSLmV4cGxpY2l0ICYmIChBLmV4cGxpY2l0ID0gUi5leHBsaWNpdCksIHZvaWQgMCAhPT0gUi50YWcgJiYgKEEudGFnID0gUi50YWcpLCB2b2lkIDAgPT09IFIub2JqKVxyXG5cdFx0XHRcdFx0dGhyb3cgXCJvYmogc2hhbGwgYmUgc3BlY2lmaWVkIGZvciAndGFnJy5cIjtcclxuXHRcdFx0XHRyZXR1cm4gQS5vYmogPSBiKFIub2JqKSwgbmV3IHkoQSlcclxuXHRcdFx0fVxyXG5cdFx0fSwgdGhpcy5qc29uVG9BU04xSEVYID0gZnVuY3Rpb24odCkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5uZXdPYmplY3QodCkuZ2V0RW5jb2RlZEhleCgpXHJcblx0XHR9XHJcblx0fSwgZXQuYXNuMS5BU04xVXRpbC5vaWRIZXhUb0ludCA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdGZvciAodmFyIGUgPSBcIlwiLCBpID0gcGFyc2VJbnQodC5zdWJzdHIoMCwgMiksIDE2KSwgciA9IChlID0gTWF0aC5mbG9vcihpIC8gNDApICsgXCIuXCIgKyBpICUgNDAsIFwiXCIpLCBuID0gMjsgbiA8IHQubGVuZ3RoOyBuICs9XHJcblx0XHRcdDIpIHtcclxuXHRcdFx0dmFyIHMgPSAoXCIwMDAwMDAwMFwiICsgcGFyc2VJbnQodC5zdWJzdHIobiwgMiksIDE2KS50b1N0cmluZygyKSkuc2xpY2UoLTgpO1xyXG5cdFx0XHRpZiAociArPSBzLnN1YnN0cigxLCA3KSwgXCIwXCIgPT0gcy5zdWJzdHIoMCwgMSkpIGUgPSBlICsgXCIuXCIgKyBuZXcgTyhyLCAyKS50b1N0cmluZygxMCksIHIgPSBcIlwiXHJcblx0XHR9XHJcblx0XHRyZXR1cm4gZVxyXG5cdH0sIGV0LmFzbjEuQVNOMVV0aWwub2lkSW50VG9IZXggPSBmdW5jdGlvbih0KSB7XHJcblx0XHR2YXIgaCA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdFx0XHR2YXIgZSA9IHQudG9TdHJpbmcoMTYpO1xyXG5cdFx0XHRcdHJldHVybiAxID09IGUubGVuZ3RoICYmIChlID0gXCIwXCIgKyBlKSwgZVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRlID0gZnVuY3Rpb24odCkge1xyXG5cdFx0XHRcdHZhciBlID0gXCJcIixcclxuXHRcdFx0XHRcdGkgPSBuZXcgTyh0LCAxMCkudG9TdHJpbmcoMiksXHJcblx0XHRcdFx0XHRyID0gNyAtIGkubGVuZ3RoICUgNztcclxuXHRcdFx0XHQ3ID09IHIgJiYgKHIgPSAwKTtcclxuXHRcdFx0XHRmb3IgKHZhciBuID0gXCJcIiwgcyA9IDA7IHMgPCByOyBzKyspIG4gKz0gXCIwXCI7XHJcblx0XHRcdFx0aSA9IG4gKyBpO1xyXG5cdFx0XHRcdGZvciAocyA9IDA7IHMgPCBpLmxlbmd0aCAtIDE7IHMgKz0gNykge1xyXG5cdFx0XHRcdFx0dmFyIG8gPSBpLnN1YnN0cihzLCA3KTtcclxuXHRcdFx0XHRcdHMgIT0gaS5sZW5ndGggLSA3ICYmIChvID0gXCIxXCIgKyBvKSwgZSArPSBoKHBhcnNlSW50KG8sIDIpKVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gZVxyXG5cdFx0XHR9O1xyXG5cdFx0aWYgKCF0Lm1hdGNoKC9eWzAtOS5dKyQvKSkgdGhyb3cgXCJtYWxmb3JtZWQgb2lkIHN0cmluZzogXCIgKyB0O1xyXG5cdFx0dmFyIGkgPSBcIlwiLFxyXG5cdFx0XHRyID0gdC5zcGxpdChcIi5cIiksXHJcblx0XHRcdG4gPSA0MCAqIHBhcnNlSW50KHJbMF0pICsgcGFyc2VJbnQoclsxXSk7XHJcblx0XHRpICs9IGgobiksIHIuc3BsaWNlKDAsIDIpO1xyXG5cdFx0Zm9yICh2YXIgcyA9IDA7IHMgPCByLmxlbmd0aDsgcysrKSBpICs9IGUocltzXSk7XHJcblx0XHRyZXR1cm4gaVxyXG5cdH0sIGV0LmFzbjEuQVNOMU9iamVjdCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dGhpcy5nZXRMZW5ndGhIZXhGcm9tVmFsdWUgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0aWYgKHZvaWQgMCA9PT0gdGhpcy5oViB8fCBudWxsID09IHRoaXMuaFYpIHRocm93IFwidGhpcy5oViBpcyBudWxsIG9yIHVuZGVmaW5lZC5cIjtcclxuXHRcdFx0aWYgKHRoaXMuaFYubGVuZ3RoICUgMiA9PSAxKSB0aHJvdyBcInZhbHVlIGhleCBtdXN0IGJlIGV2ZW4gbGVuZ3RoOiBuPVwiICsgXCJcIi5sZW5ndGggKyBcIix2PVwiICsgdGhpcy5oVjtcclxuXHRcdFx0dmFyIHQgPSB0aGlzLmhWLmxlbmd0aCAvIDIsXHJcblx0XHRcdFx0ZSA9IHQudG9TdHJpbmcoMTYpO1xyXG5cdFx0XHRpZiAoZS5sZW5ndGggJSAyID09IDEgJiYgKGUgPSBcIjBcIiArIGUpLCB0IDwgMTI4KSByZXR1cm4gZTtcclxuXHRcdFx0dmFyIGkgPSBlLmxlbmd0aCAvIDI7XHJcblx0XHRcdGlmICgxNSA8IGkpIHRocm93IFwiQVNOLjEgbGVuZ3RoIHRvbyBsb25nIHRvIHJlcHJlc2VudCBieSA4eDogbiA9IFwiICsgdC50b1N0cmluZygxNik7XHJcblx0XHRcdHJldHVybiAoMTI4ICsgaSkudG9TdHJpbmcoMTYpICsgZVxyXG5cdFx0fSwgdGhpcy5nZXRFbmNvZGVkSGV4ID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJldHVybiAobnVsbCA9PSB0aGlzLmhUTFYgfHwgdGhpcy5pc01vZGlmaWVkKSAmJiAodGhpcy5oViA9IHRoaXMuZ2V0RnJlc2hWYWx1ZUhleCgpLCB0aGlzLmhMID0gdGhpcy5nZXRMZW5ndGhIZXhGcm9tVmFsdWUoKSxcclxuXHRcdFx0XHR0aGlzLmhUTFYgPSB0aGlzLmhUICsgdGhpcy5oTCArIHRoaXMuaFYsIHRoaXMuaXNNb2RpZmllZCA9ICExKSwgdGhpcy5oVExWXHJcblx0XHR9LCB0aGlzLmdldFZhbHVlSGV4ID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmdldEVuY29kZWRIZXgoKSwgdGhpcy5oVlxyXG5cdFx0fSwgdGhpcy5nZXRGcmVzaFZhbHVlSGV4ID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJldHVybiBcIlwiXHJcblx0XHR9XHJcblx0fSwgZXQuYXNuMS5ERVJBYnN0cmFjdFN0cmluZyA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdGV0LmFzbjEuREVSQWJzdHJhY3RTdHJpbmcuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpLCB0aGlzLmdldFN0cmluZyA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5zXHJcblx0XHR9LCB0aGlzLnNldFN0cmluZyA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdFx0dGhpcy5oVExWID0gbnVsbCwgdGhpcy5pc01vZGlmaWVkID0gITAsIHRoaXMucyA9IHQsIHRoaXMuaFYgPSBzdG9oZXgodGhpcy5zKVxyXG5cdFx0fSwgdGhpcy5zZXRTdHJpbmdIZXggPSBmdW5jdGlvbih0KSB7XHJcblx0XHRcdHRoaXMuaFRMViA9IG51bGwsIHRoaXMuaXNNb2RpZmllZCA9ICEwLCB0aGlzLnMgPSBudWxsLCB0aGlzLmhWID0gdFxyXG5cdFx0fSwgdGhpcy5nZXRGcmVzaFZhbHVlSGV4ID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmhWXHJcblx0XHR9LCB2b2lkIDAgIT09IHQgJiYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHQgPyB0aGlzLnNldFN0cmluZyh0KSA6IHZvaWQgMCAhPT0gdC5zdHIgPyB0aGlzLnNldFN0cmluZyh0LnN0cikgOiB2b2lkIDAgIT09XHJcblx0XHRcdHQuaGV4ICYmIHRoaXMuc2V0U3RyaW5nSGV4KHQuaGV4KSlcclxuXHR9LCB0dC5sYW5nLmV4dGVuZChldC5hc24xLkRFUkFic3RyYWN0U3RyaW5nLCBldC5hc24xLkFTTjFPYmplY3QpLCBldC5hc24xLkRFUkFic3RyYWN0VGltZSA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdGV0LmFzbjEuREVSQWJzdHJhY3RUaW1lLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKSwgdGhpcy5sb2NhbERhdGVUb1VUQyA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdFx0cmV0dXJuIHV0YyA9IHQuZ2V0VGltZSgpICsgNmU0ICogdC5nZXRUaW1lem9uZU9mZnNldCgpLCBuZXcgRGF0ZSh1dGMpXHJcblx0XHR9LCB0aGlzLmZvcm1hdERhdGUgPSBmdW5jdGlvbih0LCBlLCBpKSB7XHJcblx0XHRcdHZhciByID0gdGhpcy56ZXJvUGFkZGluZyxcclxuXHRcdFx0XHRuID0gdGhpcy5sb2NhbERhdGVUb1VUQyh0KSxcclxuXHRcdFx0XHRzID0gU3RyaW5nKG4uZ2V0RnVsbFllYXIoKSk7XHJcblx0XHRcdFwidXRjXCIgPT0gZSAmJiAocyA9IHMuc3Vic3RyKDIsIDIpKTtcclxuXHRcdFx0dmFyIG8gPSBzICsgcihTdHJpbmcobi5nZXRNb250aCgpICsgMSksIDIpICsgcihTdHJpbmcobi5nZXREYXRlKCkpLCAyKSArIHIoU3RyaW5nKG4uZ2V0SG91cnMoKSksIDIpICsgcihTdHJpbmcobi5nZXRNaW51dGVzKCkpLFxyXG5cdFx0XHRcdDIpICsgcihTdHJpbmcobi5nZXRTZWNvbmRzKCkpLCAyKTtcclxuXHRcdFx0aWYgKCEwID09PSBpKSB7XHJcblx0XHRcdFx0dmFyIGggPSBuLmdldE1pbGxpc2Vjb25kcygpO1xyXG5cdFx0XHRcdGlmICgwICE9IGgpIHtcclxuXHRcdFx0XHRcdHZhciBhID0gcihTdHJpbmcoaCksIDMpO1xyXG5cdFx0XHRcdFx0byA9IG8gKyBcIi5cIiArIChhID0gYS5yZXBsYWNlKC9bMF0rJC8sIFwiXCIpKVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gbyArIFwiWlwiXHJcblx0XHR9LCB0aGlzLnplcm9QYWRkaW5nID0gZnVuY3Rpb24odCwgZSkge1xyXG5cdFx0XHRyZXR1cm4gdC5sZW5ndGggPj0gZSA/IHQgOiBuZXcgQXJyYXkoZSAtIHQubGVuZ3RoICsgMSkuam9pbihcIjBcIikgKyB0XHJcblx0XHR9LCB0aGlzLmdldFN0cmluZyA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5zXHJcblx0XHR9LCB0aGlzLnNldFN0cmluZyA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdFx0dGhpcy5oVExWID0gbnVsbCwgdGhpcy5pc01vZGlmaWVkID0gITAsIHRoaXMucyA9IHQsIHRoaXMuaFYgPSBzdG9oZXgodClcclxuXHRcdH0sIHRoaXMuc2V0QnlEYXRlVmFsdWUgPSBmdW5jdGlvbih0LCBlLCBpLCByLCBuLCBzKSB7XHJcblx0XHRcdHZhciBvID0gbmV3IERhdGUoRGF0ZS5VVEModCwgZSAtIDEsIGksIHIsIG4sIHMsIDApKTtcclxuXHRcdFx0dGhpcy5zZXRCeURhdGUobylcclxuXHRcdH0sIHRoaXMuZ2V0RnJlc2hWYWx1ZUhleCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5oVlxyXG5cdFx0fVxyXG5cdH0sIHR0LmxhbmcuZXh0ZW5kKGV0LmFzbjEuREVSQWJzdHJhY3RUaW1lLCBldC5hc24xLkFTTjFPYmplY3QpLCBldC5hc24xLkRFUkFic3RyYWN0U3RydWN0dXJlZCA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdGV0LmFzbjEuREVSQWJzdHJhY3RTdHJpbmcuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpLCB0aGlzLnNldEJ5QVNOMU9iamVjdEFycmF5ID0gZnVuY3Rpb24odCkge1xyXG5cdFx0XHR0aGlzLmhUTFYgPSBudWxsLCB0aGlzLmlzTW9kaWZpZWQgPSAhMCwgdGhpcy5hc24xQXJyYXkgPSB0XHJcblx0XHR9LCB0aGlzLmFwcGVuZEFTTjFPYmplY3QgPSBmdW5jdGlvbih0KSB7XHJcblx0XHRcdHRoaXMuaFRMViA9IG51bGwsIHRoaXMuaXNNb2RpZmllZCA9ICEwLCB0aGlzLmFzbjFBcnJheS5wdXNoKHQpXHJcblx0XHR9LCB0aGlzLmFzbjFBcnJheSA9IG5ldyBBcnJheSwgdm9pZCAwICE9PSB0ICYmIHZvaWQgMCAhPT0gdC5hcnJheSAmJiAodGhpcy5hc24xQXJyYXkgPSB0LmFycmF5KVxyXG5cdH0sIHR0LmxhbmcuZXh0ZW5kKGV0LmFzbjEuREVSQWJzdHJhY3RTdHJ1Y3R1cmVkLCBldC5hc24xLkFTTjFPYmplY3QpLCBldC5hc24xLkRFUkJvb2xlYW4gPSBmdW5jdGlvbigpIHtcclxuXHRcdGV0LmFzbjEuREVSQm9vbGVhbi5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyksIHRoaXMuaFQgPSBcIjAxXCIsIHRoaXMuaFRMViA9IFwiMDEwMWZmXCJcclxuXHR9LCB0dC5sYW5nLmV4dGVuZChldC5hc24xLkRFUkJvb2xlYW4sIGV0LmFzbjEuQVNOMU9iamVjdCksIGV0LmFzbjEuREVSSW50ZWdlciA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdGV0LmFzbjEuREVSSW50ZWdlci5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyksIHRoaXMuaFQgPSBcIjAyXCIsIHRoaXMuc2V0QnlCaWdJbnRlZ2VyID0gZnVuY3Rpb24odCkge1xyXG5cdFx0XHR0aGlzLmhUTFYgPSBudWxsLCB0aGlzLmlzTW9kaWZpZWQgPSAhMCwgdGhpcy5oViA9IGV0LmFzbjEuQVNOMVV0aWwuYmlnSW50VG9NaW5Ud29zQ29tcGxlbWVudHNIZXgodClcclxuXHRcdH0sIHRoaXMuc2V0QnlJbnRlZ2VyID0gZnVuY3Rpb24odCkge1xyXG5cdFx0XHR2YXIgZSA9IG5ldyBPKFN0cmluZyh0KSwgMTApO1xyXG5cdFx0XHR0aGlzLnNldEJ5QmlnSW50ZWdlcihlKVxyXG5cdFx0fSwgdGhpcy5zZXRWYWx1ZUhleCA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdFx0dGhpcy5oViA9IHRcclxuXHRcdH0sIHRoaXMuZ2V0RnJlc2hWYWx1ZUhleCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5oVlxyXG5cdFx0fSwgdm9pZCAwICE9PSB0ICYmICh2b2lkIDAgIT09IHQuYmlnaW50ID8gdGhpcy5zZXRCeUJpZ0ludGVnZXIodC5iaWdpbnQpIDogdm9pZCAwICE9PSB0LmludCA/IHRoaXMuc2V0QnlJbnRlZ2VyKHQuaW50KSA6XHJcblx0XHRcdFwibnVtYmVyXCIgPT0gdHlwZW9mIHQgPyB0aGlzLnNldEJ5SW50ZWdlcih0KSA6IHZvaWQgMCAhPT0gdC5oZXggJiYgdGhpcy5zZXRWYWx1ZUhleCh0LmhleCkpXHJcblx0fSwgdHQubGFuZy5leHRlbmQoZXQuYXNuMS5ERVJJbnRlZ2VyLCBldC5hc24xLkFTTjFPYmplY3QpLCBldC5hc24xLkRFUkJpdFN0cmluZyA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdGlmICh2b2lkIDAgIT09IHQgJiYgdm9pZCAwICE9PSB0Lm9iaikge1xyXG5cdFx0XHR2YXIgZSA9IGV0LmFzbjEuQVNOMVV0aWwubmV3T2JqZWN0KHQub2JqKTtcclxuXHRcdFx0dC5oZXggPSBcIjAwXCIgKyBlLmdldEVuY29kZWRIZXgoKVxyXG5cdFx0fVxyXG5cdFx0ZXQuYXNuMS5ERVJCaXRTdHJpbmcuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpLCB0aGlzLmhUID0gXCIwM1wiLCB0aGlzLnNldEhleFZhbHVlSW5jbHVkaW5nVW51c2VkQml0cyA9XHJcblx0XHRcdGZ1bmN0aW9uKHQpIHtcclxuXHRcdFx0XHR0aGlzLmhUTFYgPSBudWxsLCB0aGlzLmlzTW9kaWZpZWQgPSAhMCwgdGhpcy5oViA9IHRcclxuXHRcdFx0fSwgdGhpcy5zZXRVbnVzZWRCaXRzQW5kSGV4VmFsdWUgPSBmdW5jdGlvbih0LCBlKSB7XHJcblx0XHRcdFx0aWYgKHQgPCAwIHx8IDcgPCB0KSB0aHJvdyBcInVudXNlZCBiaXRzIHNoYWxsIGJlIGZyb20gMCB0byA3OiB1ID0gXCIgKyB0O1xyXG5cdFx0XHRcdHZhciBpID0gXCIwXCIgKyB0O1xyXG5cdFx0XHRcdHRoaXMuaFRMViA9IG51bGwsIHRoaXMuaXNNb2RpZmllZCA9ICEwLCB0aGlzLmhWID0gaSArIGVcclxuXHRcdFx0fSwgdGhpcy5zZXRCeUJpbmFyeVN0cmluZyA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdFx0XHR2YXIgZSA9IDggLSAodCA9IHQucmVwbGFjZSgvMCskLywgXCJcIikpLmxlbmd0aCAlIDg7XHJcblx0XHRcdFx0OCA9PSBlICYmIChlID0gMCk7XHJcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPD0gZTsgaSsrKSB0ICs9IFwiMFwiO1xyXG5cdFx0XHRcdHZhciByID0gXCJcIjtcclxuXHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgdC5sZW5ndGggLSAxOyBpICs9IDgpIHtcclxuXHRcdFx0XHRcdHZhciBuID0gdC5zdWJzdHIoaSwgOCksXHJcblx0XHRcdFx0XHRcdHMgPSBwYXJzZUludChuLCAyKS50b1N0cmluZygxNik7XHJcblx0XHRcdFx0XHQxID09IHMubGVuZ3RoICYmIChzID0gXCIwXCIgKyBzKSwgciArPSBzXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHRoaXMuaFRMViA9IG51bGwsIHRoaXMuaXNNb2RpZmllZCA9ICEwLCB0aGlzLmhWID0gXCIwXCIgKyBlICsgclxyXG5cdFx0XHR9LCB0aGlzLnNldEJ5Qm9vbGVhbkFycmF5ID0gZnVuY3Rpb24odCkge1xyXG5cdFx0XHRcdGZvciAodmFyIGUgPSBcIlwiLCBpID0gMDsgaSA8IHQubGVuZ3RoOyBpKyspIDEgPT0gdFtpXSA/IGUgKz0gXCIxXCIgOiBlICs9IFwiMFwiO1xyXG5cdFx0XHRcdHRoaXMuc2V0QnlCaW5hcnlTdHJpbmcoZSlcclxuXHRcdFx0fSwgdGhpcy5uZXdGYWxzZUFycmF5ID0gZnVuY3Rpb24odCkge1xyXG5cdFx0XHRcdGZvciAodmFyIGUgPSBuZXcgQXJyYXkodCksIGkgPSAwOyBpIDwgdDsgaSsrKSBlW2ldID0gITE7XHJcblx0XHRcdFx0cmV0dXJuIGVcclxuXHRcdFx0fSwgdGhpcy5nZXRGcmVzaFZhbHVlSGV4ID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMuaFZcclxuXHRcdFx0fSwgdm9pZCAwICE9PSB0ICYmIChcInN0cmluZ1wiID09IHR5cGVvZiB0ICYmIHQudG9Mb3dlckNhc2UoKS5tYXRjaCgvXlswLTlhLWZdKyQvKSA/IHRoaXMuc2V0SGV4VmFsdWVJbmNsdWRpbmdVbnVzZWRCaXRzKFxyXG5cdFx0XHRcdHQpIDogdm9pZCAwICE9PSB0LmhleCA/IHRoaXMuc2V0SGV4VmFsdWVJbmNsdWRpbmdVbnVzZWRCaXRzKHQuaGV4KSA6IHZvaWQgMCAhPT0gdC5iaW4gPyB0aGlzLnNldEJ5QmluYXJ5U3RyaW5nKHRcclxuXHRcdFx0XHQuYmluKSA6IHZvaWQgMCAhPT0gdC5hcnJheSAmJiB0aGlzLnNldEJ5Qm9vbGVhbkFycmF5KHQuYXJyYXkpKVxyXG5cdH0sIHR0LmxhbmcuZXh0ZW5kKGV0LmFzbjEuREVSQml0U3RyaW5nLCBldC5hc24xLkFTTjFPYmplY3QpLCBldC5hc24xLkRFUk9jdGV0U3RyaW5nID0gZnVuY3Rpb24odCkge1xyXG5cdFx0aWYgKHZvaWQgMCAhPT0gdCAmJiB2b2lkIDAgIT09IHQub2JqKSB7XHJcblx0XHRcdHZhciBlID0gZXQuYXNuMS5BU04xVXRpbC5uZXdPYmplY3QodC5vYmopO1xyXG5cdFx0XHR0LmhleCA9IGUuZ2V0RW5jb2RlZEhleCgpXHJcblx0XHR9XHJcblx0XHRldC5hc24xLkRFUk9jdGV0U3RyaW5nLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLCB0KSwgdGhpcy5oVCA9IFwiMDRcIlxyXG5cdH0sIHR0LmxhbmcuZXh0ZW5kKGV0LmFzbjEuREVST2N0ZXRTdHJpbmcsIGV0LmFzbjEuREVSQWJzdHJhY3RTdHJpbmcpLCBldC5hc24xLkRFUk51bGwgPSBmdW5jdGlvbigpIHtcclxuXHRcdGV0LmFzbjEuREVSTnVsbC5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyksIHRoaXMuaFQgPSBcIjA1XCIsIHRoaXMuaFRMViA9IFwiMDUwMFwiXHJcblx0fSwgdHQubGFuZy5leHRlbmQoZXQuYXNuMS5ERVJOdWxsLCBldC5hc24xLkFTTjFPYmplY3QpLCBldC5hc24xLkRFUk9iamVjdElkZW50aWZpZXIgPSBmdW5jdGlvbih0KSB7XHJcblx0XHR2YXIgaCA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdFx0XHR2YXIgZSA9IHQudG9TdHJpbmcoMTYpO1xyXG5cdFx0XHRcdHJldHVybiAxID09IGUubGVuZ3RoICYmIChlID0gXCIwXCIgKyBlKSwgZVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRzID0gZnVuY3Rpb24odCkge1xyXG5cdFx0XHRcdHZhciBlID0gXCJcIixcclxuXHRcdFx0XHRcdGkgPSBuZXcgTyh0LCAxMCkudG9TdHJpbmcoMiksXHJcblx0XHRcdFx0XHRyID0gNyAtIGkubGVuZ3RoICUgNztcclxuXHRcdFx0XHQ3ID09IHIgJiYgKHIgPSAwKTtcclxuXHRcdFx0XHRmb3IgKHZhciBuID0gXCJcIiwgcyA9IDA7IHMgPCByOyBzKyspIG4gKz0gXCIwXCI7XHJcblx0XHRcdFx0aSA9IG4gKyBpO1xyXG5cdFx0XHRcdGZvciAocyA9IDA7IHMgPCBpLmxlbmd0aCAtIDE7IHMgKz0gNykge1xyXG5cdFx0XHRcdFx0dmFyIG8gPSBpLnN1YnN0cihzLCA3KTtcclxuXHRcdFx0XHRcdHMgIT0gaS5sZW5ndGggLSA3ICYmIChvID0gXCIxXCIgKyBvKSwgZSArPSBoKHBhcnNlSW50KG8sIDIpKVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gZVxyXG5cdFx0XHR9O1xyXG5cdFx0ZXQuYXNuMS5ERVJPYmplY3RJZGVudGlmaWVyLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKSwgdGhpcy5oVCA9IFwiMDZcIiwgdGhpcy5zZXRWYWx1ZUhleCA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdFx0dGhpcy5oVExWID0gbnVsbCwgdGhpcy5pc01vZGlmaWVkID0gITAsIHRoaXMucyA9IG51bGwsIHRoaXMuaFYgPSB0XHJcblx0XHR9LCB0aGlzLnNldFZhbHVlT2lkU3RyaW5nID0gZnVuY3Rpb24odCkge1xyXG5cdFx0XHRpZiAoIXQubWF0Y2goL15bMC05Ll0rJC8pKSB0aHJvdyBcIm1hbGZvcm1lZCBvaWQgc3RyaW5nOiBcIiArIHQ7XHJcblx0XHRcdHZhciBlID0gXCJcIixcclxuXHRcdFx0XHRpID0gdC5zcGxpdChcIi5cIiksXHJcblx0XHRcdFx0ciA9IDQwICogcGFyc2VJbnQoaVswXSkgKyBwYXJzZUludChpWzFdKTtcclxuXHRcdFx0ZSArPSBoKHIpLCBpLnNwbGljZSgwLCAyKTtcclxuXHRcdFx0Zm9yICh2YXIgbiA9IDA7IG4gPCBpLmxlbmd0aDsgbisrKSBlICs9IHMoaVtuXSk7XHJcblx0XHRcdHRoaXMuaFRMViA9IG51bGwsIHRoaXMuaXNNb2RpZmllZCA9ICEwLCB0aGlzLnMgPSBudWxsLCB0aGlzLmhWID0gZVxyXG5cdFx0fSwgdGhpcy5zZXRWYWx1ZU5hbWUgPSBmdW5jdGlvbih0KSB7XHJcblx0XHRcdHZhciBlID0gZXQuYXNuMS54NTA5Lk9JRC5uYW1lMm9pZCh0KTtcclxuXHRcdFx0aWYgKFwiXCIgPT09IGUpIHRocm93IFwiREVST2JqZWN0SWRlbnRpZmllciBvaWROYW1lIHVuZGVmaW5lZDogXCIgKyB0O1xyXG5cdFx0XHR0aGlzLnNldFZhbHVlT2lkU3RyaW5nKGUpXHJcblx0XHR9LCB0aGlzLmdldEZyZXNoVmFsdWVIZXggPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuaFZcclxuXHRcdH0sIHZvaWQgMCAhPT0gdCAmJiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCA/IHQubWF0Y2goL15bMC0yXS5bMC05Ll0rJC8pID8gdGhpcy5zZXRWYWx1ZU9pZFN0cmluZyh0KSA6IHRoaXMuc2V0VmFsdWVOYW1lKFxyXG5cdFx0XHRcdHQpIDogdm9pZCAwICE9PSB0Lm9pZCA/IHRoaXMuc2V0VmFsdWVPaWRTdHJpbmcodC5vaWQpIDogdm9pZCAwICE9PSB0LmhleCA/IHRoaXMuc2V0VmFsdWVIZXgodC5oZXgpIDogdm9pZCAwICE9PVxyXG5cdFx0XHR0Lm5hbWUgJiYgdGhpcy5zZXRWYWx1ZU5hbWUodC5uYW1lKSlcclxuXHR9LCB0dC5sYW5nLmV4dGVuZChldC5hc24xLkRFUk9iamVjdElkZW50aWZpZXIsIGV0LmFzbjEuQVNOMU9iamVjdCksIGV0LmFzbjEuREVSRW51bWVyYXRlZCA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdGV0LmFzbjEuREVSRW51bWVyYXRlZC5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyksIHRoaXMuaFQgPSBcIjBhXCIsIHRoaXMuc2V0QnlCaWdJbnRlZ2VyID0gZnVuY3Rpb24odCkge1xyXG5cdFx0XHR0aGlzLmhUTFYgPSBudWxsLCB0aGlzLmlzTW9kaWZpZWQgPSAhMCwgdGhpcy5oViA9IGV0LmFzbjEuQVNOMVV0aWwuYmlnSW50VG9NaW5Ud29zQ29tcGxlbWVudHNIZXgodClcclxuXHRcdH0sIHRoaXMuc2V0QnlJbnRlZ2VyID0gZnVuY3Rpb24odCkge1xyXG5cdFx0XHR2YXIgZSA9IG5ldyBPKFN0cmluZyh0KSwgMTApO1xyXG5cdFx0XHR0aGlzLnNldEJ5QmlnSW50ZWdlcihlKVxyXG5cdFx0fSwgdGhpcy5zZXRWYWx1ZUhleCA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdFx0dGhpcy5oViA9IHRcclxuXHRcdH0sIHRoaXMuZ2V0RnJlc2hWYWx1ZUhleCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5oVlxyXG5cdFx0fSwgdm9pZCAwICE9PSB0ICYmICh2b2lkIDAgIT09IHQuaW50ID8gdGhpcy5zZXRCeUludGVnZXIodC5pbnQpIDogXCJudW1iZXJcIiA9PSB0eXBlb2YgdCA/IHRoaXMuc2V0QnlJbnRlZ2VyKHQpIDpcclxuXHRcdFx0dm9pZCAwICE9PSB0LmhleCAmJiB0aGlzLnNldFZhbHVlSGV4KHQuaGV4KSlcclxuXHR9LCB0dC5sYW5nLmV4dGVuZChldC5hc24xLkRFUkVudW1lcmF0ZWQsIGV0LmFzbjEuQVNOMU9iamVjdCksIGV0LmFzbjEuREVSVVRGOFN0cmluZyA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdGV0LmFzbjEuREVSVVRGOFN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgdCksIHRoaXMuaFQgPSBcIjBjXCJcclxuXHR9LCB0dC5sYW5nLmV4dGVuZChldC5hc24xLkRFUlVURjhTdHJpbmcsIGV0LmFzbjEuREVSQWJzdHJhY3RTdHJpbmcpLCBldC5hc24xLkRFUk51bWVyaWNTdHJpbmcgPSBmdW5jdGlvbih0KSB7XHJcblx0XHRldC5hc24xLkRFUk51bWVyaWNTdHJpbmcuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHQpLCB0aGlzLmhUID0gXCIxMlwiXHJcblx0fSwgdHQubGFuZy5leHRlbmQoZXQuYXNuMS5ERVJOdW1lcmljU3RyaW5nLCBldC5hc24xLkRFUkFic3RyYWN0U3RyaW5nKSwgZXQuYXNuMS5ERVJQcmludGFibGVTdHJpbmcgPSBmdW5jdGlvbih0KSB7XHJcblx0XHRldC5hc24xLkRFUlByaW50YWJsZVN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgdCksIHRoaXMuaFQgPSBcIjEzXCJcclxuXHR9LCB0dC5sYW5nLmV4dGVuZChldC5hc24xLkRFUlByaW50YWJsZVN0cmluZywgZXQuYXNuMS5ERVJBYnN0cmFjdFN0cmluZyksIGV0LmFzbjEuREVSVGVsZXRleFN0cmluZyA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdGV0LmFzbjEuREVSVGVsZXRleFN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgdCksIHRoaXMuaFQgPSBcIjE0XCJcclxuXHR9LCB0dC5sYW5nLmV4dGVuZChldC5hc24xLkRFUlRlbGV0ZXhTdHJpbmcsIGV0LmFzbjEuREVSQWJzdHJhY3RTdHJpbmcpLCBldC5hc24xLkRFUklBNVN0cmluZyA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdGV0LmFzbjEuREVSSUE1U3RyaW5nLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLCB0KSwgdGhpcy5oVCA9IFwiMTZcIlxyXG5cdH0sIHR0LmxhbmcuZXh0ZW5kKGV0LmFzbjEuREVSSUE1U3RyaW5nLCBldC5hc24xLkRFUkFic3RyYWN0U3RyaW5nKSwgZXQuYXNuMS5ERVJVVENUaW1lID0gZnVuY3Rpb24odCkge1xyXG5cdFx0ZXQuYXNuMS5ERVJVVENUaW1lLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLCB0KSwgdGhpcy5oVCA9IFwiMTdcIiwgdGhpcy5zZXRCeURhdGUgPSBmdW5jdGlvbih0KSB7XHJcblx0XHRcdHRoaXMuaFRMViA9IG51bGwsIHRoaXMuaXNNb2RpZmllZCA9ICEwLCB0aGlzLmRhdGUgPSB0LCB0aGlzLnMgPSB0aGlzLmZvcm1hdERhdGUodGhpcy5kYXRlLCBcInV0Y1wiKSwgdGhpcy5oViA9XHJcblx0XHRcdFx0c3RvaGV4KHRoaXMucylcclxuXHRcdH0sIHRoaXMuZ2V0RnJlc2hWYWx1ZUhleCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4gdm9pZCAwID09PSB0aGlzLmRhdGUgJiYgdm9pZCAwID09PSB0aGlzLnMgJiYgKHRoaXMuZGF0ZSA9IG5ldyBEYXRlLCB0aGlzLnMgPSB0aGlzLmZvcm1hdERhdGUodGhpcy5kYXRlLFxyXG5cdFx0XHRcdFwidXRjXCIpLCB0aGlzLmhWID0gc3RvaGV4KHRoaXMucykpLCB0aGlzLmhWXHJcblx0XHR9LCB2b2lkIDAgIT09IHQgJiYgKHZvaWQgMCAhPT0gdC5zdHIgPyB0aGlzLnNldFN0cmluZyh0LnN0cikgOiBcInN0cmluZ1wiID09IHR5cGVvZiB0ICYmIHQubWF0Y2goL15bMC05XXsxMn1aJC8pID9cclxuXHRcdFx0dGhpcy5zZXRTdHJpbmcodCkgOiB2b2lkIDAgIT09IHQuaGV4ID8gdGhpcy5zZXRTdHJpbmdIZXgodC5oZXgpIDogdm9pZCAwICE9PSB0LmRhdGUgJiYgdGhpcy5zZXRCeURhdGUodC5kYXRlKSlcclxuXHR9LCB0dC5sYW5nLmV4dGVuZChldC5hc24xLkRFUlVUQ1RpbWUsIGV0LmFzbjEuREVSQWJzdHJhY3RUaW1lKSwgZXQuYXNuMS5ERVJHZW5lcmFsaXplZFRpbWUgPSBmdW5jdGlvbih0KSB7XHJcblx0XHRldC5hc24xLkRFUkdlbmVyYWxpemVkVGltZS5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgdCksIHRoaXMuaFQgPSBcIjE4XCIsIHRoaXMud2l0aE1pbGxpcyA9ICExLCB0aGlzLnNldEJ5RGF0ZSA9XHJcblx0XHRcdGZ1bmN0aW9uKHQpIHtcclxuXHRcdFx0XHR0aGlzLmhUTFYgPSBudWxsLCB0aGlzLmlzTW9kaWZpZWQgPSAhMCwgdGhpcy5kYXRlID0gdCwgdGhpcy5zID0gdGhpcy5mb3JtYXREYXRlKHRoaXMuZGF0ZSwgXCJnZW5cIiwgdGhpcy53aXRoTWlsbGlzKSxcclxuXHRcdFx0XHRcdHRoaXMuaFYgPSBzdG9oZXgodGhpcy5zKVxyXG5cdFx0XHR9LCB0aGlzLmdldEZyZXNoVmFsdWVIZXggPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gdm9pZCAwID09PSB0aGlzLmRhdGUgJiYgdm9pZCAwID09PSB0aGlzLnMgJiYgKHRoaXMuZGF0ZSA9IG5ldyBEYXRlLCB0aGlzLnMgPSB0aGlzLmZvcm1hdERhdGUodGhpcy5kYXRlLFxyXG5cdFx0XHRcdFx0XCJnZW5cIiwgdGhpcy53aXRoTWlsbGlzKSwgdGhpcy5oViA9IHN0b2hleCh0aGlzLnMpKSwgdGhpcy5oVlxyXG5cdFx0XHR9LCB2b2lkIDAgIT09IHQgJiYgKHZvaWQgMCAhPT0gdC5zdHIgPyB0aGlzLnNldFN0cmluZyh0LnN0cikgOiBcInN0cmluZ1wiID09IHR5cGVvZiB0ICYmIHQubWF0Y2goL15bMC05XXsxNH1aJC8pID9cclxuXHRcdFx0XHR0aGlzLnNldFN0cmluZyh0KSA6IHZvaWQgMCAhPT0gdC5oZXggPyB0aGlzLnNldFN0cmluZ0hleCh0LmhleCkgOiB2b2lkIDAgIT09IHQuZGF0ZSAmJiB0aGlzLnNldEJ5RGF0ZSh0LmRhdGUpLCAhMCA9PT1cclxuXHRcdFx0XHR0Lm1pbGxpcyAmJiAodGhpcy53aXRoTWlsbGlzID0gITApKVxyXG5cdH0sIHR0LmxhbmcuZXh0ZW5kKGV0LmFzbjEuREVSR2VuZXJhbGl6ZWRUaW1lLCBldC5hc24xLkRFUkFic3RyYWN0VGltZSksIGV0LmFzbjEuREVSU2VxdWVuY2UgPSBmdW5jdGlvbih0KSB7XHJcblx0XHRldC5hc24xLkRFUlNlcXVlbmNlLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLCB0KSwgdGhpcy5oVCA9IFwiMzBcIiwgdGhpcy5nZXRGcmVzaFZhbHVlSGV4ID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdGZvciAodmFyIHQgPSBcIlwiLCBlID0gMDsgZSA8IHRoaXMuYXNuMUFycmF5Lmxlbmd0aDsgZSsrKSB7XHJcblx0XHRcdFx0dCArPSB0aGlzLmFzbjFBcnJheVtlXS5nZXRFbmNvZGVkSGV4KClcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gdGhpcy5oViA9IHQsIHRoaXMuaFZcclxuXHRcdH1cclxuXHR9LCB0dC5sYW5nLmV4dGVuZChldC5hc24xLkRFUlNlcXVlbmNlLCBldC5hc24xLkRFUkFic3RyYWN0U3RydWN0dXJlZCksIGV0LmFzbjEuREVSU2V0ID0gZnVuY3Rpb24odCkge1xyXG5cdFx0ZXQuYXNuMS5ERVJTZXQuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHQpLCB0aGlzLmhUID0gXCIzMVwiLCB0aGlzLnNvcnRGbGFnID0gITAsIHRoaXMuZ2V0RnJlc2hWYWx1ZUhleCA9XHJcblx0XHRcdGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGZvciAodmFyIHQgPSBuZXcgQXJyYXksIGUgPSAwOyBlIDwgdGhpcy5hc24xQXJyYXkubGVuZ3RoOyBlKyspIHtcclxuXHRcdFx0XHRcdHZhciBpID0gdGhpcy5hc24xQXJyYXlbZV07XHJcblx0XHRcdFx0XHR0LnB1c2goaS5nZXRFbmNvZGVkSGV4KCkpXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiAxID09IHRoaXMuc29ydEZsYWcgJiYgdC5zb3J0KCksIHRoaXMuaFYgPSB0LmpvaW4oXCJcIiksIHRoaXMuaFZcclxuXHRcdFx0fSwgdm9pZCAwICE9PSB0ICYmIHZvaWQgMCAhPT0gdC5zb3J0ZmxhZyAmJiAwID09IHQuc29ydGZsYWcgJiYgKHRoaXMuc29ydEZsYWcgPSAhMSlcclxuXHR9LCB0dC5sYW5nLmV4dGVuZChldC5hc24xLkRFUlNldCwgZXQuYXNuMS5ERVJBYnN0cmFjdFN0cnVjdHVyZWQpLCBldC5hc24xLkRFUlRhZ2dlZE9iamVjdCA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdGV0LmFzbjEuREVSVGFnZ2VkT2JqZWN0LnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKSwgdGhpcy5oVCA9IFwiYTBcIiwgdGhpcy5oViA9IFwiXCIsIHRoaXMuaXNFeHBsaWNpdCA9ICEwLCB0aGlzXHJcblx0XHRcdC5hc24xT2JqZWN0ID0gbnVsbCwgdGhpcy5zZXRBU04xT2JqZWN0ID0gZnVuY3Rpb24odCwgZSwgaSkge1xyXG5cdFx0XHRcdHRoaXMuaFQgPSBlLCB0aGlzLmlzRXhwbGljaXQgPSB0LCB0aGlzLmFzbjFPYmplY3QgPSBpLCB0aGlzLmlzRXhwbGljaXQgPyAodGhpcy5oViA9IHRoaXMuYXNuMU9iamVjdC5nZXRFbmNvZGVkSGV4KCksXHJcblx0XHRcdFx0XHR0aGlzLmhUTFYgPSBudWxsLCB0aGlzLmlzTW9kaWZpZWQgPSAhMCkgOiAodGhpcy5oViA9IG51bGwsIHRoaXMuaFRMViA9IGkuZ2V0RW5jb2RlZEhleCgpLCB0aGlzLmhUTFYgPSB0aGlzLmhUTFZcclxuXHRcdFx0XHRcdC5yZXBsYWNlKC9eLi4vLCBlKSwgdGhpcy5pc01vZGlmaWVkID0gITEpXHJcblx0XHRcdH0sIHRoaXMuZ2V0RnJlc2hWYWx1ZUhleCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLmhWXHJcblx0XHRcdH0sIHZvaWQgMCAhPT0gdCAmJiAodm9pZCAwICE9PSB0LnRhZyAmJiAodGhpcy5oVCA9IHQudGFnKSwgdm9pZCAwICE9PSB0LmV4cGxpY2l0ICYmICh0aGlzLmlzRXhwbGljaXQgPSB0LmV4cGxpY2l0KSxcclxuXHRcdFx0XHR2b2lkIDAgIT09IHQub2JqICYmICh0aGlzLmFzbjFPYmplY3QgPSB0Lm9iaiwgdGhpcy5zZXRBU04xT2JqZWN0KHRoaXMuaXNFeHBsaWNpdCwgdGhpcy5oVCwgdGhpcy5hc24xT2JqZWN0KSkpXHJcblx0fSwgdHQubGFuZy5leHRlbmQoZXQuYXNuMS5ERVJUYWdnZWRPYmplY3QsIGV0LmFzbjEuQVNOMU9iamVjdCk7XHJcblx0dmFyIGl0ID0gZnVuY3Rpb24oaSkge1xyXG5cdFx0XHRmdW5jdGlvbiByKHQpIHtcclxuXHRcdFx0XHR2YXIgZSA9IGkuY2FsbCh0aGlzKSB8fCB0aGlzO1xyXG5cdFx0XHRcdHJldHVybiB0ICYmIChcInN0cmluZ1wiID09IHR5cGVvZiB0ID8gZS5wYXJzZUtleSh0KSA6IChyLmhhc1ByaXZhdGVLZXlQcm9wZXJ0eSh0KSB8fCByLmhhc1B1YmxpY0tleVByb3BlcnR5KHQpKSAmJiBlXHJcblx0XHRcdFx0XHQucGFyc2VQcm9wZXJ0aWVzRnJvbSh0KSksIGVcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24odCwgZSkge1xyXG5cdFx0XHRcdGZ1bmN0aW9uIGkoKSB7XHJcblx0XHRcdFx0XHR0aGlzLmNvbnN0cnVjdG9yID0gdFxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRwKHQsIGUpLCB0LnByb3RvdHlwZSA9IG51bGwgPT09IGUgPyBPYmplY3QuY3JlYXRlKGUpIDogKGkucHJvdG90eXBlID0gZS5wcm90b3R5cGUsIG5ldyBpKVxyXG5cdFx0XHR9KHIsIGkpLCByLnByb3RvdHlwZS5wYXJzZUtleSA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0dmFyIGUgPSAwLFxyXG5cdFx0XHRcdFx0XHRpID0gMCxcclxuXHRcdFx0XHRcdFx0ciA9IC9eXFxzKig/OlswLTlBLUZhLWZdWzAtOUEtRmEtZl1cXHMqKSskLy50ZXN0KHQpID8gZCh0KSA6IHYudW5hcm1vcih0KSxcclxuXHRcdFx0XHRcdFx0biA9IHguZGVjb2RlKHIpO1xyXG5cdFx0XHRcdFx0aWYgKDMgPT09IG4uc3ViLmxlbmd0aCAmJiAobiA9IG4uc3ViWzJdLnN1YlswXSksIDkgPT09IG4uc3ViLmxlbmd0aCkge1xyXG5cdFx0XHRcdFx0XHRlID0gbi5zdWJbMV0uZ2V0SGV4U3RyaW5nVmFsdWUoKSwgdGhpcy5uID0gcShlLCAxNiksIGkgPSBuLnN1YlsyXS5nZXRIZXhTdHJpbmdWYWx1ZSgpLCB0aGlzLmUgPSBwYXJzZUludChpLCAxNik7XHJcblx0XHRcdFx0XHRcdHZhciBzID0gbi5zdWJbM10uZ2V0SGV4U3RyaW5nVmFsdWUoKTtcclxuXHRcdFx0XHRcdFx0dGhpcy5kID0gcShzLCAxNik7XHJcblx0XHRcdFx0XHRcdHZhciBvID0gbi5zdWJbNF0uZ2V0SGV4U3RyaW5nVmFsdWUoKTtcclxuXHRcdFx0XHRcdFx0dGhpcy5wID0gcShvLCAxNik7XHJcblx0XHRcdFx0XHRcdHZhciBoID0gbi5zdWJbNV0uZ2V0SGV4U3RyaW5nVmFsdWUoKTtcclxuXHRcdFx0XHRcdFx0dGhpcy5xID0gcShoLCAxNik7XHJcblx0XHRcdFx0XHRcdHZhciBhID0gbi5zdWJbNl0uZ2V0SGV4U3RyaW5nVmFsdWUoKTtcclxuXHRcdFx0XHRcdFx0dGhpcy5kbXAxID0gcShhLCAxNik7XHJcblx0XHRcdFx0XHRcdHZhciB1ID0gbi5zdWJbN10uZ2V0SGV4U3RyaW5nVmFsdWUoKTtcclxuXHRcdFx0XHRcdFx0dGhpcy5kbXExID0gcSh1LCAxNik7XHJcblx0XHRcdFx0XHRcdHZhciBjID0gbi5zdWJbOF0uZ2V0SGV4U3RyaW5nVmFsdWUoKTtcclxuXHRcdFx0XHRcdFx0dGhpcy5jb2VmZiA9IHEoYywgMTYpXHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRpZiAoMiAhPT0gbi5zdWIubGVuZ3RoKSByZXR1cm4gITE7XHJcblx0XHRcdFx0XHRcdHZhciBmID0gbi5zdWJbMV0uc3ViWzBdO1xyXG5cdFx0XHRcdFx0XHRlID0gZi5zdWJbMF0uZ2V0SGV4U3RyaW5nVmFsdWUoKSwgdGhpcy5uID0gcShlLCAxNiksIGkgPSBmLnN1YlsxXS5nZXRIZXhTdHJpbmdWYWx1ZSgpLCB0aGlzLmUgPSBwYXJzZUludChpLCAxNilcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHJldHVybiAhMFxyXG5cdFx0XHRcdH0gY2F0Y2ggKHQpIHtcclxuXHRcdFx0XHRcdHJldHVybiAhMVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgci5wcm90b3R5cGUuZ2V0UHJpdmF0ZUJhc2VLZXkgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHR2YXIgdCA9IHtcclxuXHRcdFx0XHRcdGFycmF5OiBbbmV3IGV0LmFzbjEuREVSSW50ZWdlcih7XHJcblx0XHRcdFx0XHRcdGludDogMFxyXG5cdFx0XHRcdFx0fSksIG5ldyBldC5hc24xLkRFUkludGVnZXIoe1xyXG5cdFx0XHRcdFx0XHRiaWdpbnQ6IHRoaXMublxyXG5cdFx0XHRcdFx0fSksIG5ldyBldC5hc24xLkRFUkludGVnZXIoe1xyXG5cdFx0XHRcdFx0XHRpbnQ6IHRoaXMuZVxyXG5cdFx0XHRcdFx0fSksIG5ldyBldC5hc24xLkRFUkludGVnZXIoe1xyXG5cdFx0XHRcdFx0XHRiaWdpbnQ6IHRoaXMuZFxyXG5cdFx0XHRcdFx0fSksIG5ldyBldC5hc24xLkRFUkludGVnZXIoe1xyXG5cdFx0XHRcdFx0XHRiaWdpbnQ6IHRoaXMucFxyXG5cdFx0XHRcdFx0fSksIG5ldyBldC5hc24xLkRFUkludGVnZXIoe1xyXG5cdFx0XHRcdFx0XHRiaWdpbnQ6IHRoaXMucVxyXG5cdFx0XHRcdFx0fSksIG5ldyBldC5hc24xLkRFUkludGVnZXIoe1xyXG5cdFx0XHRcdFx0XHRiaWdpbnQ6IHRoaXMuZG1wMVxyXG5cdFx0XHRcdFx0fSksIG5ldyBldC5hc24xLkRFUkludGVnZXIoe1xyXG5cdFx0XHRcdFx0XHRiaWdpbnQ6IHRoaXMuZG1xMVxyXG5cdFx0XHRcdFx0fSksIG5ldyBldC5hc24xLkRFUkludGVnZXIoe1xyXG5cdFx0XHRcdFx0XHRiaWdpbnQ6IHRoaXMuY29lZmZcclxuXHRcdFx0XHRcdH0pXVxyXG5cdFx0XHRcdH07XHJcblx0XHRcdFx0cmV0dXJuIG5ldyBldC5hc24xLkRFUlNlcXVlbmNlKHQpLmdldEVuY29kZWRIZXgoKVxyXG5cdFx0XHR9LCByLnByb3RvdHlwZS5nZXRQcml2YXRlQmFzZUtleUI2NCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBjKHRoaXMuZ2V0UHJpdmF0ZUJhc2VLZXkoKSlcclxuXHRcdFx0fSwgci5wcm90b3R5cGUuZ2V0UHVibGljQmFzZUtleSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHZhciB0ID0gbmV3IGV0LmFzbjEuREVSU2VxdWVuY2Uoe1xyXG5cdFx0XHRcdFx0XHRhcnJheTogW25ldyBldC5hc24xLkRFUk9iamVjdElkZW50aWZpZXIoe1xyXG5cdFx0XHRcdFx0XHRcdG9pZDogXCIxLjIuODQwLjExMzU0OS4xLjEuMVwiXHJcblx0XHRcdFx0XHRcdH0pLCBuZXcgZXQuYXNuMS5ERVJOdWxsXVxyXG5cdFx0XHRcdFx0fSksXHJcblx0XHRcdFx0XHRlID0gbmV3IGV0LmFzbjEuREVSU2VxdWVuY2Uoe1xyXG5cdFx0XHRcdFx0XHRhcnJheTogW25ldyBldC5hc24xLkRFUkludGVnZXIoe1xyXG5cdFx0XHRcdFx0XHRcdGJpZ2ludDogdGhpcy5uXHJcblx0XHRcdFx0XHRcdH0pLCBuZXcgZXQuYXNuMS5ERVJJbnRlZ2VyKHtcclxuXHRcdFx0XHRcdFx0XHRpbnQ6IHRoaXMuZVxyXG5cdFx0XHRcdFx0XHR9KV1cclxuXHRcdFx0XHRcdH0pLFxyXG5cdFx0XHRcdFx0aSA9IG5ldyBldC5hc24xLkRFUkJpdFN0cmluZyh7XHJcblx0XHRcdFx0XHRcdGhleDogXCIwMFwiICsgZS5nZXRFbmNvZGVkSGV4KClcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdHJldHVybiBuZXcgZXQuYXNuMS5ERVJTZXF1ZW5jZSh7XHJcblx0XHRcdFx0XHRhcnJheTogW3QsIGldXHJcblx0XHRcdFx0fSkuZ2V0RW5jb2RlZEhleCgpXHJcblx0XHRcdH0sIHIucHJvdG90eXBlLmdldFB1YmxpY0Jhc2VLZXlCNjQgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gYyh0aGlzLmdldFB1YmxpY0Jhc2VLZXkoKSlcclxuXHRcdFx0fSwgci53b3Jkd3JhcCA9IGZ1bmN0aW9uKHQsIGUpIHtcclxuXHRcdFx0XHRpZiAoIXQpIHJldHVybiB0O1xyXG5cdFx0XHRcdHZhciBpID0gXCIoLnsxLFwiICsgKGUgPSBlIHx8IDY0KSArIFwifSkoICt8JFxcbj8pfCguezEsXCIgKyBlICsgXCJ9KVwiO1xyXG5cdFx0XHRcdHJldHVybiB0Lm1hdGNoKFJlZ0V4cChpLCBcImdcIikpLmpvaW4oXCJcXG5cIilcclxuXHRcdFx0fSwgci5wcm90b3R5cGUuZ2V0UHJpdmF0ZUtleSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHZhciB0ID0gXCItLS0tLUJFR0lOIFJTQSBQUklWQVRFIEtFWS0tLS0tXFxuXCI7XHJcblx0XHRcdFx0cmV0dXJuIHQgKz0gci53b3Jkd3JhcCh0aGlzLmdldFByaXZhdGVCYXNlS2V5QjY0KCkpICsgXCJcXG5cIiwgdCArPSBcIi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tXCJcclxuXHRcdFx0fSwgci5wcm90b3R5cGUuZ2V0UHVibGljS2V5ID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0dmFyIHQgPSBcIi0tLS0tQkVHSU4gUFVCTElDIEtFWS0tLS0tXFxuXCI7XHJcblx0XHRcdFx0cmV0dXJuIHQgKz0gci53b3Jkd3JhcCh0aGlzLmdldFB1YmxpY0Jhc2VLZXlCNjQoKSkgKyBcIlxcblwiLCB0ICs9IFwiLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tXCJcclxuXHRcdFx0fSwgci5oYXNQdWJsaWNLZXlQcm9wZXJ0eSA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdFx0XHRyZXR1cm4gKHQgPSB0IHx8IHt9KS5oYXNPd25Qcm9wZXJ0eShcIm5cIikgJiYgdC5oYXNPd25Qcm9wZXJ0eShcImVcIilcclxuXHRcdFx0fSwgci5oYXNQcml2YXRlS2V5UHJvcGVydHkgPSBmdW5jdGlvbih0KSB7XHJcblx0XHRcdFx0cmV0dXJuICh0ID0gdCB8fCB7fSkuaGFzT3duUHJvcGVydHkoXCJuXCIpICYmIHQuaGFzT3duUHJvcGVydHkoXCJlXCIpICYmIHQuaGFzT3duUHJvcGVydHkoXCJkXCIpICYmIHQuaGFzT3duUHJvcGVydHkoXHJcblx0XHRcdFx0XHRcInBcIikgJiYgdC5oYXNPd25Qcm9wZXJ0eShcInFcIikgJiYgdC5oYXNPd25Qcm9wZXJ0eShcImRtcDFcIikgJiYgdC5oYXNPd25Qcm9wZXJ0eShcImRtcTFcIikgJiYgdC5oYXNPd25Qcm9wZXJ0eShcclxuXHRcdFx0XHRcdFwiY29lZmZcIilcclxuXHRcdFx0fSwgci5wcm90b3R5cGUucGFyc2VQcm9wZXJ0aWVzRnJvbSA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdFx0XHR0aGlzLm4gPSB0Lm4sIHRoaXMuZSA9IHQuZSwgdC5oYXNPd25Qcm9wZXJ0eShcImRcIikgJiYgKHRoaXMuZCA9IHQuZCwgdGhpcy5wID0gdC5wLCB0aGlzLnEgPSB0LnEsIHRoaXMuZG1wMSA9IHQuZG1wMSxcclxuXHRcdFx0XHRcdHRoaXMuZG1xMSA9IHQuZG1xMSwgdGhpcy5jb2VmZiA9IHQuY29lZmYpXHJcblx0XHRcdH0sIHJcclxuXHRcdH0oUSksXHJcblx0XHRydCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRmdW5jdGlvbiB0KHQpIHtcclxuXHRcdFx0XHR0ID0gdCB8fCB7fSwgdGhpcy5kZWZhdWx0X2tleV9zaXplID0gcGFyc2VJbnQodC5kZWZhdWx0X2tleV9zaXplLCAxMCkgfHwgMTAyNCwgdGhpcy5kZWZhdWx0X3B1YmxpY19leHBvbmVudCA9IHQuZGVmYXVsdF9wdWJsaWNfZXhwb25lbnQgfHxcclxuXHRcdFx0XHRcdFwiMDEwMDAxXCIsIHRoaXMubG9nID0gdC5sb2cgfHwgITEsIHRoaXMua2V5ID0gbnVsbFxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiB0LnByb3RvdHlwZS5zZXRLZXkgPSBmdW5jdGlvbih0KSB7XHJcblx0XHRcdFx0dGhpcy5sb2cgJiYgdGhpcy5rZXkgJiYgY29uc29sZS53YXJuKFwiQSBrZXkgd2FzIGFscmVhZHkgc2V0LCBvdmVycmlkaW5nIGV4aXN0aW5nLlwiKSwgdGhpcy5rZXkgPSBuZXcgaXQodClcclxuXHRcdFx0fSwgdC5wcm90b3R5cGUuc2V0UHJpdmF0ZUtleSA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdFx0XHR0aGlzLnNldEtleSh0KVxyXG5cdFx0XHR9LCB0LnByb3RvdHlwZS5zZXRQdWJsaWNLZXkgPSBmdW5jdGlvbih0KSB7XHJcblx0XHRcdFx0dGhpcy5zZXRLZXkodClcclxuXHRcdFx0fSwgdC5wcm90b3R5cGUuZGVjcnlwdCA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuZ2V0S2V5KCkuZGVjcnlwdChmKHQpKVxyXG5cdFx0XHRcdH0gY2F0Y2ggKHQpIHtcclxuXHRcdFx0XHRcdHJldHVybiAhMVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgdC5wcm90b3R5cGUuZW5jcnlwdCA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGModGhpcy5nZXRLZXkoKS5lbmNyeXB0KHQpKVxyXG5cdFx0XHRcdH0gY2F0Y2ggKHQpIHtcclxuXHRcdFx0XHRcdHJldHVybiAhMVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgdC5wcm90b3R5cGUuc2lnbiA9IGZ1bmN0aW9uKHQsIGUsIGkpIHtcclxuXHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGModGhpcy5nZXRLZXkoKS5zaWduKHQsIGUsIGkpKVxyXG5cdFx0XHRcdH0gY2F0Y2ggKHQpIHtcclxuXHRcdFx0XHRcdHJldHVybiAhMVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgdC5wcm90b3R5cGUudmVyaWZ5ID0gZnVuY3Rpb24odCwgZSwgaSkge1xyXG5cdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5nZXRLZXkoKS52ZXJpZnkodCwgZihlKSwgaSlcclxuXHRcdFx0XHR9IGNhdGNoICh0KSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gITFcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIHQucHJvdG90eXBlLmdldEtleSA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdFx0XHRpZiAoIXRoaXMua2V5KSB7XHJcblx0XHRcdFx0XHRpZiAodGhpcy5rZXkgPSBuZXcgaXQsIHQgJiYgXCJbb2JqZWN0IEZ1bmN0aW9uXVwiID09PSB7fS50b1N0cmluZy5jYWxsKHQpKSByZXR1cm4gdm9pZCB0aGlzLmtleS5nZW5lcmF0ZUFzeW5jKHRoaXNcclxuXHRcdFx0XHRcdFx0LmRlZmF1bHRfa2V5X3NpemUsIHRoaXMuZGVmYXVsdF9wdWJsaWNfZXhwb25lbnQsIHQpO1xyXG5cdFx0XHRcdFx0dGhpcy5rZXkuZ2VuZXJhdGUodGhpcy5kZWZhdWx0X2tleV9zaXplLCB0aGlzLmRlZmF1bHRfcHVibGljX2V4cG9uZW50KVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5rZXlcclxuXHRcdFx0fSwgdC5wcm90b3R5cGUuZ2V0UHJpdmF0ZUtleSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLmdldEtleSgpLmdldFByaXZhdGVLZXkoKVxyXG5cdFx0XHR9LCB0LnByb3RvdHlwZS5nZXRQcml2YXRlS2V5QjY0ID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMuZ2V0S2V5KCkuZ2V0UHJpdmF0ZUJhc2VLZXlCNjQoKVxyXG5cdFx0XHR9LCB0LnByb3RvdHlwZS5nZXRQdWJsaWNLZXkgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5nZXRLZXkoKS5nZXRQdWJsaWNLZXkoKVxyXG5cdFx0XHR9LCB0LnByb3RvdHlwZS5nZXRQdWJsaWNLZXlCNjQgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5nZXRLZXkoKS5nZXRQdWJsaWNCYXNlS2V5QjY0KClcclxuXHRcdFx0fSwgdC52ZXJzaW9uID0gXCIzLjAuMC1yYy4xXCIsIHRcclxuXHRcdH0oKTtcclxuXHR3aW5kb3cyLkpTRW5jcnlwdCA9IHJ0LCB0LkpTRW5jcnlwdCA9IHJ0LCB0LmRlZmF1bHQgPSBydCwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIFwiX19lc01vZHVsZVwiLCB7XHJcblx0XHR2YWx1ZTogITBcclxuXHR9KVxyXG59KTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///34\n");

/***/ }),

/***/ 35:
/*!*********************************************************************!*\
  !*** D:/1zxyWork/daibeih5/daibei3.0/node_modules/js-md5/src/md5.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process, global) {var __WEBPACK_AMD_DEFINE_RESULT__; /**\n               * [js-md5]{@link https://github.com/emn178/js-md5}\n               *\n               * @namespace md5\n               * @version 0.7.3\n               * @author Chen, Yi-Cyuan [emn178@gmail.com]\n               * @copyright Chen, Yi-Cyuan 2014-2017\n               * @license MIT\n               */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_MD5_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD =  true && __webpack_require__(/*! !webpack amd options */ 38);\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [128, 32768, 8388608, -2147483648];\n  var SHIFT = [0, 8, 16, 24];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  var blocks = [],buffer8;\n  if (ARRAY_BUFFER) {\n    var buffer = new ArrayBuffer(68);\n    buffer8 = new Uint8Array(buffer);\n    blocks = new Uint32Array(buffer);\n  }\n\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  /**\n     * @method hex\n     * @memberof md5\n     * @description Output hash as hex string\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n     * @returns {String} Hex string\n     * @example\n     * md5.hex('The quick brown fox jumps over the lazy dog');\n     * // equal to\n     * md5('The quick brown fox jumps over the lazy dog');\n     */\n  /**\n         * @method digest\n         * @memberof md5\n         * @description Output hash as bytes array\n         * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n         * @returns {Array} Bytes array\n         * @example\n         * md5.digest('The quick brown fox jumps over the lazy dog');\n         */\n  /**\n             * @method array\n             * @memberof md5\n             * @description Output hash as bytes array\n             * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n             * @returns {Array} Bytes array\n             * @example\n             * md5.array('The quick brown fox jumps over the lazy dog');\n             */\n  /**\n                 * @method arrayBuffer\n                 * @memberof md5\n                 * @description Output hash as ArrayBuffer\n                 * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n                 * @returns {ArrayBuffer} ArrayBuffer\n                 * @example\n                 * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\n                 */\n  /**\n                     * @method buffer\n                     * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n                     * @memberof md5\n                     * @description Output hash as ArrayBuffer\n                     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n                     * @returns {ArrayBuffer} ArrayBuffer\n                     * @example\n                     * md5.buffer('The quick brown fox jumps over the lazy dog');\n                     */\n  /**\n                         * @method base64\n                         * @memberof md5\n                         * @description Output hash as base64 string\n                         * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n                         * @returns {String} base64 string\n                         * @example\n                         * md5.base64('The quick brown fox jumps over the lazy dog');\n                         */\n  var createOutputMethod = function createOutputMethod(outputType) {\n    return function (message) {\n      return new Md5(true).update(message)[outputType]();\n    };\n  };\n\n  /**\n      * @method create\n      * @memberof md5\n      * @description Create Md5 object\n      * @returns {Md5} Md5 object.\n      * @example\n      * var hash = md5.create();\n      */\n  /**\n          * @method update\n          * @memberof md5\n          * @description Create and update Md5 object\n          * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n          * @returns {Md5} Md5 object.\n          * @example\n          * var hash = md5.update('The quick brown fox jumps over the lazy dog');\n          * // equal to\n          * var hash = md5.create();\n          * hash.update('The quick brown fox jumps over the lazy dog');\n          */\n  var createMethod = function createMethod() {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Md5();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function nodeWrap(method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var nodeMethod = function nodeMethod(message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw ERROR;\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n      message.constructor === Buffer) {\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  /**\n      * Md5 class\n      * @class Md5\n      * @description This is internal class.\n      * @see {@link md5.create}\n      */\n  function Md5(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n      this.buffer8 = buffer8;\n    } else {\n      if (ARRAY_BUFFER) {\n        var buffer = new ArrayBuffer(68);\n        this.buffer8 = new Uint8Array(buffer);\n        this.blocks = new Uint32Array(buffer);\n      } else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      }\n    }\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  /**\n     * @method update\n     * @memberof Md5\n     * @instance\n     * @description Update hash\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n     * @returns {Md5} Md5 object.\n     * @see {@link md5.update}\n     */\n  Md5.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n\n    var notString,type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw ERROR;\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw ERROR;\n          }\n        }\n      } else {\n        throw ERROR;\n      }\n      notString = true;\n    }\n    var code,index = 0,i,length = message.length,blocks = this.blocks;\n    var buffer8 = this.buffer8;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = blocks[16];\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            buffer8[i++] = message[index];\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n          }\n        }\n      } else {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              buffer8[i++] = code;\n            } else if (code < 0x800) {\n              buffer8[i++] = 0xc0 | code >> 6;\n              buffer8[i++] = 0x80 | code & 0x3f;\n            } else if (code < 0xd800 || code >= 0xe000) {\n              buffer8[i++] = 0xe0 | code >> 12;\n              buffer8[i++] = 0x80 | code >> 6 & 0x3f;\n              buffer8[i++] = 0x80 | code & 0x3f;\n            } else {\n              code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);\n              buffer8[i++] = 0xf0 | code >> 18;\n              buffer8[i++] = 0x80 | code >> 12 & 0x3f;\n              buffer8[i++] = 0x80 | code >> 6 & 0x3f;\n              buffer8[i++] = 0x80 | code & 0x3f;\n            }\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n              blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n              blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n            } else {\n              code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);\n              blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n            }\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Md5.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks,i = this.lastByteIndex;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = blocks[16];\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.bytes << 3;\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\n    this.hash();\n  };\n\n  Md5.prototype.hash = function () {\n    var a,b,c,d,bc,da,blocks = this.blocks;\n\n    if (this.first) {\n      a = blocks[0] - 680876937;\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c = (-271733879 ^ d & (a ^ -271733879)) + blocks[2] - 1126478375;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b = (a ^ c & (d ^ a)) + blocks[3] - 1316259209;\n      b = (b << 22 | b >>> 10) + c << 0;\n    } else {\n      a = this.h0;\n      b = this.h1;\n      c = this.h2;\n      d = this.h3;\n      a += (d ^ b & (c ^ d)) + blocks[0] - 680876936;\n      a = (a << 7 | a >>> 25) + b << 0;\n      d += (c ^ a & (b ^ c)) + blocks[1] - 389564586;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c += (b ^ d & (a ^ b)) + blocks[2] + 606105819;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b += (a ^ c & (d ^ a)) + blocks[3] - 1044525330;\n      b = (b << 22 | b >>> 10) + c << 0;\n    }\n\n    a += (d ^ b & (c ^ d)) + blocks[4] - 176418897;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ a & (b ^ c)) + blocks[5] + 1200080426;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ d & (a ^ b)) + blocks[6] - 1473231341;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ c & (d ^ a)) + blocks[7] - 45705983;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ b & (c ^ d)) + blocks[8] + 1770035416;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ a & (b ^ c)) + blocks[9] - 1958414417;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ d & (a ^ b)) + blocks[10] - 42063;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ c & (d ^ a)) + blocks[11] - 1990404162;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ b & (c ^ d)) + blocks[12] + 1804603682;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ a & (b ^ c)) + blocks[13] - 40341101;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ d & (a ^ b)) + blocks[14] - 1502002290;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ c & (d ^ a)) + blocks[15] + 1236535329;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (c ^ d & (b ^ c)) + blocks[1] - 165796510;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ c & (a ^ b)) + blocks[6] - 1069501632;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ b & (d ^ a)) + blocks[11] + 643717713;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ a & (c ^ d)) + blocks[0] - 373897302;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ d & (b ^ c)) + blocks[5] - 701558691;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ c & (a ^ b)) + blocks[10] + 38016083;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ b & (d ^ a)) + blocks[15] - 660478335;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ a & (c ^ d)) + blocks[4] - 405537848;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ d & (b ^ c)) + blocks[9] + 568446438;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ c & (a ^ b)) + blocks[14] - 1019803690;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ b & (d ^ a)) + blocks[3] - 187363961;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ a & (c ^ d)) + blocks[8] + 1163531501;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ d & (b ^ c)) + blocks[13] - 1444681467;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ c & (a ^ b)) + blocks[2] - 51403784;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ b & (d ^ a)) + blocks[7] + 1735328473;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ a & (c ^ d)) + blocks[12] - 1926607734;\n    b = (b << 20 | b >>> 12) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[5] - 378558;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[8] - 2022574463;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[11] + 1839030562;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[14] - 35309556;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[1] - 1530992060;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[4] + 1272893353;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[7] - 155497632;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[10] - 1094730640;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[13] + 681279174;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[0] - 358537222;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[3] - 722521979;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[6] + 76029189;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[9] - 640364487;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[12] - 421815835;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[15] + 530742520;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[2] - 995338651;\n    b = (b << 23 | b >>> 9) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\n    b = (b << 21 | b >>> 11) + c << 0;\n\n    if (this.first) {\n      this.h0 = a + 1732584193 << 0;\n      this.h1 = b - 271733879 << 0;\n      this.h2 = c - 1732584194 << 0;\n      this.h3 = d + 271733878 << 0;\n      this.first = false;\n    } else {\n      this.h0 = this.h0 + a << 0;\n      this.h1 = this.h1 + b << 0;\n      this.h2 = this.h2 + c << 0;\n      this.h3 = this.h3 + d << 0;\n    }\n  };\n\n  /**\n      * @method hex\n      * @memberof Md5\n      * @instance\n      * @description Output hash as hex string\n      * @returns {String} Hex string\n      * @see {@link md5.hex}\n      * @example\n      * hash.hex();\n      */\n  Md5.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0,h1 = this.h1,h2 = this.h2,h3 = this.h3;\n\n    return HEX_CHARS[h0 >> 4 & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n    HEX_CHARS[h0 >> 12 & 0x0F] + HEX_CHARS[h0 >> 8 & 0x0F] +\n    HEX_CHARS[h0 >> 20 & 0x0F] + HEX_CHARS[h0 >> 16 & 0x0F] +\n    HEX_CHARS[h0 >> 28 & 0x0F] + HEX_CHARS[h0 >> 24 & 0x0F] +\n    HEX_CHARS[h1 >> 4 & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n    HEX_CHARS[h1 >> 12 & 0x0F] + HEX_CHARS[h1 >> 8 & 0x0F] +\n    HEX_CHARS[h1 >> 20 & 0x0F] + HEX_CHARS[h1 >> 16 & 0x0F] +\n    HEX_CHARS[h1 >> 28 & 0x0F] + HEX_CHARS[h1 >> 24 & 0x0F] +\n    HEX_CHARS[h2 >> 4 & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n    HEX_CHARS[h2 >> 12 & 0x0F] + HEX_CHARS[h2 >> 8 & 0x0F] +\n    HEX_CHARS[h2 >> 20 & 0x0F] + HEX_CHARS[h2 >> 16 & 0x0F] +\n    HEX_CHARS[h2 >> 28 & 0x0F] + HEX_CHARS[h2 >> 24 & 0x0F] +\n    HEX_CHARS[h3 >> 4 & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n    HEX_CHARS[h3 >> 12 & 0x0F] + HEX_CHARS[h3 >> 8 & 0x0F] +\n    HEX_CHARS[h3 >> 20 & 0x0F] + HEX_CHARS[h3 >> 16 & 0x0F] +\n    HEX_CHARS[h3 >> 28 & 0x0F] + HEX_CHARS[h3 >> 24 & 0x0F];\n  };\n\n  /**\n      * @method toString\n      * @memberof Md5\n      * @instance\n      * @description Output hash as hex string\n      * @returns {String} Hex string\n      * @see {@link md5.hex}\n      * @example\n      * hash.toString();\n      */\n  Md5.prototype.toString = Md5.prototype.hex;\n\n  /**\n                                               * @method digest\n                                               * @memberof Md5\n                                               * @instance\n                                               * @description Output hash as bytes array\n                                               * @returns {Array} Bytes array\n                                               * @see {@link md5.digest}\n                                               * @example\n                                               * hash.digest();\n                                               */\n  Md5.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0,h1 = this.h1,h2 = this.h2,h3 = this.h3;\n    return [\n    h0 & 0xFF, h0 >> 8 & 0xFF, h0 >> 16 & 0xFF, h0 >> 24 & 0xFF,\n    h1 & 0xFF, h1 >> 8 & 0xFF, h1 >> 16 & 0xFF, h1 >> 24 & 0xFF,\n    h2 & 0xFF, h2 >> 8 & 0xFF, h2 >> 16 & 0xFF, h2 >> 24 & 0xFF,\n    h3 & 0xFF, h3 >> 8 & 0xFF, h3 >> 16 & 0xFF, h3 >> 24 & 0xFF];\n\n  };\n\n  /**\n      * @method array\n      * @memberof Md5\n      * @instance\n      * @description Output hash as bytes array\n      * @returns {Array} Bytes array\n      * @see {@link md5.array}\n      * @example\n      * hash.array();\n      */\n  Md5.prototype.array = Md5.prototype.digest;\n\n  /**\n                                               * @method arrayBuffer\n                                               * @memberof Md5\n                                               * @instance\n                                               * @description Output hash as ArrayBuffer\n                                               * @returns {ArrayBuffer} ArrayBuffer\n                                               * @see {@link md5.arrayBuffer}\n                                               * @example\n                                               * hash.arrayBuffer();\n                                               */\n  Md5.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(16);\n    var blocks = new Uint32Array(buffer);\n    blocks[0] = this.h0;\n    blocks[1] = this.h1;\n    blocks[2] = this.h2;\n    blocks[3] = this.h3;\n    return buffer;\n  };\n\n  /**\n      * @method buffer\n      * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n      * @memberof Md5\n      * @instance\n      * @description Output hash as ArrayBuffer\n      * @returns {ArrayBuffer} ArrayBuffer\n      * @see {@link md5.buffer}\n      * @example\n      * hash.buffer();\n      */\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\n\n  /**\n                                                     * @method base64\n                                                     * @memberof Md5\n                                                     * @instance\n                                                     * @description Output hash as base64 string\n                                                     * @returns {String} base64 string\n                                                     * @see {@link md5.base64}\n                                                     * @example\n                                                     * hash.base64();\n                                                     */\n  Md5.prototype.base64 = function () {\n    var v1,v2,v3,base64Str = '',bytes = this.array();\n    for (var i = 0; i < 15;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n      BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\n      BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\n      BASE64_ENCODE_CHAR[v3 & 63];\n    }\n    v1 = bytes[i];\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n    BASE64_ENCODE_CHAR[v1 << 4 & 63] +\n    '==';\n    return base64Str;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    /**\n           * @method md5\b\n           * @description Md5 hash function, export to global in browsers.\n           * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n           * @returns {String} md5 hashes\n           * @example\n           * md5(''); // d41d8cd98f00b204e9800998ecf8427e\n           * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\n           * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\n           *\n           * // It also supports UTF-8 encoding\n           * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\n           *\n           * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\n           * md5([]); // d41d8cd98f00b204e9800998ecf8427e\n           * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\n           */\n    root.md5 = exports;\n    if (AMD) {\n      !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n        return exports;\n      }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    }\n  }\n})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../迅雷下载/HBuilderX.2.2.2.20190816.full/HBuilderX/plugins/uniapp-cli/node_modules/node-libs-browser/mock/process.js */ 36), __webpack_require__(/*! ./../../../../../../迅雷下载/HBuilderX.2.2.2.20190816.full/HBuilderX/plugins/uniapp-cli/node_modules/webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///35\n");

/***/ }),

/***/ 36:
/*!********************************************************!*\
  !*** ./node_modules/node-libs-browser/mock/process.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports.nextTick = function nextTick(fn) {\n\tsetTimeout(fn, 0);\n};\n\nexports.platform = exports.arch = \nexports.execPath = exports.title = 'browser';\nexports.pid = 1;\nexports.browser = true;\nexports.env = {};\nexports.argv = [];\n\nexports.binding = function (name) {\n\tthrow new Error('No such module. (Possibly not yet loaded)')\n};\n\n(function () {\n    var cwd = '/';\n    var path;\n    exports.cwd = function () { return cwd };\n    exports.chdir = function (dir) {\n        if (!path) path = __webpack_require__(/*! path */ 37);\n        cwd = path.resolve(dir, cwd);\n    };\n})();\n\nexports.exit = exports.kill = \nexports.umask = exports.dlopen = \nexports.uptime = exports.memoryUsage = \nexports.uvCounters = function() {};\nexports.features = {};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBLDBCQUEwQixtQkFBTyxDQUFDLGNBQU07QUFDeEM7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIzNi5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMubmV4dFRpY2sgPSBmdW5jdGlvbiBuZXh0VGljayhmbikge1xuXHRzZXRUaW1lb3V0KGZuLCAwKTtcbn07XG5cbmV4cG9ydHMucGxhdGZvcm0gPSBleHBvcnRzLmFyY2ggPSBcbmV4cG9ydHMuZXhlY1BhdGggPSBleHBvcnRzLnRpdGxlID0gJ2Jyb3dzZXInO1xuZXhwb3J0cy5waWQgPSAxO1xuZXhwb3J0cy5icm93c2VyID0gdHJ1ZTtcbmV4cG9ydHMuZW52ID0ge307XG5leHBvcnRzLmFyZ3YgPSBbXTtcblxuZXhwb3J0cy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcblx0dGhyb3cgbmV3IEVycm9yKCdObyBzdWNoIG1vZHVsZS4gKFBvc3NpYmx5IG5vdCB5ZXQgbG9hZGVkKScpXG59O1xuXG4oZnVuY3Rpb24gKCkge1xuICAgIHZhciBjd2QgPSAnLyc7XG4gICAgdmFyIHBhdGg7XG4gICAgZXhwb3J0cy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjd2QgfTtcbiAgICBleHBvcnRzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgICAgICBpZiAoIXBhdGgpIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG4gICAgICAgIGN3ZCA9IHBhdGgucmVzb2x2ZShkaXIsIGN3ZCk7XG4gICAgfTtcbn0pKCk7XG5cbmV4cG9ydHMuZXhpdCA9IGV4cG9ydHMua2lsbCA9IFxuZXhwb3J0cy51bWFzayA9IGV4cG9ydHMuZGxvcGVuID0gXG5leHBvcnRzLnVwdGltZSA9IGV4cG9ydHMubWVtb3J5VXNhZ2UgPSBcbmV4cG9ydHMudXZDb3VudGVycyA9IGZ1bmN0aW9uKCkge307XG5leHBvcnRzLmZlYXR1cmVzID0ge307XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///36\n");

/***/ }),

/***/ 37:
/*!***********************************************!*\
  !*** ./node_modules/path-browserify/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node-libs-browser/mock/process.js */ 36)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///37\n");

/***/ }),

/***/ 38:
/*!****************************************!*\
  !*** (webpack)/buildin/amd-options.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */\nmodule.exports = __webpack_amd_options__;\n\n/* WEBPACK VAR INJECTION */}.call(this, {}))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EiLCJmaWxlIjoiMzguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWxzIF9fd2VicGFja19hbWRfb3B0aW9uc19fICovXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19hbWRfb3B0aW9uc19fO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///38\n");

/***/ }),

/***/ 384:
/*!**********************************************************************!*\
  !*** D:/1zxyWork/daibeih5/daibei3.0/plugins/lazyLoad/js/lazyLoad.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni, global) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _regenerator = _interopRequireDefault(__webpack_require__(/*! ./node_modules/@babel/runtime/regenerator */ 385));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");}function _iterableToArrayLimit(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i[\"return\"] != null) _i[\"return\"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};var ownKeys = Object.keys(source);if (typeof Object.getOwnPropertySymbols === 'function') {ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {return Object.getOwnPropertyDescriptor(source, sym).enumerable;}));}ownKeys.forEach(function (key) {_defineProperty(target, key, source[key]);});}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);}_next(undefined);});};}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;} /*\r\nescription: 图片懒加载、预加载 v1.2.1\r\nuthor: pocky\r\nmail 2460392754@qq.com\r\nate: 2019-06-12 18:47:15\r\nastEditTime: 2019-08-01 10:25:28\r\ninstruction: https://www.yuque.com/pocky/aaeyux/neg4m1\r\ngithub: https://github.com/2460392754/uniapp-tools/tree/master/lazyLoad\r\ndcloud https://ext.dcloud.net.cn/plugin?id=495\r\nvar\n\nMyLazyLoad = /*#__PURE__*/function () {function MyLazyLoad() {_classCallCheck(this, MyLazyLoad);}_createClass(MyLazyLoad, [{ key: \"init\",\n    // 初始化，获取并设置 scroll 标签的 height或width\n    value: function () {var _init = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee(scrollId) {var isHorizontal,_ref,width,height,_args = arguments;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:isHorizontal = _args.length > 1 && _args[1] !== undefined ? _args[1] : false;\n                if (scrollId.indexOf('#') !== 0) {\n                  _.error(\"请填写scroll的样式id\");\n                }_context.next = 4;return (\n\n                  _.getScrollArgs(scrollId));case 4:_ref = _context.sent;width = _ref.width;height = _ref.height;\n\n                if (isHorizontal) {\n                  _.scroll.w = width;\n                } else {\n                  _.scroll.h = height;\n                }\n\n                _.setIsHorizontal(isHorizontal);\n                _.loadImg();case 10:case \"end\":return _context.stop();}}}, _callee, this);}));function init(_x) {return _init.apply(this, arguments);}return init;}()\n\n\n    // 获取全局变量\n  }, { key: \"getConfig\", value: function getConfig() {\n      return _.config;\n    }\n\n    // 设置全局变量\n  }, { key: \"setConfig\", value: function setConfig(config) {\n      _.config = _objectSpread({},\n      _.config,\n      config);\n\n    }\n\n    // 监听滚动条2\n  }, { key: \"scroll\", value: function scroll() {\n      _.loadImg();\n    }\n\n    // 添加 图片对象\n  }, { key: \"addImg\", value: function addImg(imgArgs) {\n      _.loadImgArr.push(imgArgs);\n    }\n\n    // 清除\n  }, { key: \"destroy\", value: function destroy() {\n      _.clearImg();\n    } }]);return MyLazyLoad;}();\n\n\nvar _ = {\n  config: {\n    // 图片加载错误替换的对象\n    error: {},\n\n    // 图片加载中替换的对象\n    loading: {},\n\n    // 预加载\n    preLoadNum: 0,\n\n    // 图片加载间隔(停顿)时间\n    intervalTime: 0,\n\n    // 最少过度动画时间\n    minLoadAnimeTime: 0 },\n\n\n  // 当前scroll的width或者height\n  scroll: {\n    w: 0,\n    h: 0 },\n\n\n  // 是否横屏加载\n  isHorizontal: false,\n\n  // 需要加载的图片\n  loadImgArr: [],\n\n  setIsHorizontal: function setIsHorizontal(bool) {\n    _.isHorizontal = bool;\n  },\n\n  // 获取 scroll-view 标签的数据\n  getScrollArgs: function getScrollArgs(id) {\n    return _.getNodeList(id).then(function (res) {\n      if (res.length === 0) {\n        _.error(\"scroll样式id错误或未能获取当前属性\");\n      }\n\n      // 原生scroll h5\n      var _res = _slicedToArray(\n\n\n\n\n\n\n\n      res, 1),_res$ = _res[0],width = _res$.width,height = _res$.height;\n\n      return { width: width, height: height };\n\n    }).catch(function (err) {\n      _.error(err);\n    });\n  },\n\n  // 清空 图片对象\n  clearImg: function clearImg() {\n    _.loadImgArr = [];\n  },\n\n  // 加载 图片对象\n  loadImg: function () {var _loadImg = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee2() {var pos, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, img;return _regenerator.default.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:\n              pos = 0;_iteratorNormalCompletion = true;_didIteratorError = false;_iteratorError = undefined;_context2.prev = 4;_iterator =\n\n              _.loadImgArr[Symbol.iterator]();case 6:if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {_context2.next = 17;break;}img = _step.value;_context2.next = 10;return (\n                _.loadImgIsComplete(img));case 10:_context2.t0 = _context2.sent;if (!(_context2.t0 === false)) {_context2.next = 13;break;}return _context2.abrupt(\"break\", 17);case 13:\n              pos++;case 14:_iteratorNormalCompletion = true;_context2.next = 6;break;case 17:_context2.next = 23;break;case 19:_context2.prev = 19;_context2.t1 = _context2[\"catch\"](4);_didIteratorError = true;_iteratorError = _context2.t1;case 23:_context2.prev = 23;_context2.prev = 24;if (!_iteratorNormalCompletion && _iterator.return != null) {_iterator.return();}case 26:_context2.prev = 26;if (!_didIteratorError) {_context2.next = 29;break;}throw _iteratorError;case 29:return _context2.finish(26);case 30:return _context2.finish(23);case 31:\n\n\n              _.removeImg(pos);case 32:case \"end\":return _context2.stop();}}}, _callee2, this, [[4, 19, 23, 31], [24,, 26, 30]]);}));function loadImg() {return _loadImg.apply(this, arguments);}return loadImg;}(),\n\n\n  // 图片是否加载完成\n  loadImgIsComplete: function loadImgIsComplete(item) {\n    return _.checkNeedLoadImgNode(item).then(item.fn).catch(function () {return false;});\n  },\n\n  // 删除 图片对象\n  removeImg: function removeImg(index) {\n    _.loadImgArr.splice(0, index);\n  },\n\n  // 获取 nodeList 节点\n  getNodeList: function getNodeList(selector) {var that = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return new Promise(function (resolve) {\n      var view = uni.createSelectorQuery();\n\n      that && (view = view.in(that));\n      view.selectAll(selector).\n      fields({\n        rect: true,\n        size: true },\n      function (data) {\n        resolve(data);\n      }).exec();\n    });\n  },\n\n  // 检查需要加载图片的节点\n  checkNeedLoadImgNode: function checkNeedLoadImgNode(item) {\n    return new Promise(function (resolve, reject) {\n      _.getNodeList('#' + item.uuid, item.that).then(function (res) {\n        if (res.length === 0) return;var _res2 = _slicedToArray(\n\n        res, 1),_res2$ = _res2[0],top = _res2$.top,left = _res2$.left;\n\n        if (!_.horizontal && top - _.config.preLoadNum <= _.scroll.h ||\n        _.horizontal && left - _.config.preLoadNum <= _.scroll.w) {\n          return resolve();\n        }\n\n        reject();\n      });\n    });\n  },\n\n  // 抛出错误\n  error: function error(str) {\n    throw \"[lazyLoad error]: \" + str;\n  } };\n\n\n// 挂载到全局->window对象（单例）(会造成全局污染，或者也可以挂载到vue的prototype)\nif (!global.$lazyLoad) global.$lazyLoad = new MyLazyLoad();var _default =\n\nglobal.$lazyLoad;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"], __webpack_require__(/*! ./../../../../../../迅雷下载/HBuilderX.2.2.2.20190816.full/HBuilderX/plugins/uniapp-cli/node_modules/webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///384\n");

/***/ }),

/***/ 385:
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! regenerator-runtime */ 386);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQixtQkFBTyxDQUFDLDhCQUFxQiIsImZpbGUiOiIzODUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWdlbmVyYXRvci1ydW50aW1lXCIpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///385\n");

/***/ }),

/***/ 386:
/*!************************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime-module.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() {\n  return this || (typeof self === \"object\" && self);\n})() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = __webpack_require__(/*! ./runtime */ 387);\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlCQUFpQixtQkFBTyxDQUFDLG9CQUFXOztBQUVwQztBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSIsImZpbGUiOiIzODYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8vIFRoaXMgbWV0aG9kIG9mIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdCBuZWVkcyB0byBiZVxuLy8ga2VwdCBpZGVudGljYWwgdG8gdGhlIHdheSBpdCBpcyBvYnRhaW5lZCBpbiBydW50aW1lLmpzXG52YXIgZyA9IChmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMgfHwgKHR5cGVvZiBzZWxmID09PSBcIm9iamVjdFwiICYmIHNlbGYpO1xufSkoKSB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG5cbi8vIFVzZSBgZ2V0T3duUHJvcGVydHlOYW1lc2AgYmVjYXVzZSBub3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgY2FsbGluZ1xuLy8gYGhhc093blByb3BlcnR5YCBvbiB0aGUgZ2xvYmFsIGBzZWxmYCBvYmplY3QgaW4gYSB3b3JrZXIuIFNlZSAjMTgzLlxudmFyIGhhZFJ1bnRpbWUgPSBnLnJlZ2VuZXJhdG9yUnVudGltZSAmJlxuICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhnKS5pbmRleE9mKFwicmVnZW5lcmF0b3JSdW50aW1lXCIpID49IDA7XG5cbi8vIFNhdmUgdGhlIG9sZCByZWdlbmVyYXRvclJ1bnRpbWUgaW4gY2FzZSBpdCBuZWVkcyB0byBiZSByZXN0b3JlZCBsYXRlci5cbnZhciBvbGRSdW50aW1lID0gaGFkUnVudGltZSAmJiBnLnJlZ2VuZXJhdG9yUnVudGltZTtcblxuLy8gRm9yY2UgcmVldmFsdXRhdGlvbiBvZiBydW50aW1lLmpzLlxuZy5yZWdlbmVyYXRvclJ1bnRpbWUgPSB1bmRlZmluZWQ7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vcnVudGltZVwiKTtcblxuaWYgKGhhZFJ1bnRpbWUpIHtcbiAgLy8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgcnVudGltZS5cbiAgZy5yZWdlbmVyYXRvclJ1bnRpbWUgPSBvbGRSdW50aW1lO1xufSBlbHNlIHtcbiAgLy8gUmVtb3ZlIHRoZSBnbG9iYWwgcHJvcGVydHkgYWRkZWQgYnkgcnVudGltZS5qcy5cbiAgdHJ5IHtcbiAgICBkZWxldGUgZy5yZWdlbmVyYXRvclJ1bnRpbWU7XG4gIH0gY2F0Y2goZSkge1xuICAgIGcucmVnZW5lcmF0b3JSdW50aW1lID0gdW5kZWZpbmVkO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///386\n");

/***/ }),

/***/ 387:
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() {\n    return this || (typeof self === \"object\" && self);\n  })() || Function(\"return this\")()\n);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///387\n");

/***/ }),

/***/ 39:
/*!**********************************************************!*\
  !*** D:/1zxyWork/daibeih5/daibei3.0/common/linq/linq.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__; /*--------------------------------------------------------------------------\n               * linq.js - LINQ for JavaScript\n               * licensed under MIT License\n               *------------------------------------------------------------------------*/\n\n(function (root, undefined) {\n  // ReadOnly Function\n  var Functions = {\n    Identity: function Identity(x) {return x;},\n    True: function True() {return true;},\n    Blank: function Blank() {} };\n\n\n  // const Type\n  var Types = {\n    Boolean: typeof true,\n    Number: typeof 0,\n    String: typeof \"\",\n    Object: typeof {},\n    Undefined: typeof undefined,\n    Function: typeof function () {} };\n\n\n  // createLambda cache\n  var funcCache = { \"\": Functions.Identity };\n\n  // private utility methods\n  var Utils = {\n    // Create anonymous function from lambda expression string\n    createLambda: function createLambda(expression) {\n      if (expression == null) return Functions.Identity;\n      if (typeof expression === Types.String) {\n        // get from cache\n        var f = funcCache[expression];\n        if (f != null) {\n          return f;\n        }\n\n        if (expression.indexOf(\"=>\") === -1) {\n          var regexp = new RegExp(\"[$]+\", \"g\");\n\n          var maxLength = 0;\n          var match;\n          while ((match = regexp.exec(expression)) != null) {\n            var paramNumber = match[0].length;\n            if (paramNumber > maxLength) {\n              maxLength = paramNumber;\n            }\n          }\n\n          var argArray = [];\n          for (var i = 1; i <= maxLength; i++) {\n            var dollar = \"\";\n            for (var j = 0; j < i; j++) {\n              dollar += \"$\";\n            }\n            argArray.push(dollar);\n          }\n\n          var args = Array.prototype.join.call(argArray, \",\");\n\n          f = new Function(args, \"return \" + expression);\n          funcCache[expression] = f;\n          return f;\n        } else\n        {\n          var expr = expression.match(/^[(\\s]*([^()]*?)[)\\s]*=>(.*)/);\n          f = new Function(expr[1], \"return \" + expr[2]);\n          funcCache[expression] = f;\n          return f;\n        }\n      }\n      return expression;\n    },\n\n    isIEnumerable: function isIEnumerable(obj) {\n      if (typeof Enumerator !== Types.Undefined) {\n        try {\n          new Enumerator(obj); // check JScript(IE)'s Enumerator\n          return true;\n        }\n        catch (e) {}\n      }\n\n      return false;\n    },\n\n    // IE8's defineProperty is defined but cannot use, therefore check defineProperties\n    defineProperty: Object.defineProperties != null ?\n    function (target, methodName, value) {\n      Object.defineProperty(target, methodName, {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: value });\n\n    } :\n    function (target, methodName, value) {\n      target[methodName] = value;\n    },\n\n    compare: function compare(a, b) {\n      return a === b ? 0 :\n      a > b ? 1 :\n      -1;\n    },\n\n    dispose: function dispose(obj) {\n      if (obj != null) obj.dispose();\n    },\n\n    hasNativeIteratorSupport: function hasNativeIteratorSupport() {\n      return typeof Symbol !== 'undefined' && typeof Symbol.iterator !== 'undefined';\n    } };\n\n\n  // IEnumerator State\n  var State = { Before: 0, Running: 1, After: 2 };\n\n  // \"Enumerator\" is conflict JScript's \"Enumerator\"\n  var IEnumerator = function IEnumerator(initialize, tryGetNext, dispose) {\n    var yielder = new Yielder();\n    var state = State.Before;\n\n    this.current = yielder.current;\n\n    this.moveNext = function () {\n      try {\n        switch (state) {\n          case State.Before:\n            state = State.Running;\n            initialize();\n          // fall through\n          case State.Running:\n            if (tryGetNext.apply(yielder)) {\n              return true;\n            } else\n            {\n              this.dispose();\n              return false;\n            }\n          case State.After:\n            return false;}\n\n      }\n      catch (e) {\n        this.dispose();\n        throw e;\n      }\n    };\n\n    this.dispose = function () {\n      if (state != State.Running) return;\n\n      try {\n        dispose();\n      } finally\n      {\n        state = State.After;\n      }\n    };\n  };\n\n  // for tryGetNext\n  var Yielder = function Yielder() {\n    var current = null;\n    this.current = function () {return current;};\n    this.yieldReturn = function (value) {\n      current = value;\n      return true;\n    };\n    this.yieldBreak = function () {\n      return false;\n    };\n  };\n\n  // Enumerable constuctor\n  var Enumerable = function Enumerable(getEnumerator) {\n    this.getEnumerator = getEnumerator;\n  };\n\n  // Utility\n\n  Enumerable.Utils = {}; // container\n\n  Enumerable.Utils.createLambda = function (expression) {\n    return Utils.createLambda(expression);\n  };\n\n  Enumerable.Utils.createEnumerable = function (getEnumerator) {\n    return new Enumerable(getEnumerator);\n  };\n\n  Enumerable.Utils.createEnumerator = function (initialize, tryGetNext, dispose) {\n    return new IEnumerator(initialize, tryGetNext, dispose);\n  };\n\n  Enumerable.Utils.extendTo = function (type) {\n    var typeProto = type.prototype;\n    var enumerableProto;\n\n    if (type === Array) {\n      enumerableProto = ArrayEnumerable.prototype;\n      Utils.defineProperty(typeProto, \"getSource\", function () {\n        return this;\n      });\n    } else\n    {\n      enumerableProto = Enumerable.prototype;\n      Utils.defineProperty(typeProto, \"getEnumerator\", function () {\n        return Enumerable.from(this).getEnumerator();\n      });\n    }\n\n    for (var methodName in enumerableProto) {\n      var func = enumerableProto[methodName];\n\n      // already extended\n      if (typeProto[methodName] == func) continue;\n\n      // already defined(example Array#reverse/join/forEach...)\n      if (typeProto[methodName] != null) {\n        methodName = methodName + \"ByLinq\";\n        if (typeProto[methodName] == func) continue; // recheck\n      }\n\n      if (func instanceof Function) {\n        Utils.defineProperty(typeProto, methodName, func);\n      }\n    }\n  };\n\n  // Generator\n\n  Enumerable.choice = function () // variable argument\n  {\n    var args = arguments;\n\n    return new Enumerable(function () {\n      return new IEnumerator(\n      function () {\n        args = args[0] instanceof Array ? args[0] :\n        args[0].getEnumerator != null ? args[0].toArray() :\n        args;\n      },\n      function () {\n        return this.yieldReturn(args[Math.floor(Math.random() * args.length)]);\n      },\n      Functions.Blank);\n    });\n  };\n\n  Enumerable.cycle = function () // variable argument\n  {\n    var args = arguments;\n\n    return new Enumerable(function () {\n      var index = 0;\n      return new IEnumerator(\n      function () {\n        args = args[0] instanceof Array ? args[0] :\n        args[0].getEnumerator != null ? args[0].toArray() :\n        args;\n      },\n      function () {\n        if (index >= args.length) index = 0;\n        return this.yieldReturn(args[index++]);\n      },\n      Functions.Blank);\n    });\n  };\n\n  Enumerable.empty = function () {\n    return new Enumerable(function () {\n      return new IEnumerator(\n      Functions.Blank,\n      function () {return false;},\n      Functions.Blank);\n    });\n  };\n\n  Enumerable.from = function (obj) {\n    if (obj == null) {\n      return Enumerable.empty();\n    }\n    if (obj instanceof Enumerable) {\n      return obj;\n    }\n    if (typeof obj == Types.Number || typeof obj == Types.Boolean) {\n      return Enumerable.repeat(obj, 1);\n    }\n    if (typeof obj == Types.String) {\n      return new Enumerable(function () {\n        var index = 0;\n        return new IEnumerator(\n        Functions.Blank,\n        function () {\n          return index < obj.length ? this.yieldReturn(obj.charAt(index++)) : false;\n        },\n        Functions.Blank);\n      });\n    }\n    if (typeof obj != Types.Function) {\n      // array or array like object\n      if (typeof obj.length == Types.Number) {\n        return new ArrayEnumerable(obj);\n      }\n\n      // JScript's IEnumerable\n      if (!(obj instanceof Object) && Utils.isIEnumerable(obj)) {\n        return new Enumerable(function () {\n          var isFirst = true;\n          var enumerator;\n          return new IEnumerator(\n          function () {enumerator = new Enumerator(obj);},\n          function () {\n            if (isFirst) isFirst = false;else\n            enumerator.moveNext();\n\n            return enumerator.atEnd() ? false : this.yieldReturn(enumerator.item());\n          },\n          Functions.Blank);\n        });\n      }\n\n      // WinMD IIterable<T>\n      if (typeof Windows === Types.Object && typeof obj.first === Types.Function) {\n        return new Enumerable(function () {\n          var isFirst = true;\n          var enumerator;\n          return new IEnumerator(\n          function () {enumerator = obj.first();},\n          function () {\n            if (isFirst) isFirst = false;else\n            enumerator.moveNext();\n\n            return enumerator.hasCurrent ? this.yieldReturn(enumerator.current) : this.yieldBreak();\n          },\n          Functions.Blank);\n        });\n      }\n    }\n\n    // case function/object : Create keyValuePair[]\n    return new Enumerable(function () {\n      var array = [];\n      var index = 0;\n\n      return new IEnumerator(\n      function () {\n        for (var key in obj) {\n          var value = obj[key];\n          if (!(value instanceof Function) && Object.prototype.hasOwnProperty.call(obj, key)) {\n            array.push({ key: key, value: value });\n          }\n        }\n      },\n      function () {\n        return index < array.length ?\n        this.yieldReturn(array[index++]) :\n        false;\n      },\n      Functions.Blank);\n    });\n  },\n\n  Enumerable.make = function (element) {\n    return Enumerable.repeat(element, 1);\n  };\n\n  // Overload:function(input, pattern)\n  // Overload:function(input, pattern, flags)\n  Enumerable.matches = function (input, pattern, flags) {\n    if (flags == null) flags = \"\";\n    if (pattern instanceof RegExp) {\n      flags += pattern.ignoreCase ? \"i\" : \"\";\n      flags += pattern.multiline ? \"m\" : \"\";\n      pattern = pattern.source;\n    }\n    if (flags.indexOf(\"g\") === -1) flags += \"g\";\n\n    return new Enumerable(function () {\n      var regex;\n      return new IEnumerator(\n      function () {regex = new RegExp(pattern, flags);},\n      function () {\n        var match = regex.exec(input);\n        return match ? this.yieldReturn(match) : false;\n      },\n      Functions.Blank);\n    });\n  };\n\n  // Overload:function(start, count)\n  // Overload:function(start, count, step)\n  Enumerable.range = function (start, count, step) {\n    if (step == null) step = 1;\n\n    return new Enumerable(function () {\n      var value;\n      var index = 0;\n\n      return new IEnumerator(\n      function () {value = start - step;},\n      function () {\n        return index++ < count ?\n        this.yieldReturn(value += step) :\n        this.yieldBreak();\n      },\n      Functions.Blank);\n    });\n  };\n\n  // Overload:function(start, count)\n  // Overload:function(start, count, step)\n  Enumerable.rangeDown = function (start, count, step) {\n    if (step == null) step = 1;\n\n    return new Enumerable(function () {\n      var value;\n      var index = 0;\n\n      return new IEnumerator(\n      function () {value = start + step;},\n      function () {\n        return index++ < count ?\n        this.yieldReturn(value -= step) :\n        this.yieldBreak();\n      },\n      Functions.Blank);\n    });\n  };\n\n  // Overload:function(start, to)\n  // Overload:function(start, to, step)\n  Enumerable.rangeTo = function (start, to, step) {\n    if (step == null) step = 1;\n\n    if (start < to) {\n      return new Enumerable(function () {\n        var value;\n\n        return new IEnumerator(\n        function () {value = start - step;},\n        function () {\n          var next = value += step;\n          return next <= to ?\n          this.yieldReturn(next) :\n          this.yieldBreak();\n        },\n        Functions.Blank);\n      });\n    } else\n    {\n      return new Enumerable(function () {\n        var value;\n\n        return new IEnumerator(\n        function () {value = start + step;},\n        function () {\n          var next = value -= step;\n          return next >= to ?\n          this.yieldReturn(next) :\n          this.yieldBreak();\n        },\n        Functions.Blank);\n      });\n    }\n  };\n\n  // Overload:function(element)\n  // Overload:function(element, count)\n  Enumerable.repeat = function (element, count) {\n    if (count != null) return Enumerable.repeat(element).take(count);\n\n    return new Enumerable(function () {\n      return new IEnumerator(\n      Functions.Blank,\n      function () {return this.yieldReturn(element);},\n      Functions.Blank);\n    });\n  };\n\n  Enumerable.repeatWithFinalize = function (initializer, finalizer) {\n    initializer = Utils.createLambda(initializer);\n    finalizer = Utils.createLambda(finalizer);\n\n    return new Enumerable(function () {\n      var element;\n      return new IEnumerator(\n      function () {element = initializer();},\n      function () {return this.yieldReturn(element);},\n      function () {\n        if (element != null) {\n          finalizer(element);\n          element = null;\n        }\n      });\n    });\n  };\n\n  // Overload:function(func)\n  // Overload:function(func, count)\n  Enumerable.generate = function (func, count) {\n    if (count != null) return Enumerable.generate(func).take(count);\n    func = Utils.createLambda(func);\n\n    return new Enumerable(function () {\n      return new IEnumerator(\n      Functions.Blank,\n      function () {return this.yieldReturn(func());},\n      Functions.Blank);\n    });\n  };\n\n  // Overload:function()\n  // Overload:function(start)\n  // Overload:function(start, step)\n  Enumerable.toInfinity = function (start, step) {\n    if (start == null) start = 0;\n    if (step == null) step = 1;\n\n    return new Enumerable(function () {\n      var value;\n      return new IEnumerator(\n      function () {value = start - step;},\n      function () {return this.yieldReturn(value += step);},\n      Functions.Blank);\n    });\n  };\n\n  // Overload:function()\n  // Overload:function(start)\n  // Overload:function(start, step)\n  Enumerable.toNegativeInfinity = function (start, step) {\n    if (start == null) start = 0;\n    if (step == null) step = 1;\n\n    return new Enumerable(function () {\n      var value;\n      return new IEnumerator(\n      function () {value = start + step;},\n      function () {return this.yieldReturn(value -= step);},\n      Functions.Blank);\n    });\n  };\n\n  Enumerable.unfold = function (seed, func) {\n    func = Utils.createLambda(func);\n\n    return new Enumerable(function () {\n      var isFirst = true;\n      var value;\n      return new IEnumerator(\n      Functions.Blank,\n      function () {\n        if (isFirst) {\n          isFirst = false;\n          value = seed;\n          return this.yieldReturn(value);\n        }\n        value = func(value);\n        return this.yieldReturn(value);\n      },\n      Functions.Blank);\n    });\n  };\n\n  Enumerable.defer = function (enumerableFactory) {\n\n    return new Enumerable(function () {\n      var enumerator;\n\n      return new IEnumerator(\n      function () {enumerator = Enumerable.from(enumerableFactory()).getEnumerator();},\n      function () {\n        return enumerator.moveNext() ?\n        this.yieldReturn(enumerator.current()) :\n        this.yieldBreak();\n      },\n      function () {\n        Utils.dispose(enumerator);\n      });\n    });\n  };\n\n  // Extension Methods\n\n  /* Projection and Filtering Methods */\n\n  // Overload:function(func)\n  // Overload:function(func, resultSelector<element>)\n  // Overload:function(func, resultSelector<element, nestLevel>)\n  Enumerable.prototype.traverseBreadthFirst = function (func, resultSelector) {\n    var source = this;\n    func = Utils.createLambda(func);\n    resultSelector = Utils.createLambda(resultSelector);\n\n    return new Enumerable(function () {\n      var enumerator;\n      var nestLevel = 0;\n      var buffer = [];\n\n      return new IEnumerator(\n      function () {enumerator = source.getEnumerator();},\n      function () {\n        while (true) {\n          if (enumerator.moveNext()) {\n            buffer.push(enumerator.current());\n            return this.yieldReturn(resultSelector(enumerator.current(), nestLevel));\n          }\n\n          var next = Enumerable.from(buffer).selectMany(function (x) {return func(x);});\n          if (!next.any()) {\n            return false;\n          } else\n          {\n            nestLevel++;\n            buffer = [];\n            Utils.dispose(enumerator);\n            enumerator = next.getEnumerator();\n          }\n        }\n      },\n      function () {Utils.dispose(enumerator);});\n    });\n  };\n\n  // Overload:function(func)\n  // Overload:function(func, resultSelector<element>)\n  // Overload:function(func, resultSelector<element, nestLevel>)\n  Enumerable.prototype.traverseDepthFirst = function (func, resultSelector) {\n    var source = this;\n    func = Utils.createLambda(func);\n    resultSelector = Utils.createLambda(resultSelector);\n\n    return new Enumerable(function () {\n      var enumeratorStack = [];\n      var enumerator;\n\n      return new IEnumerator(\n      function () {enumerator = source.getEnumerator();},\n      function () {\n        while (true) {\n          if (enumerator.moveNext()) {\n            var value = resultSelector(enumerator.current(), enumeratorStack.length);\n            enumeratorStack.push(enumerator);\n            enumerator = Enumerable.from(func(enumerator.current())).getEnumerator();\n            return this.yieldReturn(value);\n          }\n\n          if (enumeratorStack.length <= 0) return false;\n          Utils.dispose(enumerator);\n          enumerator = enumeratorStack.pop();\n        }\n      },\n      function () {\n        try {\n          Utils.dispose(enumerator);\n        } finally\n        {\n          Enumerable.from(enumeratorStack).forEach(function (s) {s.dispose();});\n        }\n      });\n    });\n  };\n\n  Enumerable.prototype.flatten = function () {\n    var source = this;\n\n    return new Enumerable(function () {\n      var enumerator;\n      var middleEnumerator = null;\n\n      return new IEnumerator(\n      function () {enumerator = source.getEnumerator();},\n      function () {\n        while (true) {\n          if (middleEnumerator != null) {\n            if (middleEnumerator.moveNext()) {\n              return this.yieldReturn(middleEnumerator.current());\n            } else\n            {\n              middleEnumerator = null;\n            }\n          }\n\n          if (enumerator.moveNext()) {\n            if (enumerator.current() instanceof Array) {\n              Utils.dispose(middleEnumerator);\n              middleEnumerator = Enumerable.from(enumerator.current()).\n              selectMany(Functions.Identity).\n              flatten().\n              getEnumerator();\n              continue;\n            } else\n            {\n              return this.yieldReturn(enumerator.current());\n            }\n          }\n\n          return false;\n        }\n      },\n      function () {\n        try {\n          Utils.dispose(enumerator);\n        } finally\n        {\n          Utils.dispose(middleEnumerator);\n        }\n      });\n    });\n  };\n\n  Enumerable.prototype.pairwise = function (selector) {\n    var source = this;\n    selector = Utils.createLambda(selector);\n\n    return new Enumerable(function () {\n      var enumerator;\n\n      return new IEnumerator(\n      function () {\n        enumerator = source.getEnumerator();\n        enumerator.moveNext();\n      },\n      function () {\n        var prev = enumerator.current();\n        return enumerator.moveNext() ?\n        this.yieldReturn(selector(prev, enumerator.current())) :\n        false;\n      },\n      function () {Utils.dispose(enumerator);});\n    });\n  };\n\n  // Overload:function(func)\n  // Overload:function(seed,func<value,element>)\n  Enumerable.prototype.scan = function (seed, func) {\n    var isUseSeed;\n    if (func == null) {\n      func = Utils.createLambda(seed); // arguments[0]\n      isUseSeed = false;\n    } else {\n      func = Utils.createLambda(func);\n      isUseSeed = true;\n    }\n    var source = this;\n\n    return new Enumerable(function () {\n      var enumerator;\n      var value;\n      var isFirst = true;\n\n      return new IEnumerator(\n      function () {enumerator = source.getEnumerator();},\n      function () {\n        if (isFirst) {\n          isFirst = false;\n          if (!isUseSeed) {\n            if (enumerator.moveNext()) {\n              return this.yieldReturn(value = enumerator.current());\n            }\n          } else\n          {\n            return this.yieldReturn(value = seed);\n          }\n        }\n\n        return enumerator.moveNext() ?\n        this.yieldReturn(value = func(value, enumerator.current())) :\n        false;\n      },\n      function () {Utils.dispose(enumerator);});\n    });\n  };\n\n  // Overload:function(selector<element>)\n  // Overload:function(selector<element,index>)\n  Enumerable.prototype.select = function (selector) {\n    selector = Utils.createLambda(selector);\n\n    if (selector.length <= 1) {\n      return new WhereSelectEnumerable(this, null, selector);\n    } else\n    {\n      var source = this;\n\n      return new Enumerable(function () {\n        var enumerator;\n        var index = 0;\n\n        return new IEnumerator(\n        function () {enumerator = source.getEnumerator();},\n        function () {\n          return enumerator.moveNext() ?\n          this.yieldReturn(selector(enumerator.current(), index++)) :\n          false;\n        },\n        function () {Utils.dispose(enumerator);});\n      });\n    }\n  };\n\n  // Overload:function(collectionSelector<element>)\n  // Overload:function(collectionSelector<element,index>)\n  // Overload:function(collectionSelector<element>,resultSelector)\n  // Overload:function(collectionSelector<element,index>,resultSelector)\n  Enumerable.prototype.selectMany = function (collectionSelector, resultSelector) {\n    var source = this;\n    collectionSelector = Utils.createLambda(collectionSelector);\n    if (resultSelector == null) resultSelector = function resultSelector(a, b) {return b;};\n    resultSelector = Utils.createLambda(resultSelector);\n\n    return new Enumerable(function () {\n      var enumerator;\n      var middleEnumerator = undefined;\n      var index = 0;\n\n      return new IEnumerator(\n      function () {enumerator = source.getEnumerator();},\n      function () {\n        if (middleEnumerator === undefined) {\n          if (!enumerator.moveNext()) return false;\n        }\n        do {\n          if (middleEnumerator == null) {\n            var middleSeq = collectionSelector(enumerator.current(), index++);\n            middleEnumerator = Enumerable.from(middleSeq).getEnumerator();\n          }\n          if (middleEnumerator.moveNext()) {\n            return this.yieldReturn(resultSelector(enumerator.current(), middleEnumerator.current()));\n          }\n          Utils.dispose(middleEnumerator);\n          middleEnumerator = null;\n        } while (enumerator.moveNext());\n        return false;\n      },\n      function () {\n        try {\n          Utils.dispose(enumerator);\n        } finally\n        {\n          Utils.dispose(middleEnumerator);\n        }\n      });\n    });\n  };\n\n  // Overload:function(predicate<element>)\n  // Overload:function(predicate<element,index>)\n  Enumerable.prototype.where = function (predicate) {\n    predicate = Utils.createLambda(predicate);\n\n    if (predicate.length <= 1) {\n      return new WhereEnumerable(this, predicate);\n    } else\n    {\n      var source = this;\n\n      return new Enumerable(function () {\n        var enumerator;\n        var index = 0;\n\n        return new IEnumerator(\n        function () {enumerator = source.getEnumerator();},\n        function () {\n          while (enumerator.moveNext()) {\n            if (predicate(enumerator.current(), index++)) {\n              return this.yieldReturn(enumerator.current());\n            }\n          }\n          return false;\n        },\n        function () {Utils.dispose(enumerator);});\n      });\n    }\n  };\n\n\n  // Overload:function(selector<element>)\n  // Overload:function(selector<element,index>)\n  Enumerable.prototype.choose = function (selector) {\n    selector = Utils.createLambda(selector);\n    var source = this;\n\n    return new Enumerable(function () {\n      var enumerator;\n      var index = 0;\n\n      return new IEnumerator(\n      function () {enumerator = source.getEnumerator();},\n      function () {\n        while (enumerator.moveNext()) {\n          var result = selector(enumerator.current(), index++);\n          if (result != null) {\n            return this.yieldReturn(result);\n          }\n        }\n        return this.yieldBreak();\n      },\n      function () {Utils.dispose(enumerator);});\n    });\n  };\n\n  Enumerable.prototype.ofType = function (type) {\n    var typeName;\n    switch (type) {\n      case Number:\n        typeName = Types.Number;\n        break;\n      case String:\n        typeName = Types.String;\n        break;\n      case Boolean:\n        typeName = Types.Boolean;\n        break;\n      case Function:\n        typeName = Types.Function;\n        break;\n      default:\n        typeName = null;\n        break;}\n\n    return typeName === null ?\n    this.where(function (x) {return x instanceof type;}) :\n    this.where(function (x) {return typeof x === typeName;});\n  };\n\n  // mutiple arguments, last one is selector, others are enumerable\n  Enumerable.prototype.zip = function () {\n    var args = arguments;\n    var selector = Utils.createLambda(arguments[arguments.length - 1]);\n\n    var source = this;\n    // optimized case:argument is 2\n    if (arguments.length == 2) {\n      var second = arguments[0];\n\n      return new Enumerable(function () {\n        var firstEnumerator;\n        var secondEnumerator;\n        var index = 0;\n\n        return new IEnumerator(\n        function () {\n          firstEnumerator = source.getEnumerator();\n          secondEnumerator = Enumerable.from(second).getEnumerator();\n        },\n        function () {\n          if (firstEnumerator.moveNext() && secondEnumerator.moveNext()) {\n            return this.yieldReturn(selector(firstEnumerator.current(), secondEnumerator.current(), index++));\n          }\n          return false;\n        },\n        function () {\n          try {\n            Utils.dispose(firstEnumerator);\n          } finally {\n            Utils.dispose(secondEnumerator);\n          }\n        });\n      });\n    } else\n    {\n      return new Enumerable(function () {\n        var enumerators;\n        var index = 0;\n\n        return new IEnumerator(\n        function () {\n          var array = Enumerable.make(source).\n          concat(Enumerable.from(args).takeExceptLast().select(Enumerable.from)).\n          select(function (x) {return x.getEnumerator();}).\n          toArray();\n          enumerators = Enumerable.from(array);\n        },\n        function () {\n          if (enumerators.all(function (x) {return x.moveNext();})) {\n            var array = enumerators.\n            select(function (x) {return x.current();}).\n            toArray();\n            array.push(index++);\n            return this.yieldReturn(selector.apply(null, array));\n          } else\n          {\n            return this.yieldBreak();\n          }\n        },\n        function () {\n          Enumerable.from(enumerators).forEach(Utils.dispose);\n        });\n      });\n    }\n  };\n\n  // mutiple arguments\n  Enumerable.prototype.merge = function () {\n    var args = arguments;\n    var source = this;\n\n    return new Enumerable(function () {\n      var enumerators;\n      var index = -1;\n\n      return new IEnumerator(\n      function () {\n        enumerators = Enumerable.make(source).\n        concat(Enumerable.from(args).select(Enumerable.from)).\n        select(function (x) {return x.getEnumerator();}).\n        toArray();\n      },\n      function () {\n        while (enumerators.length > 0) {\n          index = index >= enumerators.length - 1 ? 0 : index + 1;\n          var enumerator = enumerators[index];\n\n          if (enumerator.moveNext()) {\n            return this.yieldReturn(enumerator.current());\n          } else\n          {\n            enumerator.dispose();\n            enumerators.splice(index--, 1);\n          }\n        }\n        return this.yieldBreak();\n      },\n      function () {\n        Enumerable.from(enumerators).forEach(Utils.dispose);\n      });\n    });\n  };\n\n  /* Join Methods */\n\n  // Overload:function (inner, outerKeySelector, innerKeySelector, resultSelector)\n  // Overload:function (inner, outerKeySelector, innerKeySelector, resultSelector, compareSelector)\n  Enumerable.prototype.join = function (inner, outerKeySelector, innerKeySelector, resultSelector, compareSelector) {\n    outerKeySelector = Utils.createLambda(outerKeySelector);\n    innerKeySelector = Utils.createLambda(innerKeySelector);\n    resultSelector = Utils.createLambda(resultSelector);\n    compareSelector = Utils.createLambda(compareSelector);\n    var source = this;\n\n    return new Enumerable(function () {\n      var outerEnumerator;\n      var lookup;\n      var innerElements = null;\n      var innerCount = 0;\n\n      return new IEnumerator(\n      function () {\n        outerEnumerator = source.getEnumerator();\n        lookup = Enumerable.from(inner).toLookup(innerKeySelector, Functions.Identity, compareSelector);\n      },\n      function () {\n        while (true) {\n          if (innerElements != null) {\n            var innerElement = innerElements[innerCount++];\n            if (innerElement !== undefined) {\n              return this.yieldReturn(resultSelector(outerEnumerator.current(), innerElement));\n            }\n\n            innerElement = null;\n            innerCount = 0;\n          }\n\n          if (outerEnumerator.moveNext()) {\n            var key = outerKeySelector(outerEnumerator.current());\n            innerElements = lookup.get(key).toArray();\n          } else {\n            return false;\n          }\n        }\n      },\n      function () {Utils.dispose(outerEnumerator);});\n    });\n  };\n\n  // Overload:function (inner, outerKeySelector, innerKeySelector, resultSelector)\n  // Overload:function (inner, outerKeySelector, innerKeySelector, resultSelector, compareSelector)\n  Enumerable.prototype.groupJoin = function (inner, outerKeySelector, innerKeySelector, resultSelector, compareSelector) {\n    outerKeySelector = Utils.createLambda(outerKeySelector);\n    innerKeySelector = Utils.createLambda(innerKeySelector);\n    resultSelector = Utils.createLambda(resultSelector);\n    compareSelector = Utils.createLambda(compareSelector);\n    var source = this;\n\n    return new Enumerable(function () {\n      var enumerator = source.getEnumerator();\n      var lookup = null;\n\n      return new IEnumerator(\n      function () {\n        enumerator = source.getEnumerator();\n        lookup = Enumerable.from(inner).toLookup(innerKeySelector, Functions.Identity, compareSelector);\n      },\n      function () {\n        if (enumerator.moveNext()) {\n          var innerElement = lookup.get(outerKeySelector(enumerator.current()));\n          return this.yieldReturn(resultSelector(enumerator.current(), innerElement));\n        }\n        return false;\n      },\n      function () {Utils.dispose(enumerator);});\n    });\n  };\n\n  /* Set Methods */\n\n  Enumerable.prototype.all = function (predicate) {\n    predicate = Utils.createLambda(predicate);\n\n    var result = true;\n    this.forEach(function (x) {\n      if (!predicate(x)) {\n        result = false;\n        return false; // break\n      }\n    });\n    return result;\n  };\n\n  // Overload:function()\n  // Overload:function(predicate)\n  Enumerable.prototype.any = function (predicate) {\n    predicate = Utils.createLambda(predicate);\n\n    var enumerator = this.getEnumerator();\n    try {\n      if (arguments.length == 0) return enumerator.moveNext(); // case:function()\n\n      while (enumerator.moveNext()) // case:function(predicate)\n      {\n        if (predicate(enumerator.current())) return true;\n      }\n      return false;\n    } finally\n    {\n      Utils.dispose(enumerator);\n    }\n  };\n\n  Enumerable.prototype.isEmpty = function () {\n    return !this.any();\n  };\n\n  // multiple arguments\n  Enumerable.prototype.concat = function () {\n    var source = this;\n\n    if (arguments.length == 1) {\n      var second = arguments[0];\n\n      return new Enumerable(function () {\n        var firstEnumerator;\n        var secondEnumerator;\n\n        return new IEnumerator(\n        function () {firstEnumerator = source.getEnumerator();},\n        function () {\n          if (secondEnumerator == null) {\n            if (firstEnumerator.moveNext()) return this.yieldReturn(firstEnumerator.current());\n            secondEnumerator = Enumerable.from(second).getEnumerator();\n          }\n          if (secondEnumerator.moveNext()) return this.yieldReturn(secondEnumerator.current());\n          return false;\n        },\n        function () {\n          try {\n            Utils.dispose(firstEnumerator);\n          } finally\n          {\n            Utils.dispose(secondEnumerator);\n          }\n        });\n      });\n    } else\n    {\n      var args = arguments;\n\n      return new Enumerable(function () {\n        var enumerators;\n\n        return new IEnumerator(\n        function () {\n          enumerators = Enumerable.make(source).\n          concat(Enumerable.from(args).select(Enumerable.from)).\n          select(function (x) {return x.getEnumerator();}).\n          toArray();\n        },\n        function () {\n          while (enumerators.length > 0) {\n            var enumerator = enumerators[0];\n\n            if (enumerator.moveNext()) {\n              return this.yieldReturn(enumerator.current());\n            } else\n            {\n              enumerator.dispose();\n              enumerators.splice(0, 1);\n            }\n          }\n          return this.yieldBreak();\n        },\n        function () {\n          Enumerable.from(enumerators).forEach(Utils.dispose);\n        });\n      });\n    }\n  };\n\n  Enumerable.prototype.insert = function (index, second) {\n    var source = this;\n\n    return new Enumerable(function () {\n      var firstEnumerator;\n      var secondEnumerator;\n      var count = 0;\n      var isEnumerated = false;\n\n      return new IEnumerator(\n      function () {\n        firstEnumerator = source.getEnumerator();\n        secondEnumerator = Enumerable.from(second).getEnumerator();\n      },\n      function () {\n        if (count == index && secondEnumerator.moveNext()) {\n          isEnumerated = true;\n          return this.yieldReturn(secondEnumerator.current());\n        }\n        if (firstEnumerator.moveNext()) {\n          count++;\n          return this.yieldReturn(firstEnumerator.current());\n        }\n        if (!isEnumerated && secondEnumerator.moveNext()) {\n          return this.yieldReturn(secondEnumerator.current());\n        }\n        return false;\n      },\n      function () {\n        try {\n          Utils.dispose(firstEnumerator);\n        } finally\n        {\n          Utils.dispose(secondEnumerator);\n        }\n      });\n    });\n  };\n\n  Enumerable.prototype.alternate = function (alternateValueOrSequence) {\n    var source = this;\n\n    return new Enumerable(function () {\n      var buffer;\n      var enumerator;\n      var alternateSequence;\n      var alternateEnumerator;\n\n      return new IEnumerator(\n      function () {\n        if (alternateValueOrSequence instanceof Array || alternateValueOrSequence.getEnumerator != null) {\n          alternateSequence = Enumerable.from(Enumerable.from(alternateValueOrSequence).toArray()); // freeze\n        } else\n        {\n          alternateSequence = Enumerable.make(alternateValueOrSequence);\n        }\n        enumerator = source.getEnumerator();\n        if (enumerator.moveNext()) buffer = enumerator.current();\n      },\n      function () {\n        while (true) {\n          if (alternateEnumerator != null) {\n            if (alternateEnumerator.moveNext()) {\n              return this.yieldReturn(alternateEnumerator.current());\n            } else\n            {\n              alternateEnumerator = null;\n            }\n          }\n\n          if (buffer == null && enumerator.moveNext()) {\n            buffer = enumerator.current(); // hasNext\n            alternateEnumerator = alternateSequence.getEnumerator();\n            continue; // GOTO\n          } else\n          if (buffer != null) {\n            var retVal = buffer;\n            buffer = null;\n            return this.yieldReturn(retVal);\n          }\n\n          return this.yieldBreak();\n        }\n      },\n      function () {\n        try {\n          Utils.dispose(enumerator);\n        } finally\n        {\n          Utils.dispose(alternateEnumerator);\n        }\n      });\n    });\n  };\n\n  // Overload:function(value)\n  // Overload:function(value, compareSelector)\n  Enumerable.prototype.contains = function (value, compareSelector) {\n    compareSelector = Utils.createLambda(compareSelector);\n    var enumerator = this.getEnumerator();\n    try {\n      while (enumerator.moveNext()) {\n        if (compareSelector(enumerator.current()) === value) return true;\n      }\n      return false;\n    } finally\n    {\n      Utils.dispose(enumerator);\n    }\n  };\n\n  Enumerable.prototype.defaultIfEmpty = function (defaultValue) {\n    var source = this;\n    if (defaultValue === undefined) defaultValue = null;\n\n    return new Enumerable(function () {\n      var enumerator;\n      var isFirst = true;\n\n      return new IEnumerator(\n      function () {enumerator = source.getEnumerator();},\n      function () {\n        if (enumerator.moveNext()) {\n          isFirst = false;\n          return this.yieldReturn(enumerator.current());\n        } else\n        if (isFirst) {\n          isFirst = false;\n          return this.yieldReturn(defaultValue);\n        }\n        return false;\n      },\n      function () {Utils.dispose(enumerator);});\n    });\n  };\n\n  // Overload:function()\n  // Overload:function(compareSelector)\n  Enumerable.prototype.distinct = function (compareSelector) {\n    return this.except(Enumerable.empty(), compareSelector);\n  };\n\n  Enumerable.prototype.distinctUntilChanged = function (compareSelector) {\n    compareSelector = Utils.createLambda(compareSelector);\n    var source = this;\n\n    return new Enumerable(function () {\n      var enumerator;\n      var compareKey;\n      var initial;\n\n      return new IEnumerator(\n      function () {\n        enumerator = source.getEnumerator();\n      },\n      function () {\n        while (enumerator.moveNext()) {\n          var key = compareSelector(enumerator.current());\n\n          if (initial) {\n            initial = false;\n            compareKey = key;\n            return this.yieldReturn(enumerator.current());\n          }\n\n          if (compareKey === key) {\n            continue;\n          }\n\n          compareKey = key;\n          return this.yieldReturn(enumerator.current());\n        }\n        return this.yieldBreak();\n      },\n      function () {Utils.dispose(enumerator);});\n    });\n  };\n\n  // Overload:function(second)\n  // Overload:function(second, compareSelector)\n  Enumerable.prototype.except = function (second, compareSelector) {\n    compareSelector = Utils.createLambda(compareSelector);\n    var source = this;\n\n    return new Enumerable(function () {\n      var enumerator;\n      var keys;\n\n      return new IEnumerator(\n      function () {\n        enumerator = source.getEnumerator();\n        keys = new Dictionary(compareSelector);\n        Enumerable.from(second).forEach(function (key) {keys.add(key);});\n      },\n      function () {\n        while (enumerator.moveNext()) {\n          var current = enumerator.current();\n          if (!keys.contains(current)) {\n            keys.add(current);\n            return this.yieldReturn(current);\n          }\n        }\n        return false;\n      },\n      function () {Utils.dispose(enumerator);});\n    });\n  };\n\n  // Overload:function(second)\n  // Overload:function(second, compareSelector)\n  Enumerable.prototype.intersect = function (second, compareSelector) {\n    compareSelector = Utils.createLambda(compareSelector);\n    var source = this;\n\n    return new Enumerable(function () {\n      var enumerator;\n      var keys;\n      var outs;\n\n      return new IEnumerator(\n      function () {\n        enumerator = source.getEnumerator();\n\n        keys = new Dictionary(compareSelector);\n        Enumerable.from(second).forEach(function (key) {keys.add(key);});\n        outs = new Dictionary(compareSelector);\n      },\n      function () {\n        while (enumerator.moveNext()) {\n          var current = enumerator.current();\n          if (!outs.contains(current) && keys.contains(current)) {\n            outs.add(current);\n            return this.yieldReturn(current);\n          }\n        }\n        return false;\n      },\n      function () {Utils.dispose(enumerator);});\n    });\n  };\n\n  // Overload:function(second)\n  // Overload:function(second, compareSelector)\n  Enumerable.prototype.sequenceEqual = function (second, compareSelector) {\n    compareSelector = Utils.createLambda(compareSelector);\n\n    var firstEnumerator = this.getEnumerator();\n    try {\n      var secondEnumerator = Enumerable.from(second).getEnumerator();\n      try {\n        while (firstEnumerator.moveNext()) {\n          if (!secondEnumerator.moveNext() ||\n          compareSelector(firstEnumerator.current()) !== compareSelector(secondEnumerator.current())) {\n            return false;\n          }\n        }\n\n        if (secondEnumerator.moveNext()) return false;\n        return true;\n      } finally\n      {\n        Utils.dispose(secondEnumerator);\n      }\n    } finally\n    {\n      Utils.dispose(firstEnumerator);\n    }\n  };\n\n  Enumerable.prototype.union = function (second, compareSelector) {\n    compareSelector = Utils.createLambda(compareSelector);\n    var source = this;\n\n    return new Enumerable(function () {\n      var firstEnumerator;\n      var secondEnumerator;\n      var keys;\n\n      return new IEnumerator(\n      function () {\n        firstEnumerator = source.getEnumerator();\n        keys = new Dictionary(compareSelector);\n      },\n      function () {\n        var current;\n        if (secondEnumerator === undefined) {\n          while (firstEnumerator.moveNext()) {\n            current = firstEnumerator.current();\n            if (!keys.contains(current)) {\n              keys.add(current);\n              return this.yieldReturn(current);\n            }\n          }\n          secondEnumerator = Enumerable.from(second).getEnumerator();\n        }\n        while (secondEnumerator.moveNext()) {\n          current = secondEnumerator.current();\n          if (!keys.contains(current)) {\n            keys.add(current);\n            return this.yieldReturn(current);\n          }\n        }\n        return false;\n      },\n      function () {\n        try {\n          Utils.dispose(firstEnumerator);\n        } finally\n        {\n          Utils.dispose(secondEnumerator);\n        }\n      });\n    });\n  };\n\n  /* Ordering Methods */\n\n  Enumerable.prototype.orderBy = function (keySelector) {\n    return new OrderedEnumerable(this, keySelector, false);\n  };\n\n  Enumerable.prototype.orderByDescending = function (keySelector) {\n    return new OrderedEnumerable(this, keySelector, true);\n  };\n\n  Enumerable.prototype.reverse = function () {\n    var source = this;\n\n    return new Enumerable(function () {\n      var buffer;\n      var index;\n\n      return new IEnumerator(\n      function () {\n        buffer = source.toArray();\n        index = buffer.length;\n      },\n      function () {\n        return index > 0 ?\n        this.yieldReturn(buffer[--index]) :\n        false;\n      },\n      Functions.Blank);\n    });\n  };\n\n  Enumerable.prototype.shuffle = function () {\n    var source = this;\n\n    return new Enumerable(function () {\n      var buffer;\n\n      return new IEnumerator(\n      function () {buffer = source.toArray();},\n      function () {\n        if (buffer.length > 0) {\n          var i = Math.floor(Math.random() * buffer.length);\n          return this.yieldReturn(buffer.splice(i, 1)[0]);\n        }\n        return false;\n      },\n      Functions.Blank);\n    });\n  };\n\n  Enumerable.prototype.weightedSample = function (weightSelector) {\n    weightSelector = Utils.createLambda(weightSelector);\n    var source = this;\n\n    return new Enumerable(function () {\n      var sortedByBound;\n      var totalWeight = 0;\n\n      return new IEnumerator(\n      function () {\n        sortedByBound = source.\n        choose(function (x) {\n          var weight = weightSelector(x);\n          if (weight <= 0) return null; // ignore 0\n\n          totalWeight += weight;\n          return { value: x, bound: totalWeight };\n        }).\n        toArray();\n      },\n      function () {\n        if (sortedByBound.length > 0) {\n          var draw = Math.floor(Math.random() * totalWeight) + 1;\n\n          var lower = -1;\n          var upper = sortedByBound.length;\n          while (upper - lower > 1) {\n            var index = Math.floor((lower + upper) / 2);\n            if (sortedByBound[index].bound >= draw) {\n              upper = index;\n            } else\n            {\n              lower = index;\n            }\n          }\n\n          return this.yieldReturn(sortedByBound[upper].value);\n        }\n\n        return this.yieldBreak();\n      },\n      Functions.Blank);\n    });\n  };\n\n  /* Grouping Methods */\n\n  // Overload:function(keySelector)\n  // Overload:function(keySelector,elementSelector)\n  // Overload:function(keySelector,elementSelector,resultSelector)\n  // Overload:function(keySelector,elementSelector,resultSelector,compareSelector)\n  Enumerable.prototype.groupBy = function (keySelector, elementSelector, resultSelector, compareSelector) {\n    var source = this;\n    keySelector = Utils.createLambda(keySelector);\n    elementSelector = Utils.createLambda(elementSelector);\n    if (resultSelector != null) resultSelector = Utils.createLambda(resultSelector);\n    compareSelector = Utils.createLambda(compareSelector);\n\n    return new Enumerable(function () {\n      var enumerator;\n\n      return new IEnumerator(\n      function () {\n        enumerator = source.toLookup(keySelector, elementSelector, compareSelector).\n        toEnumerable().\n        getEnumerator();\n      },\n      function () {\n        while (enumerator.moveNext()) {\n          return resultSelector == null ?\n          this.yieldReturn(enumerator.current()) :\n          this.yieldReturn(resultSelector(enumerator.current().key(), enumerator.current()));\n        }\n        return false;\n      },\n      function () {Utils.dispose(enumerator);});\n    });\n  };\n\n  // Overload:function(keySelector)\n  // Overload:function(keySelector,elementSelector)\n  // Overload:function(keySelector,elementSelector,resultSelector)\n  // Overload:function(keySelector,elementSelector,resultSelector,compareSelector)\n  Enumerable.prototype.partitionBy = function (keySelector, elementSelector, resultSelector, compareSelector) {\n\n    var source = this;\n    keySelector = Utils.createLambda(keySelector);\n    elementSelector = Utils.createLambda(elementSelector);\n    compareSelector = Utils.createLambda(compareSelector);\n    var hasResultSelector;\n    if (resultSelector == null) {\n      hasResultSelector = false;\n      resultSelector = function resultSelector(key, group) {return new Grouping(key, group);};\n    } else\n    {\n      hasResultSelector = true;\n      resultSelector = Utils.createLambda(resultSelector);\n    }\n\n    return new Enumerable(function () {\n      var enumerator;\n      var key;\n      var compareKey;\n      var group = [];\n\n      return new IEnumerator(\n      function () {\n        enumerator = source.getEnumerator();\n        if (enumerator.moveNext()) {\n          key = keySelector(enumerator.current());\n          compareKey = compareSelector(key);\n          group.push(elementSelector(enumerator.current()));\n        }\n      },\n      function () {\n        var hasNext;\n        while ((hasNext = enumerator.moveNext()) == true) {\n          if (compareKey === compareSelector(keySelector(enumerator.current()))) {\n            group.push(elementSelector(enumerator.current()));\n          } else\n          break;\n        }\n\n        if (group.length > 0) {\n          var result = hasResultSelector ?\n          resultSelector(key, Enumerable.from(group)) :\n          resultSelector(key, group);\n          if (hasNext) {\n            key = keySelector(enumerator.current());\n            compareKey = compareSelector(key);\n            group = [elementSelector(enumerator.current())];\n          } else\n          group = [];\n\n          return this.yieldReturn(result);\n        }\n\n        return false;\n      },\n      function () {Utils.dispose(enumerator);});\n    });\n  };\n\n  Enumerable.prototype.buffer = function (count) {\n    var source = this;\n\n    return new Enumerable(function () {\n      var enumerator;\n\n      return new IEnumerator(\n      function () {enumerator = source.getEnumerator();},\n      function () {\n        var array = [];\n        var index = 0;\n        while (enumerator.moveNext()) {\n          array.push(enumerator.current());\n          if (++index >= count) return this.yieldReturn(array);\n        }\n        if (array.length > 0) return this.yieldReturn(array);\n        return false;\n      },\n      function () {Utils.dispose(enumerator);});\n    });\n  };\n\n  /* Aggregate Methods */\n\n  // Overload:function(func)\n  // Overload:function(seed,func)\n  // Overload:function(seed,func,resultSelector)\n  Enumerable.prototype.aggregate = function (seed, func, resultSelector) {\n    resultSelector = Utils.createLambda(resultSelector);\n    return resultSelector(this.scan(seed, func, resultSelector).last());\n  };\n\n  // Overload:function()\n  // Overload:function(selector)\n  Enumerable.prototype.average = function (selector) {\n    selector = Utils.createLambda(selector);\n\n    var sum = 0;\n    var count = 0;\n    this.forEach(function (x) {\n      sum += selector(x);\n      ++count;\n    });\n\n    return sum / count;\n  };\n\n  // Overload:function()\n  // Overload:function(predicate)\n  Enumerable.prototype.count = function (predicate) {\n    predicate = predicate == null ? Functions.True : Utils.createLambda(predicate);\n\n    var count = 0;\n    this.forEach(function (x, i) {\n      if (predicate(x, i)) ++count;\n    });\n    return count;\n  };\n\n  // Overload:function()\n  // Overload:function(selector)\n  Enumerable.prototype.max = function (selector) {\n    if (selector == null) selector = Functions.Identity;\n    return this.select(selector).aggregate(function (a, b) {return a > b ? a : b;});\n  };\n\n  // Overload:function()\n  // Overload:function(selector)\n  Enumerable.prototype.min = function (selector) {\n    if (selector == null) selector = Functions.Identity;\n    return this.select(selector).aggregate(function (a, b) {return a < b ? a : b;});\n  };\n\n  Enumerable.prototype.maxBy = function (keySelector) {\n    keySelector = Utils.createLambda(keySelector);\n    return this.aggregate(function (a, b) {return keySelector(a) > keySelector(b) ? a : b;});\n  };\n\n  Enumerable.prototype.minBy = function (keySelector) {\n    keySelector = Utils.createLambda(keySelector);\n    return this.aggregate(function (a, b) {return keySelector(a) < keySelector(b) ? a : b;});\n  };\n\n  // Overload:function()\n  // Overload:function(selector)\n  Enumerable.prototype.sum = function (selector) {\n    if (selector == null) selector = Functions.Identity;\n    return this.select(selector).aggregate(0, function (a, b) {return a + b;});\n  };\n\n  /* Paging Methods */\n\n  Enumerable.prototype.elementAt = function (index) {\n    var value;\n    var found = false;\n    this.forEach(function (x, i) {\n      if (i == index) {\n        value = x;\n        found = true;\n        return false;\n      }\n    });\n\n    if (!found) throw new Error(\"index is less than 0 or greater than or equal to the number of elements in source.\");\n    return value;\n  };\n\n  Enumerable.prototype.elementAtOrDefault = function (index, defaultValue) {\n    if (defaultValue === undefined) defaultValue = null;\n    var value;\n    var found = false;\n    this.forEach(function (x, i) {\n      if (i == index) {\n        value = x;\n        found = true;\n        return false;\n      }\n    });\n\n    return !found ? defaultValue : value;\n  };\n\n  // Overload:function()\n  // Overload:function(predicate)\n  Enumerable.prototype.first = function (predicate) {\n    if (predicate != null) return this.where(predicate).first();\n\n    var value;\n    var found = false;\n    this.forEach(function (x) {\n      value = x;\n      found = true;\n      return false;\n    });\n\n    if (!found) throw new Error(\"first:No element satisfies the condition.\");\n    return value;\n  };\n\n  Enumerable.prototype.firstOrDefault = function (predicate, defaultValue) {\n    if (predicate !== undefined) {\n      if (typeof predicate === Types.Function || typeof Utils.createLambda(predicate) === Types.Function) {\n        return this.where(predicate).firstOrDefault(undefined, defaultValue);\n      }\n      defaultValue = predicate;\n    }\n\n    var value;\n    var found = false;\n    this.forEach(function (x) {\n      value = x;\n      found = true;\n      return false;\n    });\n    return !found ? defaultValue : value;\n  };\n\n  // Overload:function()\n  // Overload:function(predicate)\n  Enumerable.prototype.last = function (predicate) {\n    if (predicate != null) return this.where(predicate).last();\n\n    var value;\n    var found = false;\n    this.forEach(function (x) {\n      found = true;\n      value = x;\n    });\n\n    if (!found) throw new Error(\"last:No element satisfies the condition.\");\n    return value;\n  };\n\n  Enumerable.prototype.lastOrDefault = function (predicate, defaultValue) {\n    if (predicate !== undefined) {\n      if (typeof predicate === Types.Function || typeof Utils.createLambda(predicate) === Types.Function) {\n        return this.where(predicate).lastOrDefault(undefined, defaultValue);\n      }\n      defaultValue = predicate;\n    }\n\n    var value;\n    var found = false;\n    this.forEach(function (x) {\n      found = true;\n      value = x;\n    });\n    return !found ? defaultValue : value;\n  };\n\n  // Overload:function()\n  // Overload:function(predicate)\n  Enumerable.prototype.single = function (predicate) {\n    if (predicate != null) return this.where(predicate).single();\n\n    var value;\n    var found = false;\n    this.forEach(function (x) {\n      if (!found) {\n        found = true;\n        value = x;\n      } else throw new Error(\"single:sequence contains more than one element.\");\n    });\n\n    if (!found) throw new Error(\"single:No element satisfies the condition.\");\n    return value;\n  };\n\n  // Overload:function(defaultValue)\n  // Overload:function(defaultValue,predicate)\n  Enumerable.prototype.singleOrDefault = function (predicate, defaultValue) {\n    if (defaultValue === undefined) defaultValue = null;\n    if (predicate != null) return this.where(predicate).singleOrDefault(null, defaultValue);\n\n    var value;\n    var found = false;\n    this.forEach(function (x) {\n      if (!found) {\n        found = true;\n        value = x;\n      } else throw new Error(\"single:sequence contains more than one element.\");\n    });\n\n    return !found ? defaultValue : value;\n  };\n\n  Enumerable.prototype.skip = function (count) {\n    var source = this;\n\n    return new Enumerable(function () {\n      var enumerator;\n      var index = 0;\n\n      return new IEnumerator(\n      function () {\n        enumerator = source.getEnumerator();\n        while (index++ < count && enumerator.moveNext()) {\n        }\n        ;\n      },\n      function () {\n        return enumerator.moveNext() ?\n        this.yieldReturn(enumerator.current()) :\n        false;\n      },\n      function () {Utils.dispose(enumerator);});\n    });\n  };\n\n  // Overload:function(predicate<element>)\n  // Overload:function(predicate<element,index>)\n  Enumerable.prototype.skipWhile = function (predicate) {\n    predicate = Utils.createLambda(predicate);\n    var source = this;\n\n    return new Enumerable(function () {\n      var enumerator;\n      var index = 0;\n      var isSkipEnd = false;\n\n      return new IEnumerator(\n      function () {enumerator = source.getEnumerator();},\n      function () {\n        while (!isSkipEnd) {\n          if (enumerator.moveNext()) {\n            if (!predicate(enumerator.current(), index++)) {\n              isSkipEnd = true;\n              return this.yieldReturn(enumerator.current());\n            }\n            continue;\n          } else return false;\n        }\n\n        return enumerator.moveNext() ?\n        this.yieldReturn(enumerator.current()) :\n        false;\n\n      },\n      function () {Utils.dispose(enumerator);});\n    });\n  };\n\n  Enumerable.prototype.take = function (count) {\n    var source = this;\n\n    return new Enumerable(function () {\n      var enumerator;\n      var index = 0;\n\n      return new IEnumerator(\n      function () {enumerator = source.getEnumerator();},\n      function () {\n        return index++ < count && enumerator.moveNext() ?\n        this.yieldReturn(enumerator.current()) :\n        false;\n      },\n      function () {Utils.dispose(enumerator);});\n\n    });\n  };\n\n  // Overload:function(predicate<element>)\n  // Overload:function(predicate<element,index>)\n  Enumerable.prototype.takeWhile = function (predicate) {\n    predicate = Utils.createLambda(predicate);\n    var source = this;\n\n    return new Enumerable(function () {\n      var enumerator;\n      var index = 0;\n\n      return new IEnumerator(\n      function () {enumerator = source.getEnumerator();},\n      function () {\n        return enumerator.moveNext() && predicate(enumerator.current(), index++) ?\n        this.yieldReturn(enumerator.current()) :\n        false;\n      },\n      function () {Utils.dispose(enumerator);});\n    });\n  };\n\n  // Overload:function()\n  // Overload:function(count)\n  Enumerable.prototype.takeExceptLast = function (count) {\n    if (count == null) count = 1;\n    var source = this;\n\n    return new Enumerable(function () {\n      if (count <= 0) return source.getEnumerator(); // do nothing\n\n      var enumerator;\n      var q = [];\n\n      return new IEnumerator(\n      function () {enumerator = source.getEnumerator();},\n      function () {\n        while (enumerator.moveNext()) {\n          if (q.length == count) {\n            q.push(enumerator.current());\n            return this.yieldReturn(q.shift());\n          }\n          q.push(enumerator.current());\n        }\n        return false;\n      },\n      function () {Utils.dispose(enumerator);});\n    });\n  };\n\n  Enumerable.prototype.takeFromLast = function (count) {\n    if (count <= 0 || count == null) return Enumerable.empty();\n    var source = this;\n\n    return new Enumerable(function () {\n      var sourceEnumerator;\n      var enumerator;\n      var q = [];\n\n      return new IEnumerator(\n      function () {sourceEnumerator = source.getEnumerator();},\n      function () {\n        while (sourceEnumerator.moveNext()) {\n          if (q.length == count) q.shift();\n          q.push(sourceEnumerator.current());\n        }\n        if (enumerator == null) {\n          enumerator = Enumerable.from(q).getEnumerator();\n        }\n        return enumerator.moveNext() ?\n        this.yieldReturn(enumerator.current()) :\n        false;\n      },\n      function () {Utils.dispose(enumerator);});\n    });\n  };\n\n  // Overload:function(item)\n  // Overload:function(predicate)\n  Enumerable.prototype.indexOf = function (item) {\n    var found = null;\n\n    // item as predicate\n    if (typeof item === Types.Function) {\n      this.forEach(function (x, i) {\n        if (item(x, i)) {\n          found = i;\n          return false;\n        }\n      });\n    } else\n    {\n      this.forEach(function (x, i) {\n        if (x === item) {\n          found = i;\n          return false;\n        }\n      });\n    }\n\n    return found !== null ? found : -1;\n  };\n\n  // Overload:function(item)\n  // Overload:function(predicate)\n  Enumerable.prototype.lastIndexOf = function (item) {\n    var result = -1;\n\n    // item as predicate\n    if (typeof item === Types.Function) {\n      this.forEach(function (x, i) {\n        if (item(x, i)) result = i;\n      });\n    } else\n    {\n      this.forEach(function (x, i) {\n        if (x === item) result = i;\n      });\n    }\n\n    return result;\n  };\n\n  /* Convert Methods */\n\n  Enumerable.prototype.cast = function () {\n    return this;\n  };\n\n  Enumerable.prototype.asEnumerable = function () {\n    return Enumerable.from(this);\n  };\n\n  Enumerable.prototype.toArray = function () {\n    var array = [];\n    this.forEach(function (x) {array.push(x);});\n    return array;\n  };\n\n  // Overload:function(keySelector)\n  // Overload:function(keySelector, elementSelector)\n  // Overload:function(keySelector, elementSelector, compareSelector)\n  Enumerable.prototype.toLookup = function (keySelector, elementSelector, compareSelector) {\n    keySelector = Utils.createLambda(keySelector);\n    elementSelector = Utils.createLambda(elementSelector);\n    compareSelector = Utils.createLambda(compareSelector);\n\n    var dict = new Dictionary(compareSelector);\n    this.forEach(function (x) {\n      var key = keySelector(x);\n      var element = elementSelector(x);\n\n      var array = dict.get(key);\n      if (array !== undefined) array.push(element);else\n      dict.add(key, [element]);\n    });\n    return new Lookup(dict);\n  };\n\n  Enumerable.prototype.toObject = function (keySelector, elementSelector) {\n    keySelector = Utils.createLambda(keySelector);\n    elementSelector = Utils.createLambda(elementSelector);\n\n    var obj = {};\n    this.forEach(function (x) {\n      obj[keySelector(x)] = elementSelector(x);\n    });\n    return obj;\n  };\n\n  // Overload:function(keySelector, elementSelector)\n  // Overload:function(keySelector, elementSelector, compareSelector)\n  Enumerable.prototype.toDictionary = function (keySelector, elementSelector, compareSelector) {\n    keySelector = Utils.createLambda(keySelector);\n    elementSelector = Utils.createLambda(elementSelector);\n    compareSelector = Utils.createLambda(compareSelector);\n\n    var dict = new Dictionary(compareSelector);\n    this.forEach(function (x) {\n      dict.add(keySelector(x), elementSelector(x));\n    });\n    return dict;\n  };\n\n  // Overload:function()\n  // Overload:function(replacer)\n  // Overload:function(replacer, space)\n  Enumerable.prototype.toJSONString = function (replacer, space) {\n    if (typeof JSON === Types.Undefined || JSON.stringify == null) {\n      throw new Error(\"toJSONString can't find JSON.stringify. This works native JSON support Browser or include json2.js\");\n    }\n    return JSON.stringify(this.toArray(), replacer, space);\n  };\n\n  // Overload:function()\n  // Overload:function(separator)\n  // Overload:function(separator,selector)\n  Enumerable.prototype.toJoinedString = function (separator, selector) {\n    if (separator == null) separator = \"\";\n    if (selector == null) selector = Functions.Identity;\n\n    return this.select(selector).toArray().join(separator);\n  };\n\n\n  /* Action Methods */\n\n  // Overload:function(action<element>)\n  // Overload:function(action<element,index>)\n  Enumerable.prototype.doAction = function (action) {\n    var source = this;\n    action = Utils.createLambda(action);\n\n    return new Enumerable(function () {\n      var enumerator;\n      var index = 0;\n\n      return new IEnumerator(\n      function () {enumerator = source.getEnumerator();},\n      function () {\n        if (enumerator.moveNext()) {\n          action(enumerator.current(), index++);\n          return this.yieldReturn(enumerator.current());\n        }\n        return false;\n      },\n      function () {Utils.dispose(enumerator);});\n    });\n  };\n\n  // Overload:function(action<element>)\n  // Overload:function(action<element,index>)\n  // Overload:function(func<element,bool>)\n  // Overload:function(func<element,index,bool>)\n  Enumerable.prototype.forEach = function (action) {\n    action = Utils.createLambda(action);\n\n    var index = 0;\n    var enumerator = this.getEnumerator();\n    try {\n      while (enumerator.moveNext()) {\n        if (action(enumerator.current(), index++) === false) break;\n      }\n    } finally {\n      Utils.dispose(enumerator);\n    }\n  };\n\n  // Overload:function()\n  // Overload:function(separator)\n  // Overload:function(separator,selector)\n  Enumerable.prototype.write = function (separator, selector) {\n    if (separator == null) separator = \"\";\n    selector = Utils.createLambda(selector);\n\n    var isFirst = true;\n    this.forEach(function (item) {\n      if (isFirst) isFirst = false;else\n      document.write(separator);\n      document.write(selector(item));\n    });\n  };\n\n  // Overload:function()\n  // Overload:function(selector)\n  Enumerable.prototype.writeLine = function (selector) {\n    selector = Utils.createLambda(selector);\n\n    this.forEach(function (item) {\n      document.writeln(selector(item) + \"<br />\");\n    });\n  };\n\n  Enumerable.prototype.force = function () {\n    var enumerator = this.getEnumerator();\n\n    try {\n      while (enumerator.moveNext()) {\n      }\n    } finally\n    {\n      Utils.dispose(enumerator);\n    }\n  };\n\n  /* Functional Methods */\n\n  Enumerable.prototype.letBind = function (func) {\n    func = Utils.createLambda(func);\n    var source = this;\n\n    return new Enumerable(function () {\n      var enumerator;\n\n      return new IEnumerator(\n      function () {\n        enumerator = Enumerable.from(func(source)).getEnumerator();\n      },\n      function () {\n        return enumerator.moveNext() ?\n        this.yieldReturn(enumerator.current()) :\n        false;\n      },\n      function () {Utils.dispose(enumerator);});\n    });\n  };\n\n  Enumerable.prototype.share = function () {\n    var source = this;\n    var sharedEnumerator;\n    var disposed = false;\n\n    return new DisposableEnumerable(function () {\n      return new IEnumerator(\n      function () {\n        if (sharedEnumerator == null) {\n          sharedEnumerator = source.getEnumerator();\n        }\n      },\n      function () {\n        if (disposed) throw new Error(\"enumerator is disposed\");\n\n        return sharedEnumerator.moveNext() ?\n        this.yieldReturn(sharedEnumerator.current()) :\n        false;\n      },\n      Functions.Blank);\n\n    }, function () {\n      disposed = true;\n      Utils.dispose(sharedEnumerator);\n    });\n  };\n\n  Enumerable.prototype.memoize = function () {\n    var source = this;\n    var cache;\n    var enumerator;\n    var disposed = false;\n\n    return new DisposableEnumerable(function () {\n      var index = -1;\n\n      return new IEnumerator(\n      function () {\n        if (enumerator == null) {\n          enumerator = source.getEnumerator();\n          cache = [];\n        }\n      },\n      function () {\n        if (disposed) throw new Error(\"enumerator is disposed\");\n\n        index++;\n        if (cache.length <= index) {\n          return enumerator.moveNext() ?\n          this.yieldReturn(cache[index] = enumerator.current()) :\n          false;\n        }\n\n        return this.yieldReturn(cache[index]);\n      },\n      Functions.Blank);\n\n    }, function () {\n      disposed = true;\n      Utils.dispose(enumerator);\n      cache = null;\n    });\n  };\n\n  /* Iterator (ES6 for..of) support */\n  if (Utils.hasNativeIteratorSupport()) {\n    Enumerable.prototype[Symbol.iterator] = function () {\n      return {\n        enumerator: this.getEnumerator(),\n        next: function next() {\n          if (this.enumerator.moveNext()) {\n            return {\n              done: false,\n              value: this.enumerator.current() };\n\n          } else {\n            return { done: true };\n          }\n        } };\n\n    };\n  }\n\n  /* Error Handling Methods */\n\n  Enumerable.prototype.catchError = function (handler) {\n    handler = Utils.createLambda(handler);\n    var source = this;\n\n    return new Enumerable(function () {\n      var enumerator;\n\n      return new IEnumerator(\n      function () {enumerator = source.getEnumerator();},\n      function () {\n        try {\n          return enumerator.moveNext() ?\n          this.yieldReturn(enumerator.current()) :\n          false;\n        } catch (e) {\n          handler(e);\n          return false;\n        }\n      },\n      function () {Utils.dispose(enumerator);});\n    });\n  };\n\n  Enumerable.prototype.finallyAction = function (finallyAction) {\n    finallyAction = Utils.createLambda(finallyAction);\n    var source = this;\n\n    return new Enumerable(function () {\n      var enumerator;\n\n      return new IEnumerator(\n      function () {enumerator = source.getEnumerator();},\n      function () {\n        return enumerator.moveNext() ?\n        this.yieldReturn(enumerator.current()) :\n        false;\n      },\n      function () {\n        try {\n          Utils.dispose(enumerator);\n        } finally {\n          finallyAction();\n        }\n      });\n    });\n  };\n\n  /* For Debug Methods */\n\n  // Overload:function()\n  // Overload:function(selector)\n  Enumerable.prototype.log = function (selector) {\n    selector = Utils.createLambda(selector);\n\n    return this.doAction(function (item) {\n      if (typeof console !== Types.Undefined) {\n        console.log(__f__(selector(item), \" at common\\\\linq\\\\linq.js:2470\"));\n      }\n    });\n  };\n\n  // Overload:function()\n  // Overload:function(message)\n  // Overload:function(message,selector)\n  Enumerable.prototype.trace = function (message, selector) {\n    if (message == null) message = \"Trace\";\n    selector = Utils.createLambda(selector);\n\n    return this.doAction(function (item) {\n      if (typeof console !== Types.Undefined) {\n        console.log(__f__(message, selector(item), \" at common\\\\linq\\\\linq.js:2484\"));\n      }\n    });\n  };\n\n  // private\n\n  var OrderedEnumerable = function OrderedEnumerable(source, keySelector, descending, parent) {\n    this.source = source;\n    this.keySelector = Utils.createLambda(keySelector);\n    this.descending = descending;\n    this.parent = parent;\n  };\n  OrderedEnumerable.prototype = new Enumerable();\n\n  OrderedEnumerable.prototype.createOrderedEnumerable = function (keySelector, descending) {\n    return new OrderedEnumerable(this.source, keySelector, descending, this);\n  };\n\n  OrderedEnumerable.prototype.thenBy = function (keySelector) {\n    return this.createOrderedEnumerable(keySelector, false);\n  };\n\n  OrderedEnumerable.prototype.thenByDescending = function (keySelector) {\n    return this.createOrderedEnumerable(keySelector, true);\n  };\n\n  OrderedEnumerable.prototype.getEnumerator = function () {\n    var self = this;\n    var buffer;\n    var indexes;\n    var index = 0;\n\n    return new IEnumerator(\n    function () {\n      buffer = [];\n      indexes = [];\n      self.source.forEach(function (item, index) {\n        buffer.push(item);\n        indexes.push(index);\n      });\n      var sortContext = SortContext.create(self, null);\n      sortContext.GenerateKeys(buffer);\n\n      indexes.sort(function (a, b) {return sortContext.compare(a, b);});\n    },\n    function () {\n      return index < indexes.length ?\n      this.yieldReturn(buffer[indexes[index++]]) :\n      false;\n    },\n    Functions.Blank);\n\n  };\n\n  var SortContext = function SortContext(keySelector, descending, child) {\n    this.keySelector = keySelector;\n    this.descending = descending;\n    this.child = child;\n    this.keys = null;\n  };\n\n  SortContext.create = function (orderedEnumerable, currentContext) {\n    var context = new SortContext(orderedEnumerable.keySelector, orderedEnumerable.descending, currentContext);\n    if (orderedEnumerable.parent != null) return SortContext.create(orderedEnumerable.parent, context);\n    return context;\n  };\n\n  SortContext.prototype.GenerateKeys = function (source) {\n    var len = source.length;\n    var keySelector = this.keySelector;\n    var keys = new Array(len);\n    for (var i = 0; i < len; i++) {keys[i] = keySelector(source[i]);}\n    this.keys = keys;\n\n    if (this.child != null) this.child.GenerateKeys(source);\n  };\n\n  SortContext.prototype.compare = function (index1, index2) {\n    var comparison = Utils.compare(this.keys[index1], this.keys[index2]);\n\n    if (comparison == 0) {\n      if (this.child != null) return this.child.compare(index1, index2);\n      return Utils.compare(index1, index2);\n    }\n\n    return this.descending ? -comparison : comparison;\n  };\n\n  var DisposableEnumerable = function DisposableEnumerable(getEnumerator, dispose) {\n    this.dispose = dispose;\n    Enumerable.call(this, getEnumerator);\n  };\n  DisposableEnumerable.prototype = new Enumerable();\n\n  // optimize array or arraylike object\n\n  var ArrayEnumerable = function ArrayEnumerable(source) {\n    this.getSource = function () {return source;};\n  };\n  ArrayEnumerable.prototype = new Enumerable();\n\n  ArrayEnumerable.prototype.any = function (predicate) {\n    return predicate == null ?\n    this.getSource().length > 0 :\n    Enumerable.prototype.any.apply(this, arguments);\n  };\n\n  ArrayEnumerable.prototype.count = function (predicate) {\n    return predicate == null ?\n    this.getSource().length :\n    Enumerable.prototype.count.apply(this, arguments);\n  };\n\n  ArrayEnumerable.prototype.elementAt = function (index) {\n    var source = this.getSource();\n    return 0 <= index && index < source.length ?\n    source[index] :\n    Enumerable.prototype.elementAt.apply(this, arguments);\n  };\n\n  ArrayEnumerable.prototype.elementAtOrDefault = function (index, defaultValue) {\n    if (defaultValue === undefined) defaultValue = null;\n    var source = this.getSource();\n    return 0 <= index && index < source.length ?\n    source[index] :\n    defaultValue;\n  };\n\n  ArrayEnumerable.prototype.first = function (predicate) {\n    var source = this.getSource();\n    return predicate == null && source.length > 0 ?\n    source[0] :\n    Enumerable.prototype.first.apply(this, arguments);\n  };\n\n  ArrayEnumerable.prototype.firstOrDefault = function (predicate, defaultValue) {\n    if (predicate !== undefined) {\n      return Enumerable.prototype.firstOrDefault.apply(this, arguments);\n    }\n    defaultValue = predicate;\n\n    var source = this.getSource();\n    return source.length > 0 ? source[0] : defaultValue;\n  };\n\n  ArrayEnumerable.prototype.last = function (predicate) {\n    var source = this.getSource();\n    return predicate == null && source.length > 0 ?\n    source[source.length - 1] :\n    Enumerable.prototype.last.apply(this, arguments);\n  };\n\n  ArrayEnumerable.prototype.lastOrDefault = function (predicate, defaultValue) {\n    if (predicate !== undefined) {\n      return Enumerable.prototype.lastOrDefault.apply(this, arguments);\n    }\n    defaultValue = predicate;\n\n    var source = this.getSource();\n    return source.length > 0 ? source[source.length - 1] : defaultValue;\n  };\n\n  ArrayEnumerable.prototype.skip = function (count) {\n    var source = this.getSource();\n\n    return new Enumerable(function () {\n      var index;\n\n      return new IEnumerator(\n      function () {index = count < 0 ? 0 : count;},\n      function () {\n        return index < source.length ?\n        this.yieldReturn(source[index++]) :\n        false;\n      },\n      Functions.Blank);\n    });\n  };\n\n  ArrayEnumerable.prototype.takeExceptLast = function (count) {\n    if (count == null) count = 1;\n    return this.take(this.getSource().length - count);\n  };\n\n  ArrayEnumerable.prototype.takeFromLast = function (count) {\n    return this.skip(this.getSource().length - count);\n  };\n\n  ArrayEnumerable.prototype.reverse = function () {\n    var source = this.getSource();\n\n    return new Enumerable(function () {\n      var index;\n\n      return new IEnumerator(\n      function () {\n        index = source.length;\n      },\n      function () {\n        return index > 0 ?\n        this.yieldReturn(source[--index]) :\n        false;\n      },\n      Functions.Blank);\n    });\n  };\n\n  ArrayEnumerable.prototype.sequenceEqual = function (second, compareSelector) {\n    if ((second instanceof ArrayEnumerable || second instanceof Array) &&\n    compareSelector == null &&\n    Enumerable.from(second).count() != this.count()) {\n      return false;\n    }\n\n    return Enumerable.prototype.sequenceEqual.apply(this, arguments);\n  };\n\n  ArrayEnumerable.prototype.toJoinedString = function (separator, selector) {\n    var source = this.getSource();\n    if (selector != null || !(source instanceof Array)) {\n      return Enumerable.prototype.toJoinedString.apply(this, arguments);\n    }\n\n    if (separator == null) separator = \"\";\n    return source.join(separator);\n  };\n\n  ArrayEnumerable.prototype.getEnumerator = function () {\n    var source = this.getSource();\n    var index = -1;\n\n    // fast and simple enumerator\n    return {\n      current: function current() {return source[index];},\n      moveNext: function moveNext() {\n        return ++index < source.length;\n      },\n      dispose: Functions.Blank };\n\n  };\n\n  // optimization for multiple where and multiple select and whereselect\n\n  var WhereEnumerable = function WhereEnumerable(source, predicate) {\n    this.prevSource = source;\n    this.prevPredicate = predicate; // predicate.length always <= 1\n  };\n  WhereEnumerable.prototype = new Enumerable();\n\n  WhereEnumerable.prototype.where = function (predicate) {\n    predicate = Utils.createLambda(predicate);\n\n    if (predicate.length <= 1) {\n      var prevPredicate = this.prevPredicate;\n      var composedPredicate = function composedPredicate(x) {return prevPredicate(x) && predicate(x);};\n      return new WhereEnumerable(this.prevSource, composedPredicate);\n    } else\n    {\n      // if predicate use index, can't compose\n      return Enumerable.prototype.where.call(this, predicate);\n    }\n  };\n\n  WhereEnumerable.prototype.select = function (selector) {\n    selector = Utils.createLambda(selector);\n\n    return selector.length <= 1 ?\n    new WhereSelectEnumerable(this.prevSource, this.prevPredicate, selector) :\n    Enumerable.prototype.select.call(this, selector);\n  };\n\n  WhereEnumerable.prototype.getEnumerator = function () {\n    var predicate = this.prevPredicate;\n    var source = this.prevSource;\n    var enumerator;\n\n    return new IEnumerator(\n    function () {enumerator = source.getEnumerator();},\n    function () {\n      while (enumerator.moveNext()) {\n        if (predicate(enumerator.current())) {\n          return this.yieldReturn(enumerator.current());\n        }\n      }\n      return false;\n    },\n    function () {Utils.dispose(enumerator);});\n  };\n\n  var WhereSelectEnumerable = function WhereSelectEnumerable(source, predicate, selector) {\n    this.prevSource = source;\n    this.prevPredicate = predicate; // predicate.length always <= 1 or null\n    this.prevSelector = selector; // selector.length always <= 1\n  };\n  WhereSelectEnumerable.prototype = new Enumerable();\n\n  WhereSelectEnumerable.prototype.where = function (predicate) {\n    predicate = Utils.createLambda(predicate);\n\n    return predicate.length <= 1 ?\n    new WhereEnumerable(this, predicate) :\n    Enumerable.prototype.where.call(this, predicate);\n  };\n\n  WhereSelectEnumerable.prototype.select = function (selector) {\n    selector = Utils.createLambda(selector);\n\n    if (selector.length <= 1) {\n      var prevSelector = this.prevSelector;\n      var composedSelector = function composedSelector(x) {return selector(prevSelector(x));};\n      return new WhereSelectEnumerable(this.prevSource, this.prevPredicate, composedSelector);\n    } else\n    {\n      // if selector use index, can't compose\n      return Enumerable.prototype.select.call(this, selector);\n    }\n  };\n\n  WhereSelectEnumerable.prototype.getEnumerator = function () {\n    var predicate = this.prevPredicate;\n    var selector = this.prevSelector;\n    var source = this.prevSource;\n    var enumerator;\n\n    return new IEnumerator(\n    function () {enumerator = source.getEnumerator();},\n    function () {\n      while (enumerator.moveNext()) {\n        if (predicate == null || predicate(enumerator.current())) {\n          return this.yieldReturn(selector(enumerator.current()));\n        }\n      }\n      return false;\n    },\n    function () {Utils.dispose(enumerator);});\n  };\n\n  // Collections\n\n  var Dictionary = function () {\n    // static utility methods\n    var callHasOwnProperty = function callHasOwnProperty(target, key) {\n      return Object.prototype.hasOwnProperty.call(target, key);\n    };\n\n    var computeHashCode = function computeHashCode(obj) {\n      if (obj === null) return \"null\";\n      if (obj === undefined) return \"undefined\";\n\n      return typeof obj.toString === Types.Function ?\n      obj.toString() :\n      Object.prototype.toString.call(obj);\n    };\n\n    // LinkedList for Dictionary\n    var HashEntry = function HashEntry(key, value) {\n      this.key = key;\n      this.value = value;\n      this.prev = null;\n      this.next = null;\n    };\n\n    var EntryList = function EntryList() {\n      this.first = null;\n      this.last = null;\n    };\n    EntryList.prototype =\n    {\n      addLast: function addLast(entry) {\n        if (this.last != null) {\n          this.last.next = entry;\n          entry.prev = this.last;\n          this.last = entry;\n        } else this.first = this.last = entry;\n      },\n\n      replace: function replace(entry, newEntry) {\n        if (entry.prev != null) {\n          entry.prev.next = newEntry;\n          newEntry.prev = entry.prev;\n        } else this.first = newEntry;\n\n        if (entry.next != null) {\n          entry.next.prev = newEntry;\n          newEntry.next = entry.next;\n        } else this.last = newEntry;\n\n      },\n\n      remove: function remove(entry) {\n        if (entry.prev != null) entry.prev.next = entry.next;else\n        this.first = entry.next;\n\n        if (entry.next != null) entry.next.prev = entry.prev;else\n        this.last = entry.prev;\n      } };\n\n\n    // Overload:function()\n    // Overload:function(compareSelector)\n    var Dictionary = function Dictionary(compareSelector) {\n      this.countField = 0;\n      this.entryList = new EntryList();\n      this.buckets = {}; // as Dictionary<string,List<object>>\n      this.compareSelector = compareSelector == null ? Functions.Identity : compareSelector;\n    };\n    Dictionary.prototype =\n    {\n      add: function add(key, value) {\n        var compareKey = this.compareSelector(key);\n        var hash = computeHashCode(compareKey);\n        var entry = new HashEntry(key, value);\n        if (callHasOwnProperty(this.buckets, hash)) {\n          var array = this.buckets[hash];\n          for (var i = 0; i < array.length; i++) {\n            if (this.compareSelector(array[i].key) === compareKey) {\n              this.entryList.replace(array[i], entry);\n              array[i] = entry;\n              return;\n            }\n          }\n          array.push(entry);\n        } else {\n          this.buckets[hash] = [entry];\n        }\n        this.countField++;\n        this.entryList.addLast(entry);\n      },\n\n      get: function get(key) {\n        var compareKey = this.compareSelector(key);\n        var hash = computeHashCode(compareKey);\n        if (!callHasOwnProperty(this.buckets, hash)) return undefined;\n\n        var array = this.buckets[hash];\n        for (var i = 0; i < array.length; i++) {\n          var entry = array[i];\n          if (this.compareSelector(entry.key) === compareKey) return entry.value;\n        }\n        return undefined;\n      },\n\n      set: function set(key, value) {\n        var compareKey = this.compareSelector(key);\n        var hash = computeHashCode(compareKey);\n        if (callHasOwnProperty(this.buckets, hash)) {\n          var array = this.buckets[hash];\n          for (var i = 0; i < array.length; i++) {\n            if (this.compareSelector(array[i].key) === compareKey) {\n              var newEntry = new HashEntry(key, value);\n              this.entryList.replace(array[i], newEntry);\n              array[i] = newEntry;\n              return true;\n            }\n          }\n        }\n        return false;\n      },\n\n      contains: function contains(key) {\n        var compareKey = this.compareSelector(key);\n        var hash = computeHashCode(compareKey);\n        if (!callHasOwnProperty(this.buckets, hash)) return false;\n\n        var array = this.buckets[hash];\n        for (var i = 0; i < array.length; i++) {\n          if (this.compareSelector(array[i].key) === compareKey) return true;\n        }\n        return false;\n      },\n\n      clear: function clear() {\n        this.countField = 0;\n        this.buckets = {};\n        this.entryList = new EntryList();\n      },\n\n      remove: function remove(key) {\n        var compareKey = this.compareSelector(key);\n        var hash = computeHashCode(compareKey);\n        if (!callHasOwnProperty(this.buckets, hash)) return;\n\n        var array = this.buckets[hash];\n        for (var i = 0; i < array.length; i++) {\n          if (this.compareSelector(array[i].key) === compareKey) {\n            this.entryList.remove(array[i]);\n            array.splice(i, 1);\n            if (array.length == 0) delete this.buckets[hash];\n            this.countField--;\n            return;\n          }\n        }\n      },\n\n      count: function count() {\n        return this.countField;\n      },\n\n      toEnumerable: function toEnumerable() {\n        var self = this;\n        return new Enumerable(function () {\n          var currentEntry;\n\n          return new IEnumerator(\n          function () {currentEntry = self.entryList.first;},\n          function () {\n            if (currentEntry != null) {\n              var result = { key: currentEntry.key, value: currentEntry.value };\n              currentEntry = currentEntry.next;\n              return this.yieldReturn(result);\n            }\n            return false;\n          },\n          Functions.Blank);\n        });\n      } };\n\n\n    return Dictionary;\n  }();\n\n  // dictionary = Dictionary<TKey, TValue[]>\n  var Lookup = function Lookup(dictionary) {\n    this.count = function () {\n      return dictionary.count();\n    };\n    this.get = function (key) {\n      return Enumerable.from(dictionary.get(key));\n    };\n    this.contains = function (key) {\n      return dictionary.contains(key);\n    };\n    this.toEnumerable = function () {\n      return dictionary.toEnumerable().select(function (kvp) {\n        return new Grouping(kvp.key, kvp.value);\n      });\n    };\n  };\n\n  var Grouping = function Grouping(groupKey, elements) {\n    this.key = function () {\n      return groupKey;\n    };\n    ArrayEnumerable.call(this, elements);\n  };\n  Grouping.prototype = new ArrayEnumerable();\n\n  // module export\n  if (\"function\" === Types.Function && __webpack_require__(/*! !webpack amd options */ 38)) {// AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {return Enumerable;}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else\n  if (typeof module !== Types.Undefined && module.exports) {// Node\n    module.exports = Enumerable;\n  } else\n  {\n    root.Enumerable = Enumerable;\n  }\n})(void 0);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///39\n");

/***/ }),

/***/ 4:
/*!*************************************************!*\
  !*** D:/1zxyWork/daibeih5/daibei3.0/pages.json ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI0LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n");

/***/ }),

/***/ 5:
/*!*******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/dist/index.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {var _package = __webpack_require__(/*! ../package.json */ 6);function _possibleConstructorReturn(self, call) {if (call && (typeof call === \"object\" || typeof call === \"function\")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}\n\nvar STAT_VERSION = _package.version;\nvar STAT_URL = 'https://tongji.dcloud.io/uni/stat';\nvar STAT_H5_URL = 'https://tongji.dcloud.io/uni/stat.gif';\nvar PAGE_PVER_TIME = 1800;\nvar APP_PVER_TIME = 300;\nvar OPERATING_TIME = 10;\n\nvar UUID_KEY = '__DC_STAT_UUID';\nvar UUID_VALUE = '__DC_UUID_VALUE';\n\nfunction getUuid() {\n  var uuid = '';\n  if (getPlatformName() === 'n') {\n    try {\n      uuid = plus.runtime.getDCloudId();\n    } catch (e) {\n      uuid = '';\n    }\n    return uuid;\n  }\n\n  try {\n    uuid = uni.getStorageSync(UUID_KEY);\n  } catch (e) {\n    uuid = UUID_VALUE;\n  }\n\n  if (!uuid) {\n    uuid = Date.now() + '' + Math.floor(Math.random() * 1e7);\n    try {\n      uni.setStorageSync(UUID_KEY, uuid);\n    } catch (e) {\n      uni.setStorageSync(UUID_KEY, UUID_VALUE);\n    }\n  }\n  return uuid;\n}\n\nvar getSgin = function getSgin(statData) {\n  var arr = Object.keys(statData);\n  var sortArr = arr.sort();\n  var sgin = {};\n  var sginStr = '';\n  for (var i in sortArr) {\n    sgin[sortArr[i]] = statData[sortArr[i]];\n    sginStr += sortArr[i] + '=' + statData[sortArr[i]] + '&';\n  }\n  // const options = sginStr.substr(0, sginStr.length - 1)\n  // sginStr = sginStr.substr(0, sginStr.length - 1) + '&key=' + STAT_KEY;\n  // const si = crypto.createHash('md5').update(sginStr).digest('hex');\n  return {\n    sign: '',\n    options: sginStr.substr(0, sginStr.length - 1) };\n\n};\n\nvar getSplicing = function getSplicing(data) {\n  var str = '';\n  for (var i in data) {\n    str += i + '=' + data[i] + '&';\n  }\n  return str.substr(0, str.length - 1);\n};\n\nvar getTime = function getTime() {\n  return parseInt(new Date().getTime() / 1000);\n};\n\nvar getPlatformName = function getPlatformName() {\n  var platformList = {\n    'app-plus': 'n',\n    'h5': 'h5',\n    'mp-weixin': 'wx',\n    'mp-alipay': 'ali',\n    'mp-baidu': 'bd',\n    'mp-toutiao': 'tt',\n    'mp-qq': 'qq' };\n\n  return platformList[\"app-plus\"];\n};\n\nvar getPackName = function getPackName() {\n  var packName = '';\n  if (getPlatformName() === 'wx' || getPlatformName() === 'qq') {\n    // 兼容微信小程序低版本基础库\n    if (uni.canIUse('getAccountInfoSync')) {\n      packName = uni.getAccountInfoSync().miniProgram.appId || '';\n    }\n  }\n  return packName;\n};\n\nvar getVersion = function getVersion() {\n  return getPlatformName() === 'n' ? plus.runtime.version : '';\n};\n\nvar getChannel = function getChannel() {\n  var platformName = getPlatformName();\n  var channel = '';\n  if (platformName === 'n') {\n    channel = plus.runtime.channel;\n  }\n  return channel;\n};\n\nvar getScene = function getScene(options) {\n  var platformName = getPlatformName();\n  var scene = '';\n  if (options) {\n    return options;\n  }\n  if (platformName === 'wx') {\n    scene = uni.getLaunchOptionsSync().scene;\n  }\n  return scene;\n};\nvar First__Visit__Time__KEY = 'First__Visit__Time';\nvar Last__Visit__Time__KEY = 'Last__Visit__Time';\n\nvar getFirstVisitTime = function getFirstVisitTime() {\n  var timeStorge = uni.getStorageSync(First__Visit__Time__KEY);\n  var time = 0;\n  if (timeStorge) {\n    time = timeStorge;\n  } else {\n    time = getTime();\n    uni.setStorageSync(First__Visit__Time__KEY, time);\n    uni.removeStorageSync(Last__Visit__Time__KEY);\n  }\n  return time;\n};\n\nvar getLastVisitTime = function getLastVisitTime() {\n  var timeStorge = uni.getStorageSync(Last__Visit__Time__KEY);\n  var time = 0;\n  if (timeStorge) {\n    time = timeStorge;\n  } else {\n    time = '';\n  }\n  uni.setStorageSync(Last__Visit__Time__KEY, getTime());\n  return time;\n};\n\n\nvar PAGE_RESIDENCE_TIME = '__page__residence__time';\nvar First_Page_residence_time = 0;\nvar Last_Page_residence_time = 0;\n\n\nvar setPageResidenceTime = function setPageResidenceTime() {\n  First_Page_residence_time = getTime();\n  if (getPlatformName() === 'n') {\n    uni.setStorageSync(PAGE_RESIDENCE_TIME, getTime());\n  }\n  return First_Page_residence_time;\n};\n\nvar getPageResidenceTime = function getPageResidenceTime() {\n  Last_Page_residence_time = getTime();\n  if (getPlatformName() === 'n') {\n    First_Page_residence_time = uni.getStorageSync(PAGE_RESIDENCE_TIME);\n  }\n  return Last_Page_residence_time - First_Page_residence_time;\n};\nvar TOTAL__VISIT__COUNT = 'Total__Visit__Count';\nvar getTotalVisitCount = function getTotalVisitCount() {\n  var timeStorge = uni.getStorageSync(TOTAL__VISIT__COUNT);\n  var count = 1;\n  if (timeStorge) {\n    count = timeStorge;\n    count++;\n  }\n  uni.setStorageSync(TOTAL__VISIT__COUNT, count);\n  return count;\n};\n\nvar GetEncodeURIComponentOptions = function GetEncodeURIComponentOptions(statData) {\n  var data = {};\n  for (var prop in statData) {\n    data[prop] = encodeURIComponent(statData[prop]);\n  }\n  return data;\n};\n\nvar Set__First__Time = 0;\nvar Set__Last__Time = 0;\n\nvar getFirstTime = function getFirstTime() {\n  var time = new Date().getTime();\n  Set__First__Time = time;\n  Set__Last__Time = 0;\n  return time;\n};\n\n\nvar getLastTime = function getLastTime() {\n  var time = new Date().getTime();\n  Set__Last__Time = time;\n  return time;\n};\n\n\nvar getResidenceTime = function getResidenceTime(type) {\n  var residenceTime = 0;\n  if (Set__First__Time !== 0) {\n    residenceTime = Set__Last__Time - Set__First__Time;\n  }\n\n  residenceTime = parseInt(residenceTime / 1000);\n  residenceTime = residenceTime < 1 ? 1 : residenceTime;\n  if (type === 'app') {\n    var overtime = residenceTime > APP_PVER_TIME ? true : false;\n    return {\n      residenceTime: residenceTime,\n      overtime: overtime };\n\n  }\n  if (type === 'page') {\n    var _overtime = residenceTime > PAGE_PVER_TIME ? true : false;\n    return {\n      residenceTime: residenceTime,\n      overtime: _overtime };\n\n  }\n\n  return {\n    residenceTime: residenceTime };\n\n\n};\n\nvar getRoute = function getRoute() {\n  var pages = getCurrentPages();\n  var page = pages[pages.length - 1];\n  var _self = page.$vm;\n\n  if (getPlatformName() === 'bd') {\n    return _self.$mp && _self.$mp.page.is;\n  } else {\n    return _self.$scope && _self.$scope.route || _self.$mp && _self.$mp.page.route;\n  }\n};\n\nvar getPageRoute = function getPageRoute(self) {\n  var pages = getCurrentPages();\n  var page = pages[pages.length - 1];\n  var _self = page.$vm;\n  var query = self._query;\n  var str = query && JSON.stringify(query) !== '{}' ? '?' + JSON.stringify(query) : '';\n  // clear\n  self._query = '';\n  if (getPlatformName() === 'bd') {\n    return _self.$mp && _self.$mp.page.is + str;\n  } else {\n    return _self.$scope && _self.$scope.route + str || _self.$mp && _self.$mp.page.route + str;\n  }\n};\n\nvar getPageTypes = function getPageTypes(self) {\n  if (self.mpType === 'page' || self.$mp && self.$mp.mpType === 'page' || self.$options.mpType === 'page') {\n    return true;\n  }\n  return false;\n};\n\nvar calibration = function calibration(eventName, options) {\n  //  login 、 share 、pay_success 、pay_fail 、register 、title\n  if (!eventName) {\n    console.error(\"uni.report \\u7F3A\\u5C11 [eventName] \\u53C2\\u6570\");\n    return true;\n  }\n  if (typeof eventName !== 'string') {\n    console.error(\"uni.report [eventName] \\u53C2\\u6570\\u7C7B\\u578B\\u9519\\u8BEF,\\u53EA\\u80FD\\u4E3A String \\u7C7B\\u578B\");\n    return true;\n  }\n  if (eventName.length > 255) {\n    console.error(\"uni.report [eventName] \\u53C2\\u6570\\u957F\\u5EA6\\u4E0D\\u80FD\\u5927\\u4E8E 255\");\n    return true;\n  }\n\n  if (typeof options !== 'string' && typeof options !== 'object') {\n    console.error(\"uni.report [options] \\u53C2\\u6570\\u7C7B\\u578B\\u9519\\u8BEF,\\u53EA\\u80FD\\u4E3A String \\u6216 Object \\u7C7B\\u578B\");\n    return true;\n  }\n\n  if (typeof options === 'string' && options.length > 255) {\n    console.error(\"uni.report [options] \\u53C2\\u6570\\u957F\\u5EA6\\u4E0D\\u80FD\\u5927\\u4E8E 255\");\n    return true;\n  }\n\n  if (eventName === 'title' && typeof options !== 'string') {\n    console.error('uni.report [eventName] 参数为 title 时，[options] 参数只能为 String 类型');\n    return true;\n  }\n};\n\nvar PagesJson = __webpack_require__(/*! uni-pages?{\"type\":\"style\"} */ 7).default;\nvar statConfig = __webpack_require__(/*! uni-stat-config */ 8).default || __webpack_require__(/*! uni-stat-config */ 8);\n\nvar resultOptions = uni.getSystemInfoSync();var\n\nUtil = /*#__PURE__*/function () {\n  function Util() {_classCallCheck(this, Util);\n    this.self = '';\n    this._retry = 0;\n    this._platform = '';\n    this._query = {};\n    this._navigationBarTitle = {\n      config: '',\n      page: '',\n      report: '',\n      lt: '' };\n\n    this._operatingTime = 0;\n    this._reportingRequestData = {\n      '1': [],\n      '11': [] };\n\n    this.__prevent_triggering = false;\n\n    this.__licationHide = false;\n    this.__licationShow = false;\n    this._lastPageRoute = '';\n    this.statData = {\n      uuid: getUuid(),\n      ut: getPlatformName(),\n      mpn: getPackName(),\n      ak: statConfig.appid,\n      usv: STAT_VERSION,\n      v: getVersion(),\n      ch: getChannel(),\n      cn: '',\n      pn: '',\n      ct: '',\n      t: getTime(),\n      tt: '',\n      p: resultOptions.platform === 'android' ? 'a' : 'i',\n      brand: resultOptions.brand || '',\n      md: resultOptions.model,\n      sv: resultOptions.system.replace(/(Android|iOS)\\s/, ''),\n      mpsdk: resultOptions.SDKVersion || '',\n      mpv: resultOptions.version || '',\n      lang: resultOptions.language,\n      pr: resultOptions.pixelRatio,\n      ww: resultOptions.windowWidth,\n      wh: resultOptions.windowHeight,\n      sw: resultOptions.screenWidth,\n      sh: resultOptions.screenHeight };\n\n\n  }_createClass(Util, [{ key: \"_applicationShow\", value: function _applicationShow()\n\n    {\n      if (this.__licationHide) {\n        getLastTime();\n        var time = getResidenceTime('app');\n        if (time.overtime) {\n          var options = {\n            path: this._lastPageRoute,\n            scene: this.statData.sc };\n\n          this._sendReportRequest(options);\n        }\n        this.__licationHide = false;\n      }\n    } }, { key: \"_applicationHide\", value: function _applicationHide(\n\n    self, type) {\n\n      this.__licationHide = true;\n      getLastTime();\n      var time = getResidenceTime();\n      getFirstTime();\n      var route = getPageRoute(this);\n      this._sendHideRequest({\n        urlref: route,\n        urlref_ts: time.residenceTime },\n      type);\n    } }, { key: \"_pageShow\", value: function _pageShow()\n\n    {\n      var route = getPageRoute(this);\n      var routepath = getRoute();\n      this._navigationBarTitle.config = PagesJson &&\n      PagesJson.pages[routepath] &&\n      PagesJson.pages[routepath].titleNView &&\n      PagesJson.pages[routepath].titleNView.titleText ||\n      PagesJson &&\n      PagesJson.pages[routepath] &&\n      PagesJson.pages[routepath].navigationBarTitleText || '';\n\n      if (this.__licationShow) {\n        getFirstTime();\n        this.__licationShow = false;\n        // console.log('这是 onLauch 之后执行的第一次 pageShow ，为下次记录时间做准备');\n        this._lastPageRoute = route;\n        return;\n      }\n\n      getLastTime();\n      this._lastPageRoute = route;\n      var time = getResidenceTime('page');\n      if (time.overtime) {\n        var options = {\n          path: this._lastPageRoute,\n          scene: this.statData.sc };\n\n        this._sendReportRequest(options);\n      }\n      getFirstTime();\n    } }, { key: \"_pageHide\", value: function _pageHide()\n\n    {\n      if (!this.__licationHide) {\n        getLastTime();\n        var time = getResidenceTime('page');\n        this._sendPageRequest({\n          url: this._lastPageRoute,\n          urlref: this._lastPageRoute,\n          urlref_ts: time.residenceTime });\n\n        this._navigationBarTitle = {\n          config: '',\n          page: '',\n          report: '',\n          lt: '' };\n\n        return;\n      }\n    } }, { key: \"_login\", value: function _login()\n\n    {\n      this._sendEventRequest({\n        key: 'login' },\n      0);\n    } }, { key: \"_share\", value: function _share()\n\n    {\n      this._sendEventRequest({\n        key: 'share' },\n      0);\n    } }, { key: \"_payment\", value: function _payment(\n    key) {\n      this._sendEventRequest({\n        key: key },\n      0);\n    } }, { key: \"_sendReportRequest\", value: function _sendReportRequest(\n    options) {\n\n      this._navigationBarTitle.lt = '1';\n      var query = options.query && JSON.stringify(options.query) !== '{}' ? '?' + JSON.stringify(options.query) : '';\n      this.statData.lt = '1';\n      this.statData.url = options.path + query || '';\n      this.statData.t = getTime();\n      this.statData.sc = getScene(options.scene);\n      this.statData.fvts = getFirstVisitTime();\n      this.statData.lvts = getLastVisitTime();\n      this.statData.tvc = getTotalVisitCount();\n      if (getPlatformName() === 'n') {\n        this.getProperty();\n      } else {\n        this.getNetworkInfo();\n      }\n    } }, { key: \"_sendPageRequest\", value: function _sendPageRequest(\n\n    opt) {var\n\n      url =\n\n\n      opt.url,urlref = opt.urlref,urlref_ts = opt.urlref_ts;\n      this._navigationBarTitle.lt = '11';\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '11',\n        ut: this.statData.ut,\n        url: url,\n        tt: this.statData.tt,\n        urlref: urlref,\n        urlref_ts: urlref_ts,\n        ch: this.statData.ch,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }, { key: \"_sendHideRequest\", value: function _sendHideRequest(\n\n    opt, type) {var\n\n      urlref =\n\n      opt.urlref,urlref_ts = opt.urlref_ts;\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '3',\n        ut: this.statData.ut,\n        urlref: urlref,\n        urlref_ts: urlref_ts,\n        ch: this.statData.ch,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options, type);\n    } }, { key: \"_sendEventRequest\", value: function _sendEventRequest()\n\n\n\n    {var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},_ref$key = _ref.key,key = _ref$key === void 0 ? '' : _ref$key,_ref$value = _ref.value,value = _ref$value === void 0 ? \"\" : _ref$value;\n      var route = this._lastPageRoute;\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '21',\n        ut: this.statData.ut,\n        url: route,\n        ch: this.statData.ch,\n        e_n: key,\n        e_v: typeof value === 'object' ? JSON.stringify(value) : value.toString(),\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }, { key: \"getNetworkInfo\", value: function getNetworkInfo()\n\n    {var _this = this;\n      uni.getNetworkType({\n        success: function success(result) {\n          _this.statData.net = result.networkType;\n          _this.getLocation();\n        } });\n\n    } }, { key: \"getProperty\", value: function getProperty()\n\n    {var _this2 = this;\n      plus.runtime.getProperty(plus.runtime.appid, function (wgtinfo) {\n        _this2.statData.v = wgtinfo.version || '';\n        _this2.getNetworkInfo();\n      });\n    } }, { key: \"getLocation\", value: function getLocation()\n\n    {var _this3 = this;\n      if (statConfig.getLocation) {\n        uni.getLocation({\n          type: 'wgs84',\n          geocode: true,\n          success: function success(result) {\n            if (result.address) {\n              _this3.statData.cn = result.address.country;\n              _this3.statData.pn = result.address.province;\n              _this3.statData.ct = result.address.city;\n            }\n\n            _this3.statData.lat = result.latitude;\n            _this3.statData.lng = result.longitude;\n            _this3.request(_this3.statData);\n          } });\n\n      } else {\n        this.statData.lat = 0;\n        this.statData.lng = 0;\n        this.request(this.statData);\n      }\n    } }, { key: \"request\", value: function request(\n\n    data, type) {var _this4 = this;\n      var time = getTime();\n      var title = this._navigationBarTitle;\n      data.ttn = title.page;\n      data.ttpj = title.config;\n      data.ttc = title.report;\n\n      var requestData = this._reportingRequestData;\n      if (getPlatformName() === 'n') {\n        requestData = uni.getStorageSync('__UNI__STAT__DATA') || {};\n      }\n      if (!requestData[data.lt]) {\n        requestData[data.lt] = [];\n      }\n      requestData[data.lt].push(data);\n\n      if (getPlatformName() === 'n') {\n        uni.setStorageSync('__UNI__STAT__DATA', requestData);\n      }\n      if (getPageResidenceTime() < OPERATING_TIME && !type) {\n        return;\n      }\n      var uniStatData = this._reportingRequestData;\n      if (getPlatformName() === 'n') {\n        uniStatData = uni.getStorageSync('__UNI__STAT__DATA');\n      }\n      // 时间超过，重新获取时间戳\n      setPageResidenceTime();\n      var firstArr = [];\n      var contentArr = [];\n      var lastArr = [];var _loop = function _loop(\n\n      i) {\n        var rd = uniStatData[i];\n        rd.forEach(function (elm) {\n          var newData = getSplicing(elm);\n          if (i === 0) {\n            firstArr.push(newData);\n          } else if (i === 3) {\n            lastArr.push(newData);\n          } else {\n            contentArr.push(newData);\n          }\n        });};for (var i in uniStatData) {_loop(i);\n      }\n\n      firstArr.push.apply(firstArr, contentArr.concat(lastArr));\n      var optionsData = {\n        usv: STAT_VERSION, //统计 SDK 版本号\n        t: time, //发送请求时的时间戮\n        requests: JSON.stringify(firstArr) };\n\n\n      this._reportingRequestData = {};\n      if (getPlatformName() === 'n') {\n        uni.removeStorageSync('__UNI__STAT__DATA');\n      }\n\n      if (data.ut === 'h5') {\n        this.imageRequest(optionsData);\n        return;\n      }\n\n      if (getPlatformName() === 'n' && this.statData.p === 'a') {\n        setTimeout(function () {\n          _this4._sendRequest(optionsData);\n        }, 200);\n        return;\n      }\n      this._sendRequest(optionsData);\n    } }, { key: \"_sendRequest\", value: function _sendRequest(\n    optionsData) {var _this5 = this;\n      uni.request({\n        url: STAT_URL,\n        method: 'POST',\n        // header: {\n        //   'content-type': 'application/json' // 默认值\n        // },\n        data: optionsData,\n        success: function success() {\n          // if (process.env.NODE_ENV === 'development') {\n          //   console.log('stat request success');\n          // }\n        },\n        fail: function fail(e) {\n          if (++_this5._retry < 3) {\n            setTimeout(function () {\n              _this5._sendRequest(optionsData);\n            }, 1000);\n          }\n        } });\n\n    }\n    /**\r\n       * h5 请求\r\n       */ }, { key: \"imageRequest\", value: function imageRequest(\n    data) {\n      var image = new Image();\n      var options = getSgin(GetEncodeURIComponentOptions(data)).options;\n      image.src = STAT_H5_URL + '?' + options;\n    } }, { key: \"sendEvent\", value: function sendEvent(\n\n    key, value) {\n      // 校验 type 参数\n      if (calibration(key, value)) return;\n\n      if (key === 'title') {\n        this._navigationBarTitle.report = value;\n        return;\n      }\n      this._sendEventRequest({\n        key: key,\n        value: typeof value === 'object' ? JSON.stringify(value) : value },\n      1);\n    } }]);return Util;}();var\n\n\n\nStat = /*#__PURE__*/function (_Util) {_inherits(Stat, _Util);_createClass(Stat, null, [{ key: \"getInstance\", value: function getInstance()\n    {\n      if (!this.instance) {\n        this.instance = new Stat();\n      }\n      return this.instance;\n    } }]);\n  function Stat() {var _this6;_classCallCheck(this, Stat);\n    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(Stat).call(this));\n    _this6.instance = null;\n    // 注册拦截器\n    if (typeof uni.addInterceptor === 'function' && \"development\" !== 'development') {\n      _this6.addInterceptorInit();\n      _this6.interceptLogin();\n      _this6.interceptShare(true);\n      _this6.interceptRequestPayment();\n    }return _this6;\n  }_createClass(Stat, [{ key: \"addInterceptorInit\", value: function addInterceptorInit()\n\n    {\n      var self = this;\n      uni.addInterceptor('setNavigationBarTitle', {\n        invoke: function invoke(args) {\n          self._navigationBarTitle.page = args.title;\n        } });\n\n    } }, { key: \"interceptLogin\", value: function interceptLogin()\n\n    {\n      var self = this;\n      uni.addInterceptor('login', {\n        complete: function complete() {\n          self._login();\n        } });\n\n    } }, { key: \"interceptShare\", value: function interceptShare(\n\n    type) {\n      var self = this;\n      if (!type) {\n        self._share();\n        return;\n      }\n      uni.addInterceptor('share', {\n        success: function success() {\n          self._share();\n        },\n        fail: function fail() {\n          self._share();\n        } });\n\n    } }, { key: \"interceptRequestPayment\", value: function interceptRequestPayment()\n\n    {\n      var self = this;\n      uni.addInterceptor('requestPayment', {\n        success: function success() {\n          self._payment('pay_success');\n        },\n        fail: function fail() {\n          self._payment('pay_fail');\n        } });\n\n    } }, { key: \"report\", value: function report(\n\n    options, self) {\n      this.self = self;\n      // if (process.env.NODE_ENV === 'development') {\n      //   console.log('report init');\n      // }\n      setPageResidenceTime();\n      this.__licationShow = true;\n      this._sendReportRequest(options, true);\n    } }, { key: \"load\", value: function load(\n\n    options, self) {\n      if (!self.$scope && !self.$mp) {\n        var page = getCurrentPages();\n        self.$scope = page[page.length - 1];\n      }\n      this.self = self;\n      this._query = options;\n    } }, { key: \"show\", value: function show(\n\n    self) {\n      this.self = self;\n      if (getPageTypes(self)) {\n        this._pageShow(self);\n      } else {\n        this._applicationShow(self);\n      }\n    } }, { key: \"ready\", value: function ready(\n\n    self) {\n      // this.self = self;\n      // if (getPageTypes(self)) {\n      //   this._pageShow(self);\n      // }\n    } }, { key: \"hide\", value: function hide(\n    self) {\n      this.self = self;\n      if (getPageTypes(self)) {\n        this._pageHide(self);\n      } else {\n        this._applicationHide(self, true);\n      }\n    } }, { key: \"error\", value: function error(\n    em) {\n      if (this._platform === 'devtools') {\n        if (true) {\n          console.info('当前运行环境为开发者工具，不上报数据。');\n        }\n        // return;\n      }\n      var emVal = '';\n      if (!em.message) {\n        emVal = JSON.stringify(em);\n      } else {\n        emVal = em.stack;\n      }\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '31',\n        ut: this.statData.ut,\n        ch: this.statData.ch,\n        mpsdk: this.statData.mpsdk,\n        mpv: this.statData.mpv,\n        v: this.statData.v,\n        em: emVal,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }]);return Stat;}(Util);\n\n\nvar stat = Stat.getInstance();\nvar isHide = false;\nvar lifecycle = {\n  onLaunch: function onLaunch(options) {\n    stat.report(options, this);\n  },\n  onReady: function onReady() {\n    stat.ready(this);\n  },\n  onLoad: function onLoad(options) {\n    stat.load(options, this);\n    // 重写分享，获取分享上报事件\n    if (this.$scope && this.$scope.onShareAppMessage) {\n      var oldShareAppMessage = this.$scope.onShareAppMessage;\n      this.$scope.onShareAppMessage = function (options) {\n        stat.interceptShare(false);\n        return oldShareAppMessage.call(this, options);\n      };\n    }\n  },\n  onShow: function onShow() {\n    isHide = false;\n    stat.show(this);\n  },\n  onHide: function onHide() {\n    isHide = true;\n    stat.hide(this);\n  },\n  onUnload: function onUnload() {\n    if (isHide) {\n      isHide = false;\n      return;\n    }\n    stat.hide(this);\n  },\n  onError: function onError(e) {\n    stat.error(e);\n  } };\n\n\nfunction main() {\n  if (true) {\n    uni.report = function (type, options) {};\n  } else { var Vue; }\n}\n\nmain();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n");

/***/ }),

/***/ 56:
/*!*******************************************************************************!*\
  !*** D:/1zxyWork/daibeih5/daibei3.0/node_modules/jweixin-module/out/index.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}!function (e, n) { true ? module.exports = n(e) : undefined;}(window, function (o, e) {function c(n, e, i) {o.WeixinJSBridge ? WeixinJSBridge.invoke(n, r(e), function (e) {a(n, e, i);}) : d(n, i);}function i(n, i, t) {o.WeixinJSBridge ? WeixinJSBridge.on(n, function (e) {t && t.trigger && t.trigger(e), a(n, e, i);}) : d(n, t || i);}function r(e) {return (e = e || {}).appId = M.appId, e.verifyAppId = M.appId, e.verifySignType = \"sha1\", e.verifyTimestamp = M.timestamp + \"\", e.verifyNonceStr = M.nonceStr, e.verifySignature = M.signature, e;}function n(e) {return { timeStamp: e.timestamp + \"\", nonceStr: e.nonceStr, package: e.package, paySign: e.paySign, signType: e.signType || \"SHA1\" };}function a(e, n, i) {\"openEnterpriseChat\" == e && (n.errCode = n.err_code), delete n.err_code, delete n.err_desc, delete n.err_detail;var t = n.errMsg;t || (t = n.err_msg, delete n.err_msg, t = function (e, n) {var i = e,t = f[i];t && (i = t);var o = \"ok\";if (n) {var r = n.indexOf(\":\");\"confirm\" == (o = n.substring(r + 1)) && (o = \"ok\"), \"failed\" == o && (o = \"fail\"), -1 != o.indexOf(\"failed_\") && (o = o.substring(7)), -1 != o.indexOf(\"fail_\") && (o = o.substring(5)), \"access denied\" != (o = (o = o.replace(/_/g, \" \")).toLowerCase()) && \"no permission to execute\" != o || (o = \"permission denied\"), \"config\" == i && \"function not exist\" == o && (o = \"ok\"), \"\" == o && (o = \"fail\");}return n = i + \":\" + o;}(e, t), n.errMsg = t), (i = i || {})._complete && (i._complete(n), delete i._complete), t = n.errMsg || \"\", M.debug && !i.isInnerInvoke && alert(JSON.stringify(n));var o = t.indexOf(\":\");switch (t.substring(o + 1)) {case \"ok\":i.success && i.success(n);break;case \"cancel\":i.cancel && i.cancel(n);break;default:i.fail && i.fail(n);}i.complete && i.complete(n);}function s(e) {if (e) {for (var n = 0, i = e.length; n < i; ++n) {var t = e[n],o = p[t];o && (e[n] = o);}return e;}}function d(e, n) {if (!(!M.debug || n && n.isInnerInvoke)) {var i = f[e];i && (e = i), n && n._complete && delete n._complete, console.log(__f__('\"' + e + '\",', n || \"\", \" at node_modules\\\\jweixin-module\\\\out\\\\index.js:1\"));}}function l() {return new Date().getTime();}function u(e) {I && (o.WeixinJSBridge ? e() : t.addEventListener && t.addEventListener(\"WeixinJSBridgeReady\", e, !1));}if (!o.jWeixin) {var _C;var p = { config: \"preVerifyJSAPI\", onMenuShareTimeline: \"menu:share:timeline\", onMenuShareAppMessage: \"menu:share:appmessage\", onMenuShareQQ: \"menu:share:qq\", onMenuShareWeibo: \"menu:share:weiboApp\", onMenuShareQZone: \"menu:share:QZone\", previewImage: \"imagePreview\", getLocation: \"geoLocation\", openProductSpecificView: \"openProductViewWithPid\", addCard: \"batchAddCard\", openCard: \"batchViewCard\", chooseWXPay: \"getBrandWCPayRequest\", openEnterpriseRedPacket: \"getRecevieBizHongBaoRequest\", startSearchBeacons: \"startMonitoringBeacons\", stopSearchBeacons: \"stopMonitoringBeacons\", onSearchBeacons: \"onBeaconsInRange\", consumeAndShareCard: \"consumedShareCard\", openAddress: \"editAddress\" },f = function () {var e = {};for (var n in p) {e[p[n]] = n;}return e;}(),t = o.document,m = t.title,g = navigator.userAgent.toLowerCase(),h = navigator.platform.toLowerCase(),v = !(!h.match(\"mac\") && !h.match(\"win\")),S = -1 != g.indexOf(\"wxdebugger\"),I = -1 != g.indexOf(\"micromessenger\"),y = -1 != g.indexOf(\"android\"),_ = -1 != g.indexOf(\"iphone\") || -1 != g.indexOf(\"ipad\"),w = (O = g.match(/micromessenger\\/(\\d+\\.\\d+\\.\\d+)/) || g.match(/micromessenger\\/(\\d+\\.\\d+)/)) ? O[1] : \"\",k = { initStartTime: l(), initEndTime: 0, preVerifyStartTime: 0, preVerifyEndTime: 0 },T = { version: 1, appId: \"\", initTime: 0, preVerifyTime: 0, networkType: \"\", isPreVerifyOk: 1, systemType: _ ? 1 : y ? 2 : -1, clientVersion: w, url: encodeURIComponent(location.href) },M = {},P = { _completes: [] },x = { state: 0, data: {} };u(function () {k.initEndTime = l();});var A = !1,V = [],C = (_C = { config: function config(e) {d(\"config\", M = e);var t = !1 !== M.check;u(function () {if (t) c(p.config, { verifyJsApiList: s(M.jsApiList) }, function () {P._complete = function (e) {k.preVerifyEndTime = l(), x.state = 1, x.data = e;}, P.success = function (e) {T.isPreVerifyOk = 0;}, P.fail = function (e) {P._fail ? P._fail(e) : x.state = -1;};var t = P._completes;return t.push(function () {!function (e) {if (!(v || S || M.debug || w < \"6.0.2\" || T.systemType < 0)) {var i = new Image();T.appId = M.appId, T.initTime = k.initEndTime - k.initStartTime, T.preVerifyTime = k.preVerifyEndTime - k.preVerifyStartTime, C.getNetworkType({ isInnerInvoke: !0, success: function success(e) {T.networkType = e.networkType;var n = \"https://open.weixin.qq.com/sdk/report?v=\" + T.version + \"&o=\" + T.isPreVerifyOk + \"&s=\" + T.systemType + \"&c=\" + T.clientVersion + \"&a=\" + T.appId + \"&n=\" + T.networkType + \"&i=\" + T.initTime + \"&p=\" + T.preVerifyTime + \"&u=\" + T.url;i.src = n;} });}}();}), P.complete = function (e) {for (var n = 0, i = t.length; n < i; ++n) {t[n]();}P._completes = [];}, P;}()), k.preVerifyStartTime = l();else {x.state = 1;for (var e = P._completes, n = 0, i = e.length; n < i; ++n) {e[n]();}P._completes = [];}}), C.invoke || (C.invoke = function (e, n, i) {o.WeixinJSBridge && WeixinJSBridge.invoke(e, r(n), i);}, C.on = function (e, n) {o.WeixinJSBridge && WeixinJSBridge.on(e, n);});}, ready: function ready(e) {0 != x.state ? e() : (P._completes.push(e), !I && M.debug && e());}, error: function error(e) {w < \"6.0.2\" || (-1 == x.state ? e(x.data) : P._fail = e);}, checkJsApi: function checkJsApi(e) {c(\"checkJsApi\", { jsApiList: s(e.jsApiList) }, (e._complete = function (e) {if (y) {var n = e.checkResult;n && (e.checkResult = JSON.parse(n));}e = function (e) {var n = e.checkResult;for (var i in n) {var t = f[i];t && (n[t] = n[i], delete n[i]);}return e;}(e);}, e));}, onMenuShareTimeline: function onMenuShareTimeline(e) {i(p.onMenuShareTimeline, { complete: function complete() {c(\"shareTimeline\", { title: e.title || m, desc: e.title || m, img_url: e.imgUrl || \"\", link: e.link || location.href, type: e.type || \"link\", data_url: e.dataUrl || \"\" }, e);} }, e);}, onMenuShareAppMessage: function onMenuShareAppMessage(n) {i(p.onMenuShareAppMessage, { complete: function complete(e) {\"favorite\" === e.scene ? c(\"sendAppMessage\", { title: n.title || m, desc: n.desc || \"\", link: n.link || location.href, img_url: n.imgUrl || \"\", type: n.type || \"link\", data_url: n.dataUrl || \"\" }) : c(\"sendAppMessage\", { title: n.title || m, desc: n.desc || \"\", link: n.link || location.href, img_url: n.imgUrl || \"\", type: n.type || \"link\", data_url: n.dataUrl || \"\" }, n);} }, n);}, onMenuShareQQ: function onMenuShareQQ(e) {i(p.onMenuShareQQ, { complete: function complete() {c(\"shareQQ\", { title: e.title || m, desc: e.desc || \"\", img_url: e.imgUrl || \"\", link: e.link || location.href }, e);} }, e);}, onMenuShareWeibo: function onMenuShareWeibo(e) {i(p.onMenuShareWeibo, { complete: function complete() {c(\"shareWeiboApp\", { title: e.title || m, desc: e.desc || \"\", img_url: e.imgUrl || \"\", link: e.link || location.href }, e);} }, e);}, onMenuShareQZone: function onMenuShareQZone(e) {i(p.onMenuShareQZone, { complete: function complete() {c(\"shareQZone\", { title: e.title || m, desc: e.desc || \"\", img_url: e.imgUrl || \"\", link: e.link || location.href }, e);} }, e);}, updateTimelineShareData: function updateTimelineShareData(e) {c(\"updateTimelineShareData\", { title: e.title, link: e.link, imgUrl: e.imgUrl }, e);}, updateAppMessageShareData: function updateAppMessageShareData(e) {c(\"updateAppMessageShareData\", { title: e.title, desc: e.desc, link: e.link, imgUrl: e.imgUrl }, e);}, startRecord: function startRecord(e) {c(\"startRecord\", {}, e);}, stopRecord: function stopRecord(e) {c(\"stopRecord\", {}, e);}, onVoiceRecordEnd: function onVoiceRecordEnd(e) {i(\"onVoiceRecordEnd\", e);}, playVoice: function playVoice(e) {c(\"playVoice\", { localId: e.localId }, e);}, pauseVoice: function pauseVoice(e) {c(\"pauseVoice\", { localId: e.localId }, e);}, stopVoice: function stopVoice(e) {c(\"stopVoice\", { localId: e.localId }, e);}, onVoicePlayEnd: function onVoicePlayEnd(e) {i(\"onVoicePlayEnd\", e);}, uploadVoice: function uploadVoice(e) {c(\"uploadVoice\", { localId: e.localId, isShowProgressTips: 0 == e.isShowProgressTips ? 0 : 1 }, e);}, downloadVoice: function downloadVoice(e) {c(\"downloadVoice\", { serverId: e.serverId, isShowProgressTips: 0 == e.isShowProgressTips ? 0 : 1 }, e);}, translateVoice: function translateVoice(e) {c(\"translateVoice\", { localId: e.localId, isShowProgressTips: 0 == e.isShowProgressTips ? 0 : 1 }, e);}, chooseImage: function chooseImage(e) {c(\"chooseImage\", { scene: \"1|2\", count: e.count || 9, sizeType: e.sizeType || [\"original\", \"compressed\"], sourceType: e.sourceType || [\"album\", \"camera\"] }, (e._complete = function (e) {if (y) {var n = e.localIds;try {n && (e.localIds = JSON.parse(n));} catch (e) {}}}, e));}, getLocation: function getLocation(e) {}, previewImage: function previewImage(e) {c(p.previewImage, { current: e.current, urls: e.urls }, e);}, uploadImage: function uploadImage(e) {c(\"uploadImage\", { localId: e.localId, isShowProgressTips: 0 == e.isShowProgressTips ? 0 : 1 }, e);}, downloadImage: function downloadImage(e) {c(\"downloadImage\", { serverId: e.serverId, isShowProgressTips: 0 == e.isShowProgressTips ? 0 : 1 }, e);}, getLocalImgData: function getLocalImgData(e) {!1 === A ? (A = !0, c(\"getLocalImgData\", { localId: e.localId }, (e._complete = function (e) {if (A = !1, 0 < V.length) {var n = V.shift();wx.getLocalImgData(n);}}, e))) : V.push(e);}, getNetworkType: function getNetworkType(e) {c(\"getNetworkType\", {}, (e._complete = function (e) {e = function (e) {var n = e.errMsg;e.errMsg = \"getNetworkType:ok\";var i = e.subtype;if (delete e.subtype, i) e.networkType = i;else {var t = n.indexOf(\":\"),o = n.substring(t + 1);switch (o) {case \"wifi\":case \"edge\":case \"wwan\":e.networkType = o;break;default:e.errMsg = \"getNetworkType:fail\";}}return e;}(e);}, e));}, openLocation: function openLocation(e) {c(\"openLocation\", { latitude: e.latitude, longitude: e.longitude, name: e.name || \"\", address: e.address || \"\", scale: e.scale || 28, infoUrl: e.infoUrl || \"\" }, e);} }, _defineProperty(_C, \"getLocation\", function getLocation(e) {c(p.getLocation, { type: (e = e || {}).type || \"wgs84\" }, (e._complete = function (e) {delete e.type;}, e));}), _defineProperty(_C, \"hideOptionMenu\", function hideOptionMenu(e) {c(\"hideOptionMenu\", {}, e);}), _defineProperty(_C, \"showOptionMenu\", function showOptionMenu(e) {c(\"showOptionMenu\", {}, e);}), _defineProperty(_C, \"closeWindow\", function closeWindow(e) {c(\"closeWindow\", {}, e = e || {});}), _defineProperty(_C, \"hideMenuItems\", function hideMenuItems(e) {c(\"hideMenuItems\", { menuList: e.menuList }, e);}), _defineProperty(_C, \"showMenuItems\", function showMenuItems(e) {c(\"showMenuItems\", { menuList: e.menuList }, e);}), _defineProperty(_C, \"hideAllNonBaseMenuItem\", function hideAllNonBaseMenuItem(e) {c(\"hideAllNonBaseMenuItem\", {}, e);}), _defineProperty(_C, \"showAllNonBaseMenuItem\", function showAllNonBaseMenuItem(e) {c(\"showAllNonBaseMenuItem\", {}, e);}), _defineProperty(_C, \"scanQRCode\", function scanQRCode(e) {c(\"scanQRCode\", { needResult: (e = e || {}).needResult || 0, scanType: e.scanType || [\"qrCode\", \"barCode\"] }, (e._complete = function (e) {if (_) {var n = e.resultStr;if (n) {var i = JSON.parse(n);e.resultStr = i && i.scan_code && i.scan_code.scan_result;}}}, e));}), _defineProperty(_C, \"openAddress\", function openAddress(e) {c(p.openAddress, {}, (e._complete = function (e) {var n;(n = e).postalCode = n.addressPostalCode, delete n.addressPostalCode, n.provinceName = n.proviceFirstStageName, delete n.proviceFirstStageName, n.cityName = n.addressCitySecondStageName, delete n.addressCitySecondStageName, n.countryName = n.addressCountiesThirdStageName, delete n.addressCountiesThirdStageName, n.detailInfo = n.addressDetailInfo, delete n.addressDetailInfo, e = n;}, e));}), _defineProperty(_C, \"openProductSpecificView\", function openProductSpecificView(e) {c(p.openProductSpecificView, { pid: e.productId, view_type: e.viewType || 0, ext_info: e.extInfo }, e);}), _defineProperty(_C, \"addCard\", function addCard(e) {for (var n = e.cardList, i = [], t = 0, o = n.length; t < o; ++t) {var r = n[t],a = { card_id: r.cardId, card_ext: r.cardExt };i.push(a);}c(p.addCard, { card_list: i }, (e._complete = function (e) {var n = e.card_list;if (n) {for (var i = 0, t = (n = JSON.parse(n)).length; i < t; ++i) {var o = n[i];o.cardId = o.card_id, o.cardExt = o.card_ext, o.isSuccess = !!o.is_succ, delete o.card_id, delete o.card_ext, delete o.is_succ;}e.cardList = n, delete e.card_list;}}, e));}), _defineProperty(_C, \"chooseCard\", function chooseCard(e) {c(\"chooseCard\", { app_id: M.appId, location_id: e.shopId || \"\", sign_type: e.signType || \"SHA1\", card_id: e.cardId || \"\", card_type: e.cardType || \"\", card_sign: e.cardSign, time_stamp: e.timestamp + \"\", nonce_str: e.nonceStr }, (e._complete = function (e) {e.cardList = e.choose_card_info, delete e.choose_card_info;}, e));}), _defineProperty(_C, \"openCard\", function openCard(e) {for (var n = e.cardList, i = [], t = 0, o = n.length; t < o; ++t) {var r = n[t],a = { card_id: r.cardId, code: r.code };i.push(a);}c(p.openCard, { card_list: i }, e);}), _defineProperty(_C, \"consumeAndShareCard\", function consumeAndShareCard(e) {c(p.consumeAndShareCard, { consumedCardId: e.cardId, consumedCode: e.code }, e);}), _defineProperty(_C, \"chooseWXPay\", function chooseWXPay(e) {c(p.chooseWXPay, n(e), e);}), _defineProperty(_C, \"openEnterpriseRedPacket\", function openEnterpriseRedPacket(e) {c(p.openEnterpriseRedPacket, n(e), e);}), _defineProperty(_C, \"startSearchBeacons\", function startSearchBeacons(e) {c(p.startSearchBeacons, { ticket: e.ticket }, e);}), _defineProperty(_C, \"stopSearchBeacons\", function stopSearchBeacons(e) {c(p.stopSearchBeacons, {}, e);}), _defineProperty(_C, \"onSearchBeacons\", function onSearchBeacons(e) {i(p.onSearchBeacons, e);}), _defineProperty(_C, \"openEnterpriseChat\", function openEnterpriseChat(e) {c(\"openEnterpriseChat\", { useridlist: e.userIds, chatname: e.groupName }, e);}), _defineProperty(_C, \"launchMiniProgram\", function launchMiniProgram(e) {c(\"launchMiniProgram\", { targetAppId: e.targetAppId, path: function (e) {if (\"string\" == typeof e && 0 < e.length) {var n = e.split(\"?\")[0],i = e.split(\"?\")[1];return n += \".html\", void 0 !== i ? n + \"?\" + i : n;}}(e.path), envVersion: e.envVersion }, e);}), _defineProperty(_C, \"miniProgram\", { navigateBack: function navigateBack(e) {e = e || {}, u(function () {c(\"invokeMiniProgramAPI\", { name: \"navigateBack\", arg: { delta: e.delta || 1 } }, e);});}, navigateTo: function navigateTo(e) {u(function () {c(\"invokeMiniProgramAPI\", { name: \"navigateTo\", arg: { url: e.url } }, e);});}, redirectTo: function redirectTo(e) {u(function () {c(\"invokeMiniProgramAPI\", { name: \"redirectTo\", arg: { url: e.url } }, e);});}, switchTab: function switchTab(e) {u(function () {c(\"invokeMiniProgramAPI\", { name: \"switchTab\", arg: { url: e.url } }, e);});}, reLaunch: function reLaunch(e) {u(function () {c(\"invokeMiniProgramAPI\", { name: \"reLaunch\", arg: { url: e.url } }, e);});}, postMessage: function postMessage(e) {u(function () {c(\"invokeMiniProgramAPI\", { name: \"postMessage\", arg: e.data || {} }, e);});}, getEnv: function getEnv(e) {u(function () {e({ miniprogram: \"miniprogram\" === o.__wxjs_environment });});} }), _C),L = 1,B = {};return t.addEventListener(\"error\", function (e) {if (!y) {var n = e.target,i = n.tagName,t = n.src;if ((\"IMG\" == i || \"VIDEO\" == i || \"AUDIO\" == i || \"SOURCE\" == i) && -1 != t.indexOf(\"wxlocalresource://\")) {e.preventDefault(), e.stopPropagation();var o = n[\"wx-id\"];if (o || (o = L++, n[\"wx-id\"] = o), B[o]) return;B[o] = !0, wx.ready(function () {wx.getLocalImgData({ localId: t, success: function success(e) {n.src = e.localData;} });});}}}, !0), t.addEventListener(\"load\", function (e) {if (!y) {var n = e.target,i = n.tagName;if (n.src, \"IMG\" == i || \"VIDEO\" == i || \"AUDIO\" == i || \"SOURCE\" == i) {var t = n[\"wx-id\"];t && (B[t] = !1);}}}, !0), e && (o.wx = o.jWeixin = C), C;}var O;});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///56\n");

/***/ }),

/***/ 6:
/*!******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/package.json ***!
  \******************************************************/
/*! exports provided: _from, _id, _inBundle, _integrity, _location, _phantomChildren, _requested, _requiredBy, _resolved, _shasum, _spec, _where, author, bugs, bundleDependencies, deprecated, description, devDependencies, files, gitHead, homepage, license, main, name, repository, scripts, version, default */
/***/ (function(module) {

eval("module.exports = {\"_from\":\"@dcloudio/uni-stat@next\",\"_id\":\"@dcloudio/uni-stat@2.0.0-23720191024001\",\"_inBundle\":false,\"_integrity\":\"sha512-vJEk493Vdb8KueNzR2otzDi23rfyRcQBo/t1R41MwNGPk+AUB94gh10+HVLo98DRcvMzkuVofz3KXTAfEx24iw==\",\"_location\":\"/@dcloudio/uni-stat\",\"_phantomChildren\":{},\"_requested\":{\"type\":\"tag\",\"registry\":true,\"raw\":\"@dcloudio/uni-stat@next\",\"name\":\"@dcloudio/uni-stat\",\"escapedName\":\"@dcloudio%2funi-stat\",\"scope\":\"@dcloudio\",\"rawSpec\":\"next\",\"saveSpec\":null,\"fetchSpec\":\"next\"},\"_requiredBy\":[\"#USER\",\"/\",\"/@dcloudio/vue-cli-plugin-uni\"],\"_resolved\":\"https://registry.npmjs.org/@dcloudio/uni-stat/-/uni-stat-2.0.0-23720191024001.tgz\",\"_shasum\":\"18272814446a9bc6053bc92666ec7064a1767588\",\"_spec\":\"@dcloudio/uni-stat@next\",\"_where\":\"/Users/fxy/Documents/DCloud/HbuilderX-plugins/release/uniapp-cli\",\"author\":\"\",\"bugs\":{\"url\":\"https://github.com/dcloudio/uni-app/issues\"},\"bundleDependencies\":false,\"deprecated\":false,\"description\":\"\",\"devDependencies\":{\"@babel/core\":\"^7.5.5\",\"@babel/preset-env\":\"^7.5.5\",\"eslint\":\"^6.1.0\",\"rollup\":\"^1.19.3\",\"rollup-plugin-babel\":\"^4.3.3\",\"rollup-plugin-clear\":\"^2.0.7\",\"rollup-plugin-commonjs\":\"^10.0.2\",\"rollup-plugin-copy\":\"^3.1.0\",\"rollup-plugin-eslint\":\"^7.0.0\",\"rollup-plugin-json\":\"^4.0.0\",\"rollup-plugin-node-resolve\":\"^5.2.0\",\"rollup-plugin-replace\":\"^2.2.0\",\"rollup-plugin-uglify\":\"^6.0.2\"},\"files\":[\"dist\",\"package.json\",\"LICENSE\"],\"gitHead\":\"a725c04ef762e5df78a9a69d140c2666e0de05fc\",\"homepage\":\"https://github.com/dcloudio/uni-app#readme\",\"license\":\"Apache-2.0\",\"main\":\"dist/index.js\",\"name\":\"@dcloudio/uni-stat\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/dcloudio/uni-app.git\",\"directory\":\"packages/uni-stat\"},\"scripts\":{\"build\":\"NODE_ENV=production rollup -c rollup.config.js\",\"dev\":\"NODE_ENV=development rollup -w -c rollup.config.js\"},\"version\":\"2.0.0-23720191024001\"};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI2LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n");

/***/ }),

/***/ 7:
/*!******************************************************************!*\
  !*** D:/1zxyWork/daibeih5/daibei3.0/pages.json?{"type":"style"} ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = { \"pages\": { \"pages/index/index\": { \"navigationBarTitleText\": \"\", \"enablePullDownRefresh\": true }, \"pages/login/login\": { \"navigationBarTitleText\": \"登录\" }, \"pages/bbs/bbs\": { \"navigationBarTitleText\": \"社区\", \"enablePullDownRefresh\": true }, \"pages/NewsDetails/NewsDetails\": { \"navigationBarTitleText\": \"今日头条\" }, \"pages/guide/guide\": { \"navigationBarTitleText\": \"操作指南\" }, \"pages/guideDetails/guideDetails\": { \"navigationBarTitleText\": \"\" }, \"pages/login/code/code\": { \"navigationBarTitleText\": \"验证码\" }, \"pages/login/findpassword/findpassword\": { \"navigationBarTitleText\": \"找回密码\" }, \"pages/login/pwdlogin/pwdlogin\": { \"navigationBarTitleText\": \"密码登录\" }, \"pages/login/setpwd/setpwd\": { \"navigationBarTitleText\": \"设置密码\" }, \"pages/login/certification/certification\": { \"navigationBarTitleText\": \"实名认证\" }, \"pages/login/certification/complete/complete\": { \"navigationBarTitleText\": \"实名认证完成\" }, \"pages/personal/personal\": { \"navigationBarTitleText\": \"个人中心\" }, \"pages/personal/order/order\": { \"navigationBarTitleText\": \"订单\", \"enablePullDownRefresh\": true }, \"pages/personal/team/team\": { \"navigationBarTitleText\": \"下属团队\" }, \"pages/personal/customer/customer\": { \"navigationBarTitleText\": \"在线客服\" }, \"pages/personal/upgraderules/upgraderules\": { \"navigationBarTitleText\": \"奖励规则\" }, \"pages/personal/question/question\": { \"navigationBarTitleText\": \"常见问题\" }, \"pages/personal/notice/notice\": { \"navigationBarTitleText\": \"通知\" }, \"pages/personal/shouzhi/shouzhi\": { \"navigationBarTitleText\": \"收支明细\", \"enablePullDownRefresh\": true }, \"pages/personal/search/search\": { \"navigationBarTitleText\": \"搜索\" }, \"pages/index/details/details\": { \"navigationBarTitleText\": \"\" }, \"pages/index/hehuoDetails/hehuoDetails\": { \"navigationBarTitleText\": \"\" }, \"pages/index/poster/poster\": { \"navigationBarTitleText\": \"推广海报\" }, \"pages/index/loanApply/loanApply\": { \"navigationBarTitleText\": \"申请贷款\" }, \"pages/index/apply/apply\": {}, \"pages/index/historyapply/historyapply\": { \"navigationBarTitleText\": \"申请贷款\" }, \"pages/index/cardApply/cardApply\": { \"navigationBarTitleText\": \"拉新产品申请\" }, \"pages/bbsDetails/bbsDetails\": { \"navigationBarTitleText\": \"\" }, \"pages/bbs/posted/posted\": { \"navigationBarTitleText\": \"发帖\" }, \"pages/index/loanposter/loanposter\": { \"navigationBarTitleText\": \"推广海报\" }, \"pages/withdraw/withdraw\": { \"navigationBarTitleText\": \"提现\" }, \"pages/withdraw/addbank/addbank\": { \"navigationBarTitleText\": \"添加银行卡\" }, \"pages/withdraw/affirmInfo/affirmInfo\": { \"navigationBarTitleText\": \"银行卡信息确认\" }, \"pages/withdraw/cardWc/cardWc\": { \"navigationBarTitleText\": \"绑卡成功\" }, \"pages/withdraw/tixianSuccess/tixianSuccess\": { \"navigationBarTitleText\": \"\" }, \"pages/withdraw/tixianfail/tixianfail\": { \"navigationBarTitleText\": \"\" }, \"pages/withdraw/unbundle/unbundle\": { \"navigationBarTitleText\": \"\" }, \"pages/withdraw/unbundleSucc/unbundleSucc\": { \"navigationBarTitleText\": \"\" }, \"pages/index/cardhistoryapply/cardhistoryapply\": { \"navigationBarTitleText\": \"\" }, \"pages/personal/invite/invite\": { \"navigationBarTitleText\": \"招募合伙人\" }, \"pages/bbsDetails/bbscard/bbscard\": { \"navigationBarTitleText\": \"修改名片\" }, \"pages/personal/hehuoRegister/hehuoRegister\": { \"navigationBarTitleText\": \"\" }, \"pages/personal/performance/performance\": { \"navigationBarTitleText\": \"历史业绩\", \"enablePullDownRefresh\": true }, \"pages/personal/tglc/tglc\": { \"navigationBarTitleText\": \"推广流程\" }, \"pages/personal/friends/friends\": { \"navigationBarTitleText\": \"邀请好友\" }, \"pages/personal/loantg/loantg\": { \"navigationBarTitleText\": \"贷款推广\" }, \"pages/personal/smRegister/smRegister\": { \"navigationBarTitleText\": \"扫码注册\" }, \"pages/Andriodownload/Andriodownload\": { \"navigationBarTitleText\": \"安卓下载\" }, \"pages/IOSdowmload/IOSdowmload\": { \"navigationBarTitleText\": \"ios下载\" }, \"pages/guanzhuGzh/guanzhuGzh\": { \"navigationBarTitleText\": \"\" }, \"pages/personal/smLongPic/smLongPic\": { \"navigationBarTitleText\": \"\" }, \"pages/personal/customerGl/customerGl\": { \"navigationBarTitleText\": \"客户管理\" }, \"pages/index/selfApply/selfApply\": {}, \"pages/index/lockcustomer/lockcustomer\": { \"navigationBarTitleText\": \"锁定客户\" }, \"pages/index/cardDetails/cardDetails\": { \"navigationBarTitleText\": \"\" }, \"pages/loading/loading\": {}, \"pages/index/ptDetails/ptDetails\": { \"navigationBarTitleText\": \"\" }, \"pages/agreement/agreement\": {}, \"pages/ceshi/ceshi\": {}, \"pages/download/download\": { \"navigationBarTitleText\": \"下载\" }, \"pages/failure/failure\": { \"navigationBarTitleText\": \"404\" }, \"pages/personal/usbthe/usbthe\": { \"navigationBarTitleText\": \"设置中心\" }, \"pages/personal/replace/replace\": { \"navigationBarTitleText\": \"更换手机号\" }, \"pages/personal/replacecg/replacecg\": { \"navigationBarTitleText\": \"更手机号成功\" }, \"pages/personal/about/about\": { \"navigationBarTitleText\": \"关于代呗\" } }, \"globalStyle\": { \"navigationBarTextStyle\": \"black\", \"navigationBarTitleText\": \"\", \"navigationBarBackgroundColor\": \"#F8F8F8\", \"backgroundColor\": \"#F8F8F8\" } };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n");

/***/ }),

/***/ 8:
/*!*****************************************************************!*\
  !*** D:/1zxyWork/daibeih5/daibei3.0/pages.json?{"type":"stat"} ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = { \"appid\": \"__UNI__E9B4ED5\" };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJzR0FBZSxFQUFDLFNBQVEsZ0JBQVQsRSIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1wiYXBwaWRcIjpcIl9fVU5JX19FOUI0RUQ1XCJ9Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n");

/***/ })

}]);